/// <summary>
/// Computes a specular color based on Blinn-Phong model.
/// </summary>
class ComputeBRDFColorSpecularBlinnPhong : ComputeBRDFColor, SpecularPowerBase
{
    override float3 Compute(float3 lightColor, float3 lightDir, float3 normal, float3 eye) 
    {
        // Precalculates NH
        float3 HalfWay = normalize(lightDir + eye);
        float NH = saturate(dot(normal, HalfWay));

        float specularPower = SpecularPowerValue();

        // Lighting equation - Blinn-Phong
        // nf = NormalizedFactor = (n+2)(n+4) / 8.PI.(2^(-n/2)+n) ~= n + 8 / 8.PI
        // Remove PI as it is cancelled by integral over the hemisphere
        float normalizedFactor = (specularPower + 8.0f) / 8.0f;

        // SpecularLight = BL * nf * [N.H]^n * [N.L]
        return lightColor * Material.SpecularIntensity * Material.SpecularIntensity * normalizedFactor * pow(NH, specularPower) * saturate(dot(normal, lightDir));
    }
};
