/// <summary>
/// Selects the shadow map and computes the shadow factor in deferred lighting.
/// </summary>
/// <remarks>
/// SHADOWMAP_COUNT: Macro - Number of shadow maps.
/// SHADOWMAP_CASCADE_COUNT: Macro - Number of cascades.
/// HAS_DYNAMIC_SHADOWMAP_COUNT: Macro - Non fixed number of shadow maps.
/// SHADOWMAP_DEBUG: Macro - Flag to enable debug mode (1 color per cascade).
/// </remarks>

#ifndef SHADOWMAP_COUNT
# define SHADOWMAP_COUNT 1
#endif

#ifndef SHADOWMAP_CASCADE_COUNT
# define SHADOWMAP_CASCADE_COUNT 1
#endif

#ifndef SHADOWMAP_TOTAL_COUNT
# define SHADOWMAP_TOTAL_COUNT SHADOWMAP_COUNT * SHADOWMAP_CASCADE_COUNT
#endif

#ifndef HAS_DYNAMIC_SHADOWMAP_COUNT
# define HAS_DYNAMIC_SHADOWMAP_COUNT 0
#endif

#ifndef SHADOWMAP_DEBUG
# define SHADOWMAP_DEBUG 0
#endif

class DeferredShadowMapCascadeBase : ShadowMapBase, ShadowMapUtils, ShadowMapFilterBase, Transformation
{
    stream float4 vShadowMapPos[SHADOWMAP_TOTAL_COUNT];
    stream float4 vShadowMapTexPos[SHADOWMAP_TOTAL_COUNT];
    stream float4 vShadowMapDepth[SHADOWMAP_COUNT];

    NormalVSBase normal = stage;
    PositionVSBase position = stage;

    cbuffer PerPass
    {
        [Link("ShadowMapRenderer.Receivers")] ShadowMapReceiverInfo shadowMaps[SHADOWMAP_COUNT];

		[Link("ShadowMapRenderer.LevelReceivers")] ShadowMapLevelReceiverInfo shadowMapLevels[SHADOWMAP_COUNT][SHADOWMAP_CASCADE_COUNT];

#if HAS_DYNAMIC_SHADOWMAP_COUNT == 1
        [Link("ShadowMapRenderer.ShadowMapLightCount")] int ShadowMapLightCount;
#endif
    };

    override void ComputeShadowMapPositions(float4 vPositionVS)
    {
        base.ComputeShadowMapPositions(vPositionVS);

        float4 vPositionWS = mul(vPositionVS, ViewInverse);
        vPositionWS /= vPositionWS.w;

#if HAS_DYNAMIC_SHADOWMAP_COUNT == 1
        for(int i = 0; i < SHADOWMAP_COUNT && i < ShadowMapLightCount; ++i) {
#else
        for(int i = 0; i < SHADOWMAP_COUNT; ++i) {
#endif
            for(int j = 0; j < SHADOWMAP_CASCADE_COUNT; j++) {
                streams.vShadowMapPos[i * SHADOWMAP_CASCADE_COUNT + j] = mul(vPositionWS, shadowMapLevels[i][j].ShadowMapWVP);
                streams.vShadowMapDepth[i][j] = dot(shadowMaps[i].ShadowLightDirection, vPositionWS.xyz - shadowMapLevels[i][j].ShadowLightOffset) / shadowMaps[i].ShadowMapDistance;
            }
        }
    }

    override float3 ComputeShadowFactor(int i)
    {
        float2 shadowMapPos0 = 0.0;
        float2 shadowMapPos1 = 0.0;
        float2 shadowMapDistance = 0.0f;
        float shadowLERP = 0.0f;
        float shadow = 1.0f;

        int cascadeIndex;

        // [unroll] 
        for(cascadeIndex = 0; cascadeIndex < SHADOWMAP_CASCADE_COUNT; cascadeIndex++) 
        {
            if (shadow == 1.0f)
            {
                shadowMapPos0 = streams.vShadowMapPos[i * SHADOWMAP_CASCADE_COUNT + cascadeIndex].xy / streams.vShadowMapPos[i * SHADOWMAP_CASCADE_COUNT + cascadeIndex].w;
                int nextCascade = min(SHADOWMAP_CASCADE_COUNT-1, cascadeIndex + 1);
                shadowMapPos1 = streams.vShadowMapPos[i * SHADOWMAP_CASCADE_COUNT + nextCascade].xy / streams.vShadowMapPos[i * SHADOWMAP_CASCADE_COUNT + nextCascade].w;
                ////if (cascadeIndex == 0)
                ////    output.vColor.rg = shadowMapPos;
				float4 cascadeTextureCoordBorder = shadowMapLevels[i][cascadeIndex].CascadeTextureCoordsBorder;
                if (all(shadowMapPos0 > cascadeTextureCoordBorder.xy) && all(shadowMapPos0 < cascadeTextureCoordBorder.zw))
                {
                    shadowMapDistance = float2(streams.vShadowMapDepth[i][cascadeIndex], streams.vShadowMapDepth[i][nextCascade]);
                    float2 cascadeCenter = (cascadeTextureCoordBorder.xy + cascadeTextureCoordBorder.zw) * 0.5f;
#if SHADOWMAP_CASCADE_COUNT == 4
                    shadowLERP = saturate(4.0 - max(abs(shadowMapPos0.x - cascadeCenter.x),abs(shadowMapPos0.y - cascadeCenter.y)) * 16.666);
#elif SHADOWMAP_CASCADE_COUNT == 2
                    shadowLERP = saturate(4.0 - max(abs(shadowMapPos0.x - cascadeCenter.x),abs(shadowMapPos0.y - cascadeCenter.y)*.5) * 16.666);
#endif
                    shadow = 0.0;
                    // Break inside this loop didn't work on OpenGL (very bad perf) => switched to if inside loop
                    //break;
                }
            }
        }

        // Outside of shadow maps
        if (cascadeIndex == SHADOWMAP_CASCADE_COUNT)
            shadow = 0.0f;

        // Calculate shadows with lerp between cascades
        if (shadow == 0.0) {
            shadow = FilterShadow(shadowMapTexture, shadowMapSampler, shadowMapPos0, shadowMapDistance.x, i);
            // Only lerp when 
            if (shadowLERP > 0.0 && shadowLERP < 1.0f && (cascadeIndex+1) < SHADOWMAP_CASCADE_COUNT)
                shadow = lerp(FilterShadow(shadowMapTexture, shadowMapSampler, Utilities.ConvertTexCoord(shadowMapPos1), shadowMapDistance.y, i), shadow, shadowLERP);
        }

        // TODO: Should we multiply by base.ComputeShadow() to allow advanced class for shadow factor?
#if SHADOWMAP_DEBUG == 1
        //// Display Cascade with colors in debug mode
        ////                        PURPLE           RED              GREEN            BLUE             YELLOW           
        static float3 colors[4] = { float3(1,0,1), float3(1,0,0), float3(0,1,0), float3(0,0,1)};
        // If outside cascade, don't change color
        if (cascadeIndex == SHADOWMAP_CASCADE_COUNT)
            return 1.0;
        return shadow * colors[cascadeIndex];
#else
        return shadow;
#endif
    }
};
