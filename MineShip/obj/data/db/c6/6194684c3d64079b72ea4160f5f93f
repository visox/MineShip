/// <summary>
/// Computes lighting prepass from point lights.
/// </summary>
/// <remarks>
/// DEFERRED_MAX_POINT_LIGHT_COUNT: Macro - Maximum number of supported point lights.
/// </remarks>
#ifndef DEFERRED_MAX_POINT_LIGHT_COUNT
# define DEFERRED_MAX_POINT_LIGHT_COUNT 1
#endif
class DeferredPointLighting : DeferredLightingBase
{
    BRDFDiffuseBase brdfDiffuse = stage;
    BRDFSpecularBase brdfSpecular = stage;

    struct PointLightInfo
    {
        float3 vPositionVS;
        float radius;
        float3 color;
        float intensity;
    };

    [Link("LightingPrepassRenderer.LightCount")]
	int LightCount = 64;
    
    float LightAttenuationCutoff;

    cbuffer LightData
    {
        [Link("LightingPrepassRenderer.PointLightInfos")]
        PointLightInfo PointLightInfos[DEFERRED_MAX_POINT_LIGHT_COUNT];
    }

    float CalculateLightAttenuation(float lightDistance, float lightIntensity, float lightRadius, float cutoff)
    {
        // calculate basic attenuation
        float dr = max(lightDistance - lightRadius, 0)/lightRadius + 1;

        // attenuation = Li / (d/r + 1)^2
        float attenuation = lightIntensity / (dr*dr);
    
        // Apply cutoff
        attenuation = (attenuation - cutoff) / (1.0f - cutoff);
        return max(attenuation, 0.0f);
    }

    override float4 ComputeLighting(float3 positionVS, float3 normalVS, float3 eyeVS)
    {
        float4 lighting = float4(0,0,0,0);

#ifdef DEFERRED_POINT_LIGHTING_UNROLL_LOOP
        [unroll(DEFERRED_MAX_POINT_LIGHT_COUNT)]
#endif
        for (int lightIndex = 0; lightIndex < DEFERRED_MAX_POINT_LIGHT_COUNT; ++lightIndex)
		{
#ifdef DEFERRED_POINT_LIGHTING_UNROLL_LOOP
            if (lightIndex >= LightCount)
                break;
#endif
			PointLightInfo lightInfo = PointLightInfos[lightIndex];
			float3 lightDir = lightInfo.vPositionVS - positionVS;

			// Normalize lightDir
			float dist = length(lightDir);
			lightDir /= dist;
        
			float3 lightColor = lightInfo.color; // pow(lightInfo.color,2.2);
			lightColor *= CalculateLightAttenuation(dist, lightInfo.intensity, lightInfo.radius, LightAttenuationCutoff);

			// Compute Diffuse Lighting
			float3 diffuseLighting = lightInfo.intensity * brdfDiffuse.ComputeDiffuseLighting(lightColor, lightDir, normalVS, eyeVS);

			// Compute Specular Lighting
			float3 specularLighting = lightInfo.intensity * brdfSpecular.ComputeSpecularLighting(lightColor, lightDir, normalVS, eyeVS);

			// To reduce bandwidth we don't store 2 x (RGBDiffuse + RGBSpecular), we store only the RGBDiffuse + Utilities.Luminance(RGBSpecular)
			// Luminance(lighting.Specular)
			lighting += float4(diffuseLighting, Utilities.Luminance(specularLighting));
		}
        return lighting;
    }
};