/// <summary>
/// Computes lighting prepass from spot lights.
/// </summary>
/// <remarks>
/// DEFERRED_MAX_SPOT_LIGHT_COUNT: Macro - Maximum number of supported spot lights.
/// </remarks>
#ifndef DEFERRED_MAX_SPOT_LIGHT_COUNT
# define DEFERRED_MAX_SPOT_LIGHT_COUNT 1
#endif
class DeferredSpotLighting : DeferredLightingBase
{
    BRDFDiffuseBase brdfDiffuse = stage;
    BRDFSpecularBase brdfSpecular = stage;

    struct SpotLightInfo
    {
        float3 vDirectionVS;
        float intensity;
        float3 vPositionVS;
        float spotFieldAngle;
        float3 color;
        float spotBeamAngle;
    };

    [Link("LightingPrepassRenderer.LightCount")]
	int LightCount = 64;

    cbuffer LightData
    {
        [Link("LightingPrepassRenderer.SpotLightInfos")]
        SpotLightInfo SpotLightInfos[DEFERRED_MAX_SPOT_LIGHT_COUNT];
    }

    override float4 ComputeLighting(float3 positionVS, float3 normalVS, float3 eyeVS)
    {
        float4 lighting = float4(0,0,0,0);

#ifdef DEFERRED_SPOT_LIGHTING_UNROLL_LOOP
        [unroll(DEFERRED_MAX_SPOT_LIGHT_COUNT)]
#endif
        for (int lightIndex = 0; lightIndex < DEFERRED_MAX_SPOT_LIGHT_COUNT; ++lightIndex)
		{
#ifdef DEFERRED_SPOT_LIGHTING_UNROLL_LOOP
            if (lightIndex >= LightCount)
                break;
#endif
			SpotLightInfo lightInfo = SpotLightInfos[lightIndex];
			float3 dirToLight = normalize(lightInfo.vPositionVS - positionVS);
            float3 lightDir = normalize(lightInfo.vDirectionVS);
            float fieldAngle = lightInfo.spotFieldAngle;
            float beamAngle = lightInfo.spotBeamAngle;

            float factor = smoothstep(fieldAngle, beamAngle, -dot(dirToLight, lightDir));
			
            float3 lightColor = factor * lightInfo.color; // pow(lightInfo.color,2.2);

			// Compute Diffuse Lighting
			float3 diffuseLighting = lightInfo.intensity * brdfDiffuse.ComputeDiffuseLighting(lightColor, dirToLight, normalVS, eyeVS);

			// Compute Specular Lighting
			float3 specularLighting = lightInfo.intensity * brdfSpecular.ComputeSpecularLighting(lightColor, dirToLight, normalVS, eyeVS);

			// To reduce bandwidth we don't store 2 x (RGBDiffuse + RGBSpecular), we store only the RGBDiffuse + Utilities.Luminance(RGBSpecular)
			// Luminance(lighting.Specular)
			lighting += float4(diffuseLighting, Utilities.Luminance(specularLighting));
		}
        return lighting;
    }
};