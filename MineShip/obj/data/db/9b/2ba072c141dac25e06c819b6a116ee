/// <summary>
/// Computes position, eye and normal vector in view space.
/// </summary>
/// <remarks>
/// LIGHTING_MAX_LIGHT_COUNT: Macro - maximum number of lights.
/// </remarks>
#ifndef LIGHTING_MAX_LIGHT_COUNT
# define LIGHTING_MAX_LIGHT_COUNT 1
#endif
class ShadingEyeNormalVS : LightParameters, ShadingEyeNormalBase, ShaderBase
{
    NormalVSBase normal = stage;
    PositionVSBase position = stage;

    cbuffer PerPass
    {
        float3 LightDirectionsVS[LIGHTING_MAX_LIGHT_COUNT] = null;
        float3 LightPositionsVS[LIGHTING_MAX_LIGHT_COUNT] = null;
    }

    // TODO: stage variables?
    stage clone override void PSMain()
    {
        streams.ShadingNormal = normal.NormalVS();
        streams.ShadingEyePosition = position.PositionVS();
        streams.ShadingEye = -normalize(streams.ShadingEyePosition);
        base.PSMain();
    }

    float3 GetLightDirection(int i)
    {
        return LightDirectionsVS[i];
    }

    float3 GetLightPosition(int i)
    {
        return LightPositionsVS[i];
    }
};