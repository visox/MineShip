/// <summary>
/// Displaces the tessellated patch.
/// </summary>
/// <remarks>
/// TFactor: generic Semantic - Displacement factor.
/// TBase: generic Semantic - Base displacement.
///
/// InputControlPointCount: Macro - number of input control points.
/// </remarks>
#ifndef InputControlPointCount
# define InputControlPointCount 3
#endif

class TessellationDisplacement<float TFactor, float TBase> : ShaderBaseTessellation, TessellationFlat, Texturing, NormalVSBase
{
    ComputeColor tessellationDisplacement;

    override float ComputeClipping(InputPatch<Input, InputControlPointCount> input, const OutputPatch<Input2, 3> output, inout Constants constants)
    {
        float minHeight = (0.0f - TBase) * TFactor;
        float maxHeight = (1.0f - TBase) * TFactor;
        return ComputeClippingGroup3(input[0].vPositionVS, input[1].vPositionVS, input[2].vPositionVS, Projection)
            && ComputeClippingGroup3(input[0].vPositionVS + minHeight * float4(input[0].vNormalVS, 0.0f), input[1].vPositionVS + minHeight * float4(input[1].vNormalVS, 0.0f), input[2].vPositionVS + minHeight * float4(input[2].vNormalVS, 0.0f), Projection)
            && ComputeClippingGroup3(input[0].vPositionVS + maxHeight * float4(input[0].vNormalVS, 0.0f), input[1].vPositionVS + maxHeight * float4(input[1].vNormalVS, 0.0f), input[2].vPositionVS + maxHeight * float4(input[2].vNormalVS, 0.0f), Projection);
    }

    override void TessellateDomain()
    {
        float height = (tessellationDisplacement.Compute().r - TBase) * TFactor;
        streams.vPositionVS.xyz += streams.vNormalVS * height;
    }
};
