/// <summary>
/// Prepares for lighting prepass for any kind of light.
/// </summary>
class DeferredLightingShader : ShaderBase, Transformation, PositionStream2, SpecularPowerBase, PositionVSBase, NormalVSBase
{
    DeferredLightingBase lightingGroups[];

    stage stream /*nointerpolation*/ uint lightIndexID : SV_VertexID;

	stage int TileIndex = 0;
    stage int TileCountX = 16;
	stage int TileCountY = 10;

    override stage void VSMain()
    {
        base.VSMain();

		uint lightIndex = TileIndex;
		float2 startXY = float2(lightIndex % TileCountX, lightIndex / TileCountX) / float2(TileCountX, TileCountY) * 2.0 - 1.0;
		float2 vertexPosition = startXY + 1.0f / float2(TileCountX, TileCountY) * 2.0f * ((streams.Position.xy + 1.0f) * 0.5f);

		streams.ShadingPosition = float4(vertexPosition, 0.0f, 1.0f);
    }

    // TODO: in Shading?
    override stage void PSMain()
    {
        base.PSMain();
        this.GenerateNormalVS_PS();
        float3 positionVS = this.PositionVS();
        float3 eyeVS = -normalize(positionVS);
        float3 normalVS = this.NormalVS();
        float specularPower = this.SpecularPowerValue();

		streams.ColorTarget = 0.0f;

        foreach (var lightingGroup in lightingGroups)
        {
            streams.ColorTarget += lightingGroup.ComputeLighting(positionVS, normalVS, eyeVS);
        }
    }
};