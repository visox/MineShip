<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Shaders</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.ParadoxVersion">
            <summary>
            Internal version used to identify Paradox version.
            </summary>
            <remarks>
            Note: When modifying the version here, it must be modified also in the Paradox.pdxpkg 
            </remarks>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAssemblyAsText">
            <summary>
            The .NET current assembly version as text, not including pre-release (alpha, beta...) information.
            </summary>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAsText">
            <summary>
            The Store current version as text, including pre-release (alpha, beta...) information
            </summary>
            <remarks>
            Version number as described in http://docs.nuget.org/docs/reference/versioning
            When using pre-release (alpha, beta, rc...etc.) and because the order of the release is in alphabetical order,
            please use a double digit like alpha00 alpha01...etc. in order to make sure that we will follow the correct
            order for the versions.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults">
            <summary>
            Result of a compilation.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.Diagnostics.LoggerResult"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults.MainBytecode">
            <summary>
            Gets or sets the main bytecode.
            </summary>
            <value>
            The main bytecode.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults.Bytecodes">
            <summary>
            Gets the bytecode. May be null if <see cref="!:LoggerResult.HasErrors"/> is <c>true</c>.
            </summary>
            <value>The bytecode.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults.MainUsedParameters">
            <summary>
            Parameters used to create this shader.
            </summary>
            <value>The ParameterCollection.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerResults.UsedParameters">
            <summary>
            List of all the used parameters per child.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters">
            <summary>
            Parameters used for compilation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.GraphicsPlatformKey">
            <summary>
            The compiler platform type.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.GraphicsProfileKey">
            <summary>
            The graphics profile target type.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.DebugKey">
            <summary>
            The debug flag.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.Platform">
            <summary>
            The shader target type
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.Profile">
            <summary>
            The shader target type
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters.Debug">
            <summary>
            Gets or sets a value indicating whether shader must be compiled with debug info.
            </summary>
            <value><c>true</c> if shader must be compiled with debug info; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerBase">
            <summary>
            Base class for implementations of <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler"/>, providing some helper functions.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler">
            <summary>
            Main interface used to compile a shader.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler.Compile(SiliconStudio.Paradox.Shaders.ShaderSource,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Compiles the specified shader source.
            </summary>
            <param name="shaderSource">The shader source.</param>
            <param name="compilerParameters">The compiler parameters.</param>
            <param name="modifiedShaders">The modified shaders during the whole application lifetime.</param>
            <param name="recentlyModifiedShaders">The modified shaders since last call.</param>
            <returns>Result of the compilation.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerBase.Compile(SiliconStudio.Paradox.Shaders.ShaderMixinSource,System.String,SiliconStudio.Paradox.Shaders.ShaderMixinParameters,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},SiliconStudio.Core.Diagnostics.LoggerResult)">
            <summary>
            Compiles the ShaderMixinSource into a platform bytecode.
            </summary>
            <param name="mixin">The ShaderMixinSource.</param>
            <param name="fullEffectName">The name of the effect.</param>
            <param name="compilerParameters">The parameters used for compilation.</param>
            <param name="modifiedShaders">The list of modified shaders.</param>
            <param name="recentlyModifiedShaders">The list of recently modified shaders.</param>
            <param name="log">The logger.</param>
            <returns>The platform-dependent bytecode.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerBase.GetShaderFromParameters(System.String,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters)">
            <summary>
            Get the shader from the database based on the parameters used for its compilation.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="parameters">The parameters.</param>
            <returns>The EffectBytecode if found.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding">
            <summary>
            Binding to a sampler.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding.#ctor(System.String,SiliconStudio.Paradox.Graphics.SamplerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding"/> class.
            </summary>
            <param name="keyName">Name of the key.</param>
            <param name="description">The description.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding.Key">
            <summary>
            The key used to bind this sampler, used internaly.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding.KeyName">
            <summary>
            The key name.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectSamplerStateBinding.Description">
            <summary>
            The description of this sampler.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.HashSourceCollection">
            <summary>
            A dictionary of associations betweens asset shader urls and <see cref="T:SiliconStudio.Core.Storage.ObjectId"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.HashSourceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.HashSourceCollection"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.HashSourceCollection.Equals(SiliconStudio.Paradox.Shaders.HashSourceCollection)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerChain">
            <summary>
            Helper class that delegates actual compilation to another <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerCache">
            <summary>
            Checks if an effect has already been compiled in its cache before deferring to a real <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerCache.CheckBytecodeInSyncAgainstSources(SiliconStudio.Paradox.Shaders.EffectBytecode,SiliconStudio.Core.IO.DatabaseFileProvider)">
            <summary>
            Checks if the specified bytecode is synchronized with latest source
            </summary>
            <param name="byteCode">The byte code.</param>
            <param name="database">The database.</param>
            <returns><c>true</c> if bytecode is synchronized with latest source, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Paradox.Shaders"/> namespace contains types to handle the Paradox high-level Shading Language.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription">
            <summary>
            Description of a constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription.Name">
            <summary>
            The name of this constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription.Size">
            <summary>
            The size in bytes.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription.Type">
            <summary>
            The type of constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription.Stage">
            <summary>
            The stage from where this constant buffer is used.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderConstantBufferDescription.Members">
            <summary>
            The members of this constant buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource">
            <summary>
            A shader source that is linked to a pdxfx effect.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderSource">
            <summary>
            A shader source.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderSource.Clone">
            <summary>
            Deep clones this instance.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderSource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="against">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource"/> class.
            </summary>
            <param name="name">The name of the pdxfx effect.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource.Equals(SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinGeneratorSource.Name">
            <summary>
            Gets or sets the name of the pdxfx effect.
            </summary>
            <value>The name of the pdxfx effect.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinObjectId">
            <summary>
            A helper class to compute a unique object id for a <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinObjectId.Compute(SiliconStudio.Paradox.Shaders.ShaderMixinSource,SiliconStudio.Paradox.Shaders.ShaderMixinParameters)">
            <summary>
            Computes a hash <see cref="T:SiliconStudio.Core.Storage.ObjectId"/> for the specified mixin.
            </summary>
            <param name="mixin">The mixin.</param>
            <param name="mixinParameters">The mixin parameters.</param>
            <returns>EffectObjectIds.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderArraySource">
            <summary>
            An array of <see cref="T:SiliconStudio.Paradox.Shaders.ShaderSource"/> used only in shader mixin compositions.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderArraySource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderArraySource"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderArraySource.Add(SiliconStudio.Paradox.Shaders.ShaderSource)">
            <summary>
            Adds the specified composition.
            </summary>
            <param name="composition">The composition.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderArraySource.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectBytecode">
            <summary>
            Contains a compiled shader with bytecode for each stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.Name">
            <summary>
            The name of this effect.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.Time">
            <summary>
            The time this bytecode was compiled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.Source">
            <summary>
            The shader source.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.Reflection">
            <summary>
            The reflection from the bytecode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.HashSources">
            <summary>
            The used sources
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectBytecode.Stages">
            <summary>
            The bytecode for each stage.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.EffectBytecode.Clone">
            <summary>
            Clones the bytecode.
            </summary>
            <returns>The cloned bytecode.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder">
            <summary>
            Interface to be implemented for dynamic mixin generation.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder.Generate(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree,SiliconStudio.Paradox.Shaders.ShaderMixinContext)">
            <summary>
            Generates a mixin.
            </summary>
            <param name="mixinTree">The mixin tree.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree">
            <summary>
            Contains a tree of <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/>. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.#ctor(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.Name">
            <summary>
            Gets or sets the name of the pdxfx effect linked to this node.
            </summary>
            <value>The name of the pdxfx effect.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.Mixin">
            <summary>
            Gets or sets the mixin.
            </summary>
            <value>The mixin.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ConstantBufferType">
            <summary>
            Describes the type of constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ConstantBufferType.Unknown">
            <summary>
            An unknown buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ConstantBufferType.ConstantBuffer">
            <summary>
            A standard constant buffer
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ConstantBufferType.TextureBuffer">
            <summary>
            A texture buffer
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectParameterData">
            <summary>
            The header of a shader parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.Key">
            <summary>
            The key of the parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.KeyName">
            <summary>
            The key name.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.KeyIndex">
            <summary>
            The index of the parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.RawName">
            <summary>
            Name of this parameter in the original shader
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.Class">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Shaders.EffectParameterClass"/> of this parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterData.Type">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Shaders.EffectParameterType"/> of this parameter.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectParameterResourceData">
            <summary>
            Describes a shader parameter for a resource type.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterResourceData.Param">
            <summary>
            The common description of this parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterResourceData.Stage">
            <summary>
            The stage this parameter is used
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterResourceData.SlotStart">
            <summary>
            The starting slot this parameter is bound.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterResourceData.SlotCount">
            <summary>
            The number of slots bound to this parameter starting at <see cref="F:SiliconStudio.Paradox.Shaders.EffectParameterResourceData.SlotStart"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectParameterValueData">
            <summary>
            Describes a shader parameter for a valuetype (usually stored in constant buffers).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.Param">
            <summary>
            The common description of this parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.SourceOffset">
            <summary>
            Source Offset in bytes from the parameter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.Offset">
            <summary>
            Offset in bytes into the constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.Count">
            <summary>
            Number of elements.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.Size">
            <summary>
            Size in bytes in a constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.RowCount">
            <summary>
            Number of rows for this element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.ColumnCount">
            <summary>
            Number of columns for this element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterValueData.DefaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectReflection">
            <summary>
            The reflection data describing the parameters of a shader.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.EffectReflection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.EffectReflection"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.SamplerStates">
            <summary>
            Gets or sets the sampler states.
            </summary>
            <value>The sampler states.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.ResourceBindings">
            <summary>
            Gets the parameter binding descriptions.
            </summary>
            <value>The resource bindings.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.ConstantBuffers">
            <summary>
            Gets the constant buffer descriptions (if any).
            </summary>
            <value>The constant buffers.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.ShaderStreamOutputDeclarations">
            <summary>
            Gets or sets the stream output declarations.
            </summary>
            <value>The stream output declarations.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.StreamOutputStrides">
            <summary>
            Gets or sets the stream output strides.
            </summary>
            <value>The stream output strides.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.EffectReflection.StreamOutputRasterizedStream">
            <summary>
            Gets or sets the stream output rasterized stream.
            </summary>
            <value>The stream output rasterized stream.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderBytecode">
            <summary>
            The bytecode of an effect.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderBytecode.Stage">
            <summary>
            The stage of this Bytecode.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderBytecode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderBytecode"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderBytecode.#ctor(SiliconStudio.Core.Storage.ObjectId,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderBytecode"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderBytecode.op_Implicit(SiliconStudio.Paradox.Shaders.ShaderBytecode)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:SiliconStudio.Paradox.Shaders.ShaderBytecode"/> to <see cref="!:System.Byte[][]"/>.
            </summary>
            <param name="shaderBytecode">The shader bytecode.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderBytecode.GetDataAsString">
            <summary>
            Gets the data as a string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderBytecode.Id">
            <summary>
            Hash of the Data.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderBytecode.Data">
            <summary>
            Gets the shader data that should be used to create the <see cref="!:Shader"/>.
            </summary>
            <value>
            The shader data.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderClassSource">
            <summary>
            A shader class used for mixin.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> class.
            </summary>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="genericArguments">The generic parameters.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="genericArguments">The generic parameters.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.ToClassName">
            <summary>
            Returns a class name as a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A class name as a <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderClassSource.op_Implicit(System.String)~SiliconStudio.Paradox.Shaders.ShaderClassSource">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/>.
            </summary>
            <param name="className">Name of the class.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderClassSource.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderClassSource.GenericArguments">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>The generic parameters.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMacro">
            <summary>
            Preprocessor macro.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMacro.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMacro"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderMacro.Name">
            <summary>
            Name of the macro to set.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderMacro.Definition">
            <summary>
            Value of the macro to set.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMacro.Equals(SiliconStudio.Paradox.Shaders.ShaderMacro)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMacro.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMacro.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinContext">
            <summary>
            A context used when mixin <see cref="T:SiliconStudio.Paradox.Shaders.ShaderSource"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.#ctor(SiliconStudio.Paradox.Effects.ParameterCollection,System.Collections.Generic.Dictionary{System.String,SiliconStudio.Paradox.Shaders.IShaderMixinBuilder},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinContext"/> class.
            </summary>
            <param name="defaultPropertyContainer">The default property container.</param>
            <param name="registeredBuilders">The registered builders.</param>
            <param name="shaderBaseName">The name of the base shader.</param>
            <exception cref="T:System.ArgumentNullException">
            defaultPropertyContainer
            or
            registeredBuilders
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.PushParameters``1(``0)">
            <summary>
            Pushes the current parameters collection being used.
            </summary>
            <typeparam name="T">Type of the parameter collection</typeparam>
            <param name="propertyContainer">The property container.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.PopParameters">
            <summary>
            Pops the parameters collection.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.GetParam``1(SiliconStudio.Paradox.Effects.ParameterKey{``0})">
            <summary>
            Gets a parameter value for the specified key.
            </summary>
            <typeparam name="T">Type of the parameter value</typeparam>
            <param name="key">The key.</param>
            <returns>The value or default value associated to this parameter key.</returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.GetMainUsedParameters">
            <summary>
            Gets all parameters used by this context when mixin a shader.
            </summary>
            <returns>ShaderMixinParameters.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.RemoveMixin(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree,System.String)">
            <summary>
            Removes the specified mixin from this instance.
            </summary>
            <param name="mixinTree">The mixin tree.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.Mixin(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree,System.String,System.Object[])">
            <summary>
            Mixins a <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> identified by its name/generic parameters into the specified mixin tree.
            </summary>
            <param name="mixinTree">The mixin tree.</param>
            <param name="name">The name.</param>
            <param name="genericParameters">The generic parameters.</param>
            <exception cref="T:System.InvalidOperationException">If the class source doesn't support generic parameters</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.BeginChild(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree)">
            <summary>
            Creates a new ParameterCollection for a child shader.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.CloneProperties">
            <summary>
            Copy the properties of the parent to the calling clone.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.EndChild">
            <summary>
            Ends the computation of the child mixin and store the used parameters.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.Mixin(SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree,SiliconStudio.Paradox.Shaders.ShaderMixinSource)">
            <summary>
            Mixins a <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/> into the specified mixin tree.
            </summary>
            <param name="mixinTree">The mixin tree.</param>
            <param name="shaderMixinSource">The shader mixin source.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.RegisterBuilder(System.String,SiliconStudio.Paradox.Shaders.IShaderMixinBuilder)">
            <summary>
            Registers a shader mixin builder.
            </summary>
            <param name="name">The name.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinContext.UnregisterBuilder(System.String)">
            <summary>
            Unregisters a shader mixin builder.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinManager">
            <summary>
            Manages <see cref="T:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder"/> and generation of shader mixins.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinManager.Register(System.String,SiliconStudio.Paradox.Shaders.IShaderMixinBuilder)">
            <summary>
            Registers a <see cref="T:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder"/> with the specified pdxfx effect name.
            </summary>
            <param name="pdxfxEffectName">Name of the mixin.</param>
            <param name="builder">The builder.</param>
            <exception cref="T:System.ArgumentNullException">
            pdxfxEffectName
            or
            builder
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinManager.Contains(System.String)">
            <summary>
            Determines whether the specified PDXFX effect is registered.
            </summary>
            <param name="pdxfxEffectName">Name of the PDXFX effect.</param>
            <returns><c>true</c> if the specified PDXFX effect is registered; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">pdxfxEffectName</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinManager.TryGet(System.String,SiliconStudio.Paradox.Shaders.IShaderMixinBuilder@)">
            <summary>
            Tries to get a <see cref="T:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder"/> by its name.
            </summary>
            <param name="pdxfxEffectName">Name of the mixin.</param>
            <param name="builder">The builder instance found or null if not found.</param>
            <returns><c>true</c> if the builder was found, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">pdxfxEffectName</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinManager.Generate(System.String,SiliconStudio.Paradox.Effects.ParameterCollection,SiliconStudio.Paradox.Shaders.ShaderMixinParameters@,System.Collections.Generic.List{SiliconStudio.Paradox.Shaders.ShaderMixinParameters}@)">
            <summary>
            Generates a <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSourceTree"/> for the specified names and parameters.
            </summary>
            <param name="pdxfxEffectName">The name.</param>
            <param name="properties">The properties.</param>
            <param name="mainUsedParameters">The parameters when prcessing the mixin.</param>
            <returns>The result of the mixin.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinManager.UnRegisterAll">
            <summary>
            Un-register all registered <see cref="T:SiliconStudio.Paradox.Shaders.IShaderMixinBuilder"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource">
            <summary>
            A mixin performing a combination of <see cref="T:SiliconStudio.Paradox.Shaders.ShaderClassSource"/> and other mixins.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.AddComposition(System.String,SiliconStudio.Paradox.Shaders.ShaderSource)">
            <summary>
            Adds a composition to this mixin.
            </summary>
            <param name="name">The name.</param>
            <param name="shaderSource">The shader source.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.AddCompositionToArray(System.String,SiliconStudio.Paradox.Shaders.ShaderSource)">
            <summary>
            Adds a composition to this mixin.
            </summary>
            <param name="name">The name.</param>
            <param name="shaderSource">The shader source element.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.AddMacro(System.String,System.Object)">
            <summary>
            Adds a macro to this mixin.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.CloneFrom(SiliconStudio.Paradox.Shaders.ShaderMixinSource)">
            <summary>
            Clones from the specified <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/>.
            </summary>
            <param name="parent">The parent mixin to clone from.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinSource.DeepCloneFrom(SiliconStudio.Paradox.Shaders.ShaderMixinSource)">
            <summary>
            Clones from the specified <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinSource"/>. Clones members too.
            </summary>
            <param name="parent">The parent mixin to clone from.</param>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSource.Mixins">
            <summary>
            Gets or sets the mixins.
            </summary>
            <value>The mixins.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSource.Macros">
            <summary>
            Gets or sets the macros.
            </summary>
            <value>The macros.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.ShaderMixinSource.Compositions">
            <summary>
            Gets or sets the compositions.
            </summary>
            <value>The compositions.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectParameterClass">
            <summary>
            Values that identify the class of a shader variable.
            </summary>
            <remarks>
            The class of a shader variable is not a programming class; the class identifies the variable class such as scalar, vector, object, and so on.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Scalar">
            <summary>
            <dd> <p>The shader variable is a scalar.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Vector">
            <summary>
            <dd> <p>The shader variable is a vector.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.MatrixRows">
            <summary>
            <dd> <p>The shader variable is a row-major matrix.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.MatrixColumns">
            <summary>
            <dd> <p>The shader variable is a column-major matrix.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Object">
            <summary>
            <dd> <p>The shader variable is an object.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Struct">
            <summary>
            <dd> <p>The shader variable is a structure.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.InterfaceClass">
            <summary>
            <dd> <p>The shader variable is a class.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.InterfacePointer">
            <summary>
            <dd> <p>The shader variable is an interface.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Sampler">
            <summary>
            A sampler state object.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.ShaderResourceView">
            <summary>
            A shader resource view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.ConstantBuffer">
            <summary>
            A constant buffer
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.TextureBuffer">
            <summary>
            A constant buffer
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.UnorderedAccessView">
            <summary>
            An unordered access view
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterClass.Color">
            <summary>
            <dd> <p>The shader variable is a vector.</p> </dd>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderMixinParameters">
            <summary>
            Parameters used for mixin.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.ShaderMixinParameters"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.ShaderMixinParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.ParameterCollection"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.EffectParameterType">
            <summary>
            <p>Values that identify various data, texture, and buffer types that can be assigned to a shader variable.</p>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Void">
            <summary>
            <dd> <p>The variable is a void reference.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Bool">
            <summary>
            <dd> <p>The variable is a boolean.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Int">
            <summary>
            <dd> <p>The variable is an integer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Float">
            <summary>
            <dd> <p>The variable is a floating-point number.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.String">
            <summary>
            <dd> <p>The variable is a string.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture">
            <summary>
            <dd> <p>The variable is a texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture1D">
            <summary>
            <dd> <p>The variable is a 1D texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture2D">
            <summary>
            <dd> <p>The variable is a 2D texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture3D">
            <summary>
            <dd> <p>The variable is a 3D texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.TextureCube">
            <summary>
            <dd> <p>The variable is a texture cube.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Sampler">
            <summary>
            <dd> <p>The variable is a sampler.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Sampler1D">
            <summary>
            <dd> <p>The variable is a sampler.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Sampler2D">
            <summary>
            <dd> <p>The variable is a sampler.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Sampler3D">
            <summary>
            <dd> <p>The variable is a sampler.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.SamplerCube">
            <summary>
            <dd> <p>The variable is a sampler.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.UInt">
            <summary>
            <dd> <p>The variable is an unsigned integer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.UInt8">
            <summary>
            <dd> <p>The variable is an 8-bit unsigned integer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Buffer">
            <summary>
            <dd> <p>The variable is a buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.ConstantBuffer">
            <summary>
            <dd> <p>The variable is a constant buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.TextureBuffer">
            <summary>
            <dd> <p>The variable is a texture buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture1DArray">
            <summary>
            <dd> <p>The variable is a 1D-texture array.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture2DArray">
            <summary>
            <dd> <p>The variable is a 2D-texture array.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture2DMultisampled">
            <summary>
            <dd> <p>The variable is a 2D-multisampled texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Texture2DMultisampledArray">
            <summary>
            <dd> <p>The variable is a 2D-multisampled-texture array.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.TextureCubeArray">
            <summary>
            <dd> <p>The variable is a texture-cube array.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.Double">
            <summary>
            <dd> <p>The variable is a double precision (64-bit) floating-point number.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWTexture1D">
            <summary>
            <dd> <p>The variable is a 1D read-and-write texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWTexture1DArray">
            <summary>
            <dd> <p>The variable is an array of 1D read-and-write textures.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWTexture2D">
            <summary>
            <dd> <p>The variable is a 2D read-and-write texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWTexture2DArray">
            <summary>
            <dd> <p>The variable is an array of 2D read-and-write textures.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWTexture3D">
            <summary>
            <dd> <p>The variable is a 3D read-and-write texture.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWBuffer">
            <summary>
            <dd> <p>The variable is a read-and-write buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.ByteAddressBuffer">
            <summary>
            <dd> <p>The variable is a byte-address buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWByteAddressBuffer">
            <summary>
            <dd> <p>The variable is a read-and-write byte-address buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.StructuredBuffer">
            <summary>
            <dd> <p>The variable is a structured buffer. </p> <p>For more information about structured buffer, see the <strong>Remarks</strong> section.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.RWStructuredBuffer">
            <summary>
            <dd> <p>The variable is a read-and-write structured buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.AppendStructuredBuffer">
            <summary>
            <dd> <p>The variable is an append structured buffer.</p> </dd>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.EffectParameterType.ConsumeStructuredBuffer">
            <summary>
            <dd> <p>The variable is a consume structured buffer.</p> </dd>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderStage">
            <summary>
            Enum to specify shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.None">
            <summary>
            No shader stage defined.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Vertex">
            <summary>
            The vertex shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Hull">
            <summary>
            The Hull shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Domain">
            <summary>
            The domain shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Geometry">
            <summary>
            The geometry shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Pixel">
            <summary>
            The pixel shader stage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStage.Compute">
            <summary>
            The compute shader stage.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry">
            <summary>
            Description of a StreamOutput declaration entry.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.Stream">
            <summary>
            The stream index.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.SemanticName">
            <summary>
            The semantic name.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.SemanticIndex">
            <summary>
            The semantic index.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.StartComponent">
            <summary>
            The start component
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.ComponentCount">
            <summary>
            The component count
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Shaders.ShaderStreamOutputDeclarationEntry.OutputSlot">
            <summary>
            The output slot
            </summary>
        </member>
    </members>
</doc>
