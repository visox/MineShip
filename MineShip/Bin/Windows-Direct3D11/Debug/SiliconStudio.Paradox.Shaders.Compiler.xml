<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Shaders.Compiler</name>
    </assembly>
    <members>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderCompiler.Compile(System.String,System.String,SiliconStudio.Paradox.Shaders.ShaderStage,SiliconStudio.Paradox.Shaders.ShaderMixinParameters,SiliconStudio.Paradox.Shaders.EffectReflection,System.String)">
            <summary>
            Converts the hlsl code into glsl and stores the result as plain text
            </summary>
            <param name="shaderSource">the hlsl shader</param>
            <param name="entryPoint">the entrypoint function name</param>
            <param name="stage">the shader pipeline stage</param>
            <param name="compilerParameters"></param>
            <param name="reflection">the reflection gathered from the hlsl analysis</param>
            <param name="sourceFilename">the name of the source file</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter">
            <summary>
            Converts from HLSL shader sourcecode to a GLSL sourcecode.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.Convert(System.String,System.String,SiliconStudio.Shaders.Convertor.PipelineStage,System.String,SiliconStudio.Core.Diagnostics.LoggerResult)">
            <summary>
            Converts the specified hlsl source code to glsl.
            </summary>
            <param name="hlslSourcecode">The HLSL source code.</param>
            <param name="hlslEntryPoint">The HLSL entry point.</param>
            <param name="stage">The stage to convert.</param>
            <param name="shader">The shader.</param>
            <param name="inputHlslFilepath">The input HLSL filepath.</param>
            <returns>
            The resulting glsl AST tree.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.Convert(SiliconStudio.Shaders.Parser.ParsingResult,System.String,SiliconStudio.Shaders.Convertor.PipelineStage,System.String,SiliconStudio.Core.Diagnostics.LoggerResult)">
            <summary>
            Converts the specified hlsl source code to glsl.
            </summary>
            <param name="hlslEntryPoint">The HLSL entry point.</param>
            <param name="stage">The stage to convert.</param>
            <param name="shader">The shader.</param>
            <param name="inputHlslFilepath">The input HLSL filepath.</param>
            <returns>
            The resulting glsl AST tree.
            </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.IsVerboseLog">
            <summary>
            Gets or sets a value indicating whether this instance is producing a verbose log.
            </summary>
            <value>
            <c>true</c> if this instance is producing a verbose log; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.IncludeDirectories">
            <summary>
            Gets or sets the include directories.
            </summary>
            <value>
            The include directories.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.Macros">
            <summary>
            Gets or sets the macros.
            </summary>
            <value>
            The macros.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.OpenGL.ShaderConverter.Log">
            <summary>
            Gets or sets the log used by this instance.
            </summary>
            <value>
            The log used by this instance.
            </value>
        </member>
        <member name="T:SiliconStudio.ParadoxVersion">
            <summary>
            Internal version used to identify Paradox version.
            </summary>
            <remarks>
            Note: When modifying the version here, it must be modified also in the Paradox.pdxpkg 
            </remarks>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAssemblyAsText">
            <summary>
            The .NET current assembly version as text, not including pre-release (alpha, beta...) information.
            </summary>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAsText">
            <summary>
            The Store current version as text, including pre-release (alpha, beta...) information
            </summary>
            <remarks>
            Version number as described in http://docs.nuget.org/docs/reference/versioning
            When using pre-release (alpha, beta, rc...etc.) and because the order of the release is in alphabetical order,
            please use a double digit like alpha00 alpha01...etc. in order to make sure that we will follow the correct
            order for the versions.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompiler">
            <summary>
            An <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.IEffectCompiler"/> which will compile effect into multiple shader code, and compile them with a <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.IShaderCompiler"/>.
            </summary>
        </member>
    </members>
</doc>
