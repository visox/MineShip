<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Engine</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.Paradox.BinPacking.GuillotinePacker">
            <summary>
            Implementation of a "Guillotine" packer.
            More information at http://clb.demon.fi/files/RectangleBinPack.pdf.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationBlendOperation">
            <summary>
            Describes the type of animation blend operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationBlendOperation.LinearBlend">
            <summary>
            Linear blend operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationBlendOperation.Add">
            <summary>
            Add operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationBlendOperation.Subtract">
            <summary>
            Subtract operation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationBlender">
            <summary>
            Performs animation blending.
            For now, all AnimationClip must target the same skeleton.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationBlender.Compute(SiliconStudio.Core.Collections.FastList{SiliconStudio.Paradox.Engine.AnimationOperation},SiliconStudio.Paradox.DataModel.AnimationClipResult@)">
            <summary>
            Computes the specified animation operations.
            </summary>
            <param name="animationOperations">The animation operations to perform.</param>
            <param name="result">The optional result (if not null, it expects the final stack to end up with this element).</param>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationChannel">
            <summary>
            List of float key frame data applying to a specific property in a node.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationChannel.EvaluateError(System.Func{SiliconStudio.Paradox.DataModel.CompressedTimeSpan,System.Single},SiliconStudio.Paradox.DataModel.AnimationChannel.Evaluator,SiliconStudio.Paradox.DataModel.CompressedTimeSpan,SiliconStudio.Paradox.DataModel.KeyFrameData{System.Single},SiliconStudio.Paradox.DataModel.KeyFrameData{System.Single})">
            <summary>
            Evaluates the error within specified segment.
            </summary>
            <param name="originalCurve">The original curve.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="keyFrame">The key frame.</param>
            <param name="nextKeyFrame">The next key frame.</param>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationChannel.TargetObject">
            <summary>
            Gets or sets the target object name.
            </summary>
            <value>
            The target object name.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationChannel.TargetProperty">
            <summary>
            Gets or sets the target property name.
            </summary>
            <value>
            The target property name.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationClip">
            <summary>
            An aggregation of <see cref="T:SiliconStudio.Paradox.DataModel.AnimationCurve"/> with their channel names.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationClip.Channels">
            <summary>
            Gets the channels of this clip.
            </summary>
            <value>
            The channels of this clip.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationClip.AddCurve(System.String,SiliconStudio.Paradox.DataModel.AnimationCurve)">
            <summary>
            Adds a named curve.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationClip.Optimize">
            <summary>
            Optimizes data from multiple curves to a single linear data stream.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationClip.Duration">
            <summary>
            Gets or sets the duration of this clip.
            </summary>
            <value>
            The duration of this clip.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationClip.RepeatMode">
            <summary>
            Gets or sets the repeat mode of the <see cref="T:SiliconStudio.Paradox.DataModel.AnimationClip"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationClipEvaluator">
            <summary>
            Evaluates <see cref="T:SiliconStudio.Paradox.DataModel.AnimationClip"/> to a <see cref="T:SiliconStudio.Paradox.DataModel.AnimationClipResult"/> at a given time.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationClipResult.DataSize">
            <summary>
            Total size of all structures to be stored in structures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationClipResult.Data">
            <summary>
            Stores all animation channel struct values at a given time.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationClipResult.Channels">
            <summary>
            Gets or sets the animation channel descriptions.
            </summary>
            <value>
            The animation channel descriptions.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationCurve">
            <summary>
            Untyped base class for animation curves.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationCurve.AddValue(SiliconStudio.Paradox.DataModel.CompressedTimeSpan,System.IntPtr)">
            <summary>
            Writes a new value at the end of the curve (used for building curves).
            It should be done in increasing order as it will simply add a new key at the end of <see cref="P:SiliconStudio.Paradox.DataModel.AnimationCurve`1.KeyFrames"/>.
            </summary>
            <param name="newTime">The new time.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve.InterpolationType">
            <summary>
            Gets or sets the interpolation type.
            </summary>
            <value>
            The interpolation type.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve.ElementType">
            <summary>
            Gets the type of keyframe values.
            </summary>
            <value>
            The type of keyframe values.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve.ElementSize">
            <summary>
            Gets the size of keyframe values.
            </summary>
            <value>
            The size of keyframe values.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationCurve`1">
            <summary>
            Typed class for animation curves.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationCurve`1.FindKeyIndex(SiliconStudio.Paradox.DataModel.CompressedTimeSpan)">
            <summary>
            Find key index.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationCurve`1.AddValue(SiliconStudio.Paradox.DataModel.CompressedTimeSpan,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve`1.KeyFrames">
            <summary>
            Gets or sets the key frames.
            </summary>
            <value>
            The key frames.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve`1.ElementSize">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.DataModel.AnimationCurve`1.Keys">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationCurveInterpolationType">
            <summary>
            Describes how a curve should be interpolated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationCurveInterpolationType.Constant">
            <summary>
            Interpolates by using constant value between keyframes.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationCurveInterpolationType.Linear">
            <summary>
            Interpolates linearly between keyframes.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationCurveInterpolationType.Cubic">
            <summary>
            Interpolates with implicit derivatives using points before and after.
            More information at http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Interpolation_on_the_unit_interval_without_exact_derivatives.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.DataModel.AnimationKeyValuePairArraySerializer`1.Initialize(SiliconStudio.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.AnimationRepeatMode">
            <summary>
            Enumeration describing how an animation should be repeated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationRepeatMode.PlayOnce">
            <summary>
            The animation play once, and then stops.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.DataModel.AnimationRepeatMode.LoopInfinite">
            <summary>
            The animation loop for always.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.CompressedTimeSpanSerializer">
            <summary>
            Data serializer for TimeSpan.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.Interpolator">
            <summary>
            Various helper functions for float, Vector3 and Quaternion interpolations.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.CameraComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.Data.EntityComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.EntityModel.Data.EntityComponentData.Entity">
            <summary>
            Entity will get updated when added to EntityData.Components.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.VerticalFieldOfView">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.VerticalFieldOfView"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.NearPlane">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.NearPlane"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.FarPlane">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.FarPlane"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.AspectRatio">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.Target">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.Target"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.TargetUp">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.TargetUp"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.AutoFocus">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.AutoFocus"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.FocusDistance">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.FocusDistance"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.UseViewMatrix">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.UseViewMatrix"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.CameraComponentData.ViewMatrix">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.DataInitializer">
            <summary>
            Module initializer for data types of assembly SiliconStudio.Paradox.Engine.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.LightingConfiguration"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.MaxNumDirectionalLight">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumDirectionalLight"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.MaxNumPointLight">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumPointLight"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.MaxNumSpotLight">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumSpotLight"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.UnrollDirectionalLightLoop">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollDirectionalLightLoop"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.UnrollPointLightLoop">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollPointLightLoop"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.UnrollSpotLightLoop">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollSpotLightLoop"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.ShadowConfigurations">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.LightingConfiguration.ShadowConfigurations"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.#ctor(SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Creates a new LightingConfigurationData from a collection of parameters.
            </summary>
            <param name="collection">The parameter collection.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationData.GetCollection">
            <summary>
            Gets the collection of parameters from the data.
            </summary>
            <returns>The parameter collection.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.LightingConfigurationsSet"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData.Configs">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.LightingConfigurationsSet.Configs"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MaterialData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.Material"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MaterialData.Parameters">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Material.Parameters"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MeshDrawData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.MeshDraw"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshDrawData.PrimitiveType">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.MeshDraw.PrimitiveType"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshDrawData.DrawCount">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.MeshDraw.DrawCount"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshDrawData.StartLocation">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.MeshDraw.StartLocation"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshDrawData.VertexBuffers">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.MeshDraw.VertexBuffers"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshDrawData.IndexBuffer">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.MeshDraw.IndexBuffer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MeshData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Draw">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.Draw"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Material">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.Material"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Parameters">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.Parameters"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Layer">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.Layer"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.CastShadows">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.CastShadows"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.ReceiveShadows">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.ReceiveShadows"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Lighting">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Mesh.Lighting"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.NodeIndex">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.Mesh.NodeIndex"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Name">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.Mesh.Name"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.BoundingBox">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.Mesh.BoundingBox"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.MeshData.Skinning">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.Mesh.Skinning"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ModelData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.Model"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ModelData.Children">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Model.Children"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ModelData.Meshes">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Model.Meshes"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ModelData.Hierarchy">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Model.Hierarchy"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ModelData.BoundingBox">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Model.BoundingBox"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.SceneData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.Scene"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.SceneData.Model">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Scene.Model"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.SceneData.Animation">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Scene.Animation"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.SceneData.Lights">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Scene.Lights"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.SceneData.Cameras">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Effects.Scene.Cameras"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.ShadowConfiguration"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData.ShadowCount">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.ShadowCount"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData.CascadeCount">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.CascadeCount"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData.FilterType">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.FilterType"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Effects.ShadowConfigurationArray"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData.Groups">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Effects.ShadowConfigurationArray.Groups"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.PhysicsColliderShapeData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.PhysicsColliderShape"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.PhysicsComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.PhysicsComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsComponentData.Elements">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsComponent.Elements"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.PhysicsElementData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.PhysicsElement"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.Type">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.Type"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.LinkedBoneName">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.LinkedBoneName"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.Shape">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.Shape"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.CollisionGroup">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.CollisionGroup"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.CanCollideWith">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.CanCollideWith"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.StepHeight">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.StepHeight"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.PhysicsElementData.Sprite">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.PhysicsElement.Sprite"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData.Target">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.Target"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData.NodeName">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.NodeName"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.SpriteComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.SpriteComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.SpriteComponentData.SpriteGroupInternal">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteGroupInternal"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.SpriteComponentData.Color">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.SpriteComponent.Color"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.SpriteComponentData.SpriteEffect">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteEffect"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.LightComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Enabled">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Enabled"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Deferred">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Deferred"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Type">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Type"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Color">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Color"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Intensity">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Intensity"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.DecayStart">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.DecayStart"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.LightDirection">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.LightDirection"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.SpotBeamAngle">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.SpotBeamAngle"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.SpotFieldAngle">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.SpotFieldAngle"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowMap">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMap"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowMapMaxSize">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMaxSize"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowMapMinSize">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMinSize"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowMapCascadeCount">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapCascadeCount"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowNearDistance">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowNearDistance"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowFarDistance">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowFarDistance"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.ShadowMapFilterType">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapFilterType"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.BleedingFactor">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.BleedingFactor"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.MinVariance">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.MinVariance"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightComponentData.Layers">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightComponent.Layers"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.LightShaftsComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData.Color">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.LightShaftsComponent.Color"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.Data.EntityGroupData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.EntityModel.EntityGroup"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.EntityModel.Data.EntityGroupData.Entities">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.EntityModel.EntityGroup.Entities"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.AnimationComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.AnimationComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.AnimationComponentData.Animations">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.AnimationComponent.Animations"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.ModelComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelComponentData.Model">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.Model"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelComponentData.Enabled">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.Enabled"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelComponentData.DrawOrder">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.DrawOrder"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.ModelComponentData.Parameters">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.Parameters"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.TransformationComponentData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.TransformationComponentData.UseTRS">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.TransformationComponent.UseTRS"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.TransformationComponentData.Children">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Engine.TransformationComponent.Children"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.TransformationComponentData.Translation">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Translation"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.TransformationComponentData.Rotation">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Rotation"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Data.TransformationComponentData.Scaling">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Scaling"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.Data.EntityData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.LightingConfigurationDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.LightingConfiguration"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.LightingConfigurationData@,SiliconStudio.Paradox.Effects.LightingConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.LightingConfigurationData,SiliconStudio.Paradox.Effects.LightingConfiguration@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.LightingConfigurationsSet"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData@,SiliconStudio.Paradox.Effects.LightingConfigurationsSet)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData,SiliconStudio.Paradox.Effects.LightingConfigurationsSet@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MaterialDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.Material"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MaterialDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MaterialData@,SiliconStudio.Paradox.Effects.Material)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MaterialDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MaterialData,SiliconStudio.Paradox.Effects.Material@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MeshDrawDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.MeshDraw"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MeshDrawDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MeshDrawData@,SiliconStudio.Paradox.Effects.MeshDraw)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MeshDrawDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MeshDrawData,SiliconStudio.Paradox.Effects.MeshDraw@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.MeshDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MeshDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MeshData@,SiliconStudio.Paradox.Effects.Mesh)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.MeshDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.MeshData,SiliconStudio.Paradox.Effects.Mesh@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ModelDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.Model"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ModelDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ModelData@,SiliconStudio.Paradox.Effects.Model)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ModelDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ModelData,SiliconStudio.Paradox.Effects.Model@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.SceneDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.Scene"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.SceneDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.SceneData@,SiliconStudio.Paradox.Effects.Scene)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.SceneDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.SceneData,SiliconStudio.Paradox.Effects.Scene@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.ShadowConfiguration"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData@,SiliconStudio.Paradox.Effects.ShadowConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData,SiliconStudio.Paradox.Effects.ShadowConfiguration@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Effects.ShadowConfigurationArray"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData@,SiliconStudio.Paradox.Effects.ShadowConfigurationArray)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData,SiliconStudio.Paradox.Effects.ShadowConfigurationArray@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.PhysicsComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.PhysicsComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.PhysicsComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.PhysicsComponentData@,SiliconStudio.Paradox.Engine.PhysicsComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.PhysicsComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.PhysicsComponentData,SiliconStudio.Paradox.Engine.PhysicsComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.PhysicsComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.PhysicsComponentData,SiliconStudio.Paradox.Engine.PhysicsComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.PhysicsElementDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.PhysicsElement"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.PhysicsElementDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.PhysicsElementData@,SiliconStudio.Paradox.Engine.PhysicsElement)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.PhysicsElementDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.PhysicsElementData,SiliconStudio.Paradox.Engine.PhysicsElement@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData@,SiliconStudio.Paradox.Engine.ModelNodeLinkComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData,SiliconStudio.Paradox.Engine.ModelNodeLinkComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData,SiliconStudio.Paradox.Engine.ModelNodeLinkComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.SpriteComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.SpriteComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.SpriteComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.SpriteComponentData@,SiliconStudio.Paradox.Engine.SpriteComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.SpriteComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.SpriteComponentData,SiliconStudio.Paradox.Engine.SpriteComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.SpriteComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.SpriteComponentData,SiliconStudio.Paradox.Engine.SpriteComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.CameraComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.CameraComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.CameraComponentData@,SiliconStudio.Paradox.Engine.CameraComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.CameraComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.CameraComponentData,SiliconStudio.Paradox.Engine.CameraComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.CameraComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.CameraComponentData,SiliconStudio.Paradox.Engine.CameraComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.LightComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightComponentData@,SiliconStudio.Paradox.Engine.LightComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightComponentData,SiliconStudio.Paradox.Engine.LightComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightComponentData,SiliconStudio.Paradox.Engine.LightComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.LightShaftsComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData@,SiliconStudio.Paradox.Engine.LightShaftsComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData,SiliconStudio.Paradox.Engine.LightShaftsComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.LightShaftsComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData,SiliconStudio.Paradox.Engine.LightShaftsComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.Data.EntityGroupDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.EntityModel.EntityGroup"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.Data.EntityGroupDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.EntityModel.Data.EntityGroupData@,SiliconStudio.Paradox.EntityModel.EntityGroup)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.Data.EntityGroupDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.EntityModel.Data.EntityGroupData,SiliconStudio.Paradox.EntityModel.EntityGroup@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.AnimationComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.AnimationComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.AnimationComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.AnimationComponentData@,SiliconStudio.Paradox.Engine.AnimationComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.AnimationComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.AnimationComponentData,SiliconStudio.Paradox.Engine.AnimationComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.AnimationComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.AnimationComponentData,SiliconStudio.Paradox.Engine.AnimationComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.ModelComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelComponentData@,SiliconStudio.Paradox.Engine.ModelComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelComponentData,SiliconStudio.Paradox.Engine.ModelComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.ModelComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.ModelComponentData,SiliconStudio.Paradox.Engine.ModelComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Data.TransformationComponentDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.TransformationComponentDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.TransformationComponentData@,SiliconStudio.Paradox.Engine.TransformationComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.TransformationComponentDataConverter.ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.TransformationComponentData,SiliconStudio.Paradox.Engine.TransformationComponent@)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Data.TransformationComponentDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Engine.Data.TransformationComponentData,SiliconStudio.Paradox.Engine.TransformationComponent@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.DataInitializer">
            <summary>
            Module initializer for data types of assembly SiliconStudio.Paradox.Graphics.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.SpriteData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteData.Name">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.Sprite.Name"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteData.Texture">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.Sprite.Texture"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteData.IsTransparent">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.Sprite.IsTransparent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteData.TextureRegion">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Graphics.Sprite.TextureRegion"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteData.Center">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Graphics.Sprite.Center"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.SpriteGroupData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Graphics.SpriteGroup"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.SpriteGroupData.Sprites">
            <summary>
            Data field for <see cref="F:SiliconStudio.Paradox.Graphics.SpriteGroup.Sprites"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.BufferData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/>.
            </summary>
            <summary>
            Content of a GPU buffer (vertex buffer, index buffer, etc...).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.BufferData.New``1(SiliconStudio.Paradox.Graphics.BufferFlags,``0[])">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Data.BufferData"/> from a typed buffer.
            </summary>
            <typeparam name="T">Type of the element to store in the buffer data.</typeparam>
            <param name="content">An array of data</param>
            <returns>A buffer data.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Data.BufferData.Content">
            <summary>
            Gets or sets the buffer content.
            </summary>
            <value>
            The buffer content.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Data.BufferData.BufferFlags">
            <summary>
            Buffer flags describing the type of buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Data.BufferData.Usage">
            <summary>
            Usage of this buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Data.BufferData.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured/typed buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Graphics.IndexBufferBinding"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData.Buffer">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.IndexBufferBinding.Buffer"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData.Is32Bit">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.IndexBufferBinding.Is32Bit"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData.Offset">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.IndexBufferBinding.Offset"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData.Count">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.IndexBufferBinding.Count"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData">
            <summary>
            Data type for <see cref="T:SiliconStudio.Paradox.Graphics.VertexBufferBinding"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData.Buffer">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Buffer"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData.Offset">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Offset"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData.Stride">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Stride"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData.Count">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Count"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData.Declaration">
            <summary>
            Data field for <see cref="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Declaration"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.SpriteDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.SpriteDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.SpriteData@,SiliconStudio.Paradox.Graphics.Sprite)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.SpriteDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.SpriteData,SiliconStudio.Paradox.Graphics.Sprite@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.SpriteGroupDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Graphics.SpriteGroup"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.SpriteGroupDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.SpriteGroupData@,SiliconStudio.Paradox.Graphics.SpriteGroup)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.SpriteGroupDataConverter.ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.SpriteGroupData,SiliconStudio.Paradox.Graphics.SpriteGroup@)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Graphics.IndexBufferBinding"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData@,SiliconStudio.Paradox.Graphics.IndexBufferBinding)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingDataConverter">
            <summary>
            Converter type for <see cref="T:SiliconStudio.Paradox.Graphics.VertexBufferBinding"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingDataConverter.ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext,SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData@,SiliconStudio.Paradox.Graphics.VertexBufferBinding)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData)">
            <summary>
            Determines whether the specified vertex buffer binding data is simple.
            A vertex buffer binding data is simple if:
            * Offset is 0.
            * Stride is 0 (automatic), or equals to Declaration.VertexStride.
            * Buffer.Content.Length is equal to Declaration.VertexStride * Count
            </summary>
            <param name="vertexBufferBindingData">The vertex buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData)">
            <summary>
            Determines whether the specified index buffer binding data is simple.
            A index buffer binding data is simple if:
            * Offset is 0.
            * Is32Bit is true.
            * Buffer.Content.Length is equal to sizeof(int) * Count.
            </summary>
            <param name="indexBufferBindingData">The index buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Effects.Data.MeshDrawData)">
            <summary>
            Determines whether the specified mesh draw data is simple.
            A <see cref="T:SiliconStudio.Paradox.Effects.Data.MeshDrawData"/> is simple if:
            * It contains only one <see cref="T:SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData"/>, which must be simple.
            * It contains either no <see cref="T:SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData"/>, or a simple one.
            * StartLocation is 0.
            * DrawCount is IndexBuffer.Count if there is an index buffer, otherwise VertexBuffers[0].Count.
            </summary>
            <param name="meshDrawData">The mesh draw data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.MergeDrawData(System.Collections.Generic.IList{SiliconStudio.Paradox.Effects.Data.MeshDrawData},System.Boolean)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshDrawDatas">The mesh draw datas.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateDeclarationMergeGroup(System.Collections.Generic.IList{SiliconStudio.Paradox.Effects.Data.MeshDrawData})">
            <summary>
            Group meshes that can be merged because they have the same vertex declaration.
            </summary>
            <param name="meshDrawDatas">The list of meshes.</param>
            <returns>A list of grouped meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateOptimizedMergeGroups(System.Collections.Generic.IList{SiliconStudio.Paradox.Effects.Data.MeshDrawData},System.Boolean)">
            <summary>
            Create group of MeshDrawData that will be merged.
            </summary>
            <param name="meshDrawDatas">List of MehsDrawData to merge.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed.</param>
            <returns>A List of groups to merge internally.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateShortIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an short typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bit">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateIntIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an int typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bits">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.IsIndexed(System.Collections.Generic.IList{SiliconStudio.Paradox.Effects.Data.MeshDrawData})">
            <summary>
            Check if a index buffer will be needed for this merge group.
            </summary>
            <param name="meshDrawDatas">The list of MeshDrawdata to merge.</param>
            <returns>True if an index is needed, false otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.GroupDrawData(System.Collections.Generic.IList{SiliconStudio.Paradox.Effects.Data.MeshDrawData},System.Boolean)">
            <summary>
            Group the meshes.
            </summary>
            <param name="meshDrawDatas">The list of meshes to group.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed</param>
            <returns>The list of merged meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SplitExtensions.SplitMesh(SiliconStudio.Paradox.Effects.Data.MeshDrawData,System.Boolean)">
            <summary>
            Split the mesh if it has strictly more than 65535 vertices (max index = 65534) on a plaftorm that does not support 32 bits indices.
            </summary>
            <param name="meshDrawData">The mesh to analyze.</param>
            <param name="can32bitIndex">A flag stating if 32 bit indices are allowed.</param>
            <returns>A list of meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SplitExtensions.AddTriangle(SiliconStudio.Paradox.Extensions.SplitExtensions.SplitInformation,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Add the triangle to the split information.
            </summary>
            <param name="currentSplit">The current split information.</param>
            <param name="index0">The index of the first vertex.</param>
            <param name="index1">The index of the second vertex.</param>
            <param name="index2">The index of the third vertex.</param>
            <param name="triangleIndex">The original index of the triangle.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.TransformExtensions.TransformBuffer(SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.DataModel.KeyFrameData`1">
            <summary>
            A single key frame value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Data.NodePropertyData">
            <summary>
            Base class to store additional information for NodeData.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.DelegateHolder`1">
            <summary>
            Delegate for a RenderPass action used by <see cref="F:SiliconStudio.Paradox.Effects.RenderPass.StartPass"/> and <see cref="F:SiliconStudio.Paradox.Effects.RenderPass.EndPass"/>.
            </summary>
            <param name="param">The param.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.DelegateHolder`1.Set">
            <summary>
            Set delegate action.
            </summary>
            <value>
            The action to set.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DelegateHolder`1.AddLast">
            <summary>
            Adds an action at the end of the invocation list.
            </summary>
            <value>
            The action to add.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.DelegateHolder`1.AddFirst">
            <summary>
            Adds an action at the beginning of the invocation list.
            </summary>
            <value>
            The action to add.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.DelegateHolder`1.DelegateType">
            <summary>
            Delegate for a RenderPass action used by <see cref="F:SiliconStudio.Paradox.Effects.RenderPass.StartPass"/> and <see cref="F:SiliconStudio.Paradox.Effects.RenderPass.EndPass"/>.
            </summary>
            <param name="param">The param.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.BackgroundRenderer">
            <summary>
            This renderer draws a full-screen image as background. 
            The ratio or the texture used is preserved. The texture is centered and cropped along X or Y axis depending on the screen ratio.
            </summary>
            <remarks>This renderer does not write into the depth buffer</remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Renderer">
            <summary>
            Performs render pipeline transformations attached to a specific <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Renderer.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> class.
            </summary>
            <param name="services">The services.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Renderer.Load">
            <summary>
            Loads this instance. This method is called when a RenderPass is attached (directly or indirectly) to the children of <see cref="P:SiliconStudio.Paradox.Effects.RenderSystem.Pipeline"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Renderer.Unload">
            <summary>
            Unloads this instance. This method is called when a RenderPass is de-attached (directly or indirectly) to the children of <see cref="P:SiliconStudio.Paradox.Effects.RenderSystem.Pipeline"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Renderer.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Renderer.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Renderer.RenderSystem">
            <summary>
            Gets the render system.
            </summary>
            <value>The render system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Renderer.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Renderer.Pass">
            <summary>
            Gets the pass this processor is attached to.
            </summary>
            <value>The pass.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.BackgroundRenderer.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.BackgroundRenderer"/> with null texture.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.BackgroundRenderer.#ctor(SiliconStudio.Core.IServiceRegistry,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.BackgroundRenderer"/> using the provided file as background texture.
            </summary>
            <param name="services">The services.</param>
            <param name="backgroundTexturePath">The path to the background texture to use</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.BackgroundRenderer.BackgroundTexture">
            <summary>
            Gets or sets the texture displayed as background.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.CameraSetter">
            <summary>
            A processor that updates camera view and projection along the setup of <see cref="T:SiliconStudio.Paradox.Effects.RenderTargetSetter"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.CameraSetter.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.CameraSetter.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.DelegateRenderer">
            <summary>
            A processor that updates camera view and projection along the setup of <see cref="T:SiliconStudio.Paradox.Effects.RenderTargetSetter"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.DelegateRenderer.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.DelegateRenderer.OnLoad">
            <summary>
            Gets or sets the action to perform when the renderer is loaded.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.DelegateRenderer.OnUnload">
            <summary>
            Gets or sets the action to perform when the renderer is unloaded.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.DelegateRenderer.Render">
            <summary>
            Gets or sets the action to perform on rendering.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.LightingConfiguration">
            <summary>
            Lighting configuration for a mesh. Stores the number of lights per type and the number of shadow maps.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.LightingKeys">
            <summary>
            Keys used for lighting.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxDirectionalLights">
            <summary>
            Maximum number of directional lights.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxPointLights">
            <summary>
            Maximum number of point lights.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxSpotLights">
            <summary>
            Maximum number of spot lights.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.UnrollDirectionalLightLoop">
            <summary>
            A flag stating if directional light loop should be unrolled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.UnrollPointLightLoop">
            <summary>
            A flag stating if point light loop should be unrolled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.UnrollSpotLightLoop">
            <summary>
            A flag stating if spot light loop should be unrolled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.CastShadows">
            <summary>
            Flag stating if the mesh casts shadows.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.ReceiveShadows">
            <summary>
            Flag stating if the mesh receives shadows.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxDirectionalNearestFilterShadowMap">
            <summary>
            Maximum number of supported nearest filtered shadows.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxDirectionalPcfFilterShadowMap">
            <summary>
            Maximum number of supported Pcf shadows.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.MaxDeferredLights">
            <summary>
            Maximum number of deferred lights.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.LightingKeys.UnrollDeferredLightLoop">
            <summary>
            A flag stating if deferred light loop should be unrolled.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MaterialAssetKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MaterialAssetKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (pdxfxlib), set it to true to allow permutation based on the 
            parameters of all materials.
            </summary>
            TODO: allow permutation for a specific mesh
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MaterialParameters.ShadingModel">
            <summary>
            Parameter key for the shading model.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MaterialParameters.DiffuseModel">
            <summary>
            Parameter key for the diffuse model.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MaterialParameters.SpecularModel">
            <summary>
            Parameter key for the specular model.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MaterialParameters.LightingType">
            <summary>
            Parameter key for the lighting type.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MaterialShadingModel">
            <summary>
            Shading interpolation model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MaterialDiffuseModel">
            <summary>
            Diffuse component model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MaterialSpecularModel">
            <summary>
            Specular component model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshBoneDefinition">
            <summary>
            Describes a bone cluster inside a <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MeshBoneDefinition.NodeIndex">
            <summary>
            The node index in <see cref="P:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.NodeTransformations"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MeshBoneDefinition.LinkToMeshMatrix">
            <summary>
            The matrix to transform from mesh space to local space of this bone.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MeshKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (pdxfxlib), set it to true to allow permutation based on the 
            parameters of all meshes.
            </summary>
            TODO: allow permutation for a specific mesh
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshSkinningUpdater">
            <summary>
            Performs blend matrix skinning.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshSkinningDefinition">
            <summary>
            Describes skinning for a <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>, through a collection of <see cref="T:SiliconStudio.Paradox.Effects.MeshBoneDefinition"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.MeshSkinningDefinition.Bones">
            <summary>
            The bones.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ModelNodeFlags">
            <summary>
            Flags describing state of a <see cref="T:SiliconStudio.Paradox.Effects.ModelNodeDefinition"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeFlags.EnableTransform">
            <summary>
            If true, <see cref="F:SiliconStudio.Paradox.Effects.ModelNodeTransformation.Transform"/> will be used to update <see cref="F:SiliconStudio.Paradox.Effects.ModelNodeTransformation.LocalMatrix"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeFlags.EnableRender">
            <summary>
            If true, associated <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/> will be rendered.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeFlags.Default">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater">
            <summary>
            Performs hierarchical updates for a given <see cref="T:SiliconStudio.Paradox.Effects.Model"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.#ctor(SiliconStudio.Paradox.Effects.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.#ctor(SiliconStudio.Paradox.Effects.ModelNodeDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater"/> class.
            </summary>
            <param name="nodes">The model view nodes.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.ResetInitialValues">
            <summary>
            Resets initial values.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.UpdateMatrices">
            <summary>
            For each node, updates the world matrices from local matrices.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater.UpdateToRenderModel(SiliconStudio.Paradox.Effects.RenderModel)">
            <summary>
            Updates previously computed world matrices to TransformationKeys.World for each <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>.
            </summary>
            <param name="renderModel">The render model.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyDefinition">
            <summary>
            Describes hiderarchical nodes in a flattened array.
            </summary>
            <remarks>
            Nodes are ordered so that parents always come first, allowing for hierarchical updates in a simple loop.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelViewHierarchyDefinition.Nodes">
            <summary>
            The nodes in this hierarchy.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ModelNodeDefinition">
            <summary>
            Describes a single transformation node, usually in a <see cref="T:SiliconStudio.Paradox.Effects.Model"/> node hierarchy.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeDefinition.ParentIndex">
            <summary>
            The parent node index.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeDefinition.Transform">
            <summary>
            The local transform.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeDefinition.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeDefinition.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ModelNodeTransformation.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.EffectSystemExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Effects.EffectSystem"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.EffectSystemExtensions.LoadEffect(SiliconStudio.Paradox.Effects.EffectSystem,System.String)">
            <summary>
            Creates an effect.
            </summary>
            <param name="effectSystem">The effect system.</param>
            <param name="effectName">Name of the effect.</param>
            <returns>A new instance of an effect.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshAnimationUpdater">
            <summary>
            Applies animation from a <see cref="T:SiliconStudio.Paradox.DataModel.AnimationClip"/> to a <see cref="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshAnimationUpdater.UpdateChannel">
            <summary>
            Describes how to update data from <see cref="T:SiliconStudio.Paradox.DataModel.AnimationClipResult"/> to <see cref="T:SiliconStudio.Paradox.Effects.ModelViewHierarchyUpdater"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.MeshRenderState">
            <summary>
            State stored in a <see cref="T:SiliconStudio.Paradox.Effects.RenderPipeline"/> by a <see cref="T:SiliconStudio.Paradox.Effects.ModelRenderer"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.MeshRenderState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.MeshRenderState"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.MeshRenderState.GetMeshPassSlot(SiliconStudio.Paradox.Effects.RenderPass)">
            <summary>
            Gets or creates a mesh pass slot for this pass inside its <see cref="T:SiliconStudio.Paradox.Effects.RenderPipeline"/>.
            </summary>
            <param name="renderPass">The render pass.</param>
            <returns>A mesh pass slot.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.MeshRenderState.MeshPassSlotCount">
            <summary>
            Gets the mesh pass slot count.
            </summary>
            <value>The mesh pass slot count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.MeshRenderState.PrepareRenderModel">
            <summary>
            The action that will be applied on every mesh instantiated in this render pipeline.
            </summary>
            <value>The process mesh.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.MeshRenderState.RenderModels">
            <summary>
            Gets the current list of models to render.
            </summary>
            <value>The render models.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ModelRenderer">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> is responsible to prepare and render meshes for a specific pass.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelRenderer.RenderMesh(SiliconStudio.Paradox.Effects.RenderContext,SiliconStudio.Paradox.Effects.EffectMesh)">
            <summary>
            Draws the mesh stored in the current <see cref="T:SiliconStudio.Paradox.Effects.RenderContext"/>
            </summary>
            <param name="context">The context.</param>
            <param name="effectMesh">The current effect mesh.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelRenderer.CreateEffect(SiliconStudio.Paradox.Effects.EffectMesh,SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Create or update the Effect of the effect mesh.
            </summary>
            <param name="effectMesh">The effect mesh.</param>
            <param name="modelComponentParameters">The ModelComponent parameters.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelRenderer.HasCollectionChanged(SiliconStudio.Paradox.Effects.EffectMesh)">
            <summary>
            Checks if a collection has changed and the effect needs to be changed.
            </summary>
            <param name="effectMesh">The effect mesh.</param>
            <returns>True if the collection changed.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelRenderer.PrepareUpdater(SiliconStudio.Paradox.Effects.EffectMesh,SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Prepare the EffectParameterUpdater for the effect mesh.
            </summary>
            <param name="effectMesh">The effect mesh.</param>
            <param name="modelComponentParameters">The ModelComponent parameters.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.ModelRenderer.GetLevels(SiliconStudio.Paradox.Effects.EffectMesh,SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Get the levels of the parameters.
            </summary>
            <param name="effectMesh">The effect mesh.</param>
            <param name="modelComponentParameters">The ModelComponent parameters.</param>
            <returns>A table of levels.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.ProfilingKeys">
            <summary>
            Various <see cref="T:SiliconStudio.Core.Diagnostics.ProfilingKey"/> used to measure performance across some part of the effect system.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RecursiveRenderer">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> recursively render another <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderModel">
            <summary>
            Instantiation of a <see cref="P:SiliconStudio.Paradox.Effects.RenderModel.Model"/> through a <see cref="T:SiliconStudio.Paradox.Effects.RenderPipeline"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderModel.#ctor(SiliconStudio.Paradox.Effects.RenderPipeline,SiliconStudio.Paradox.Effects.Model,SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.RenderModel"/> class.
            </summary>
            <param name="pipeline">The pipeline.</param>
            <param name="model">The model.</param>
            <param name="modelComponentParameters">ModelComponent parameters.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderModel.InternalMeshes">
            <summary>
            Gets the meshes instantiated for this view.
            </summary>
            <value>
            The meshes instantiated for this view.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderModel.Model">
            <summary>
            Gets or sets the underlying model.
            </summary>
            <value>
            The underlying model.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderModel.Pipeline">
            <summary>
            Gets the render pipeline.
            </summary>
            <value>
            The render pipeline.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderPipelineFactory">
            <summary>
            Helper class to easily setup various predefined <see cref="T:SiliconStudio.Paradox.Effects.RenderPipeline"/>, using <see cref="!:RenderPipeline.Pipeline"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderStateSetter">
            <summary>
            Sets given render state during rendering.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderStateSetter.Load">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderStateSetter.Unload">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderStateSetter.DepthStencilState">
            <summary>
            Gets or sets the depth stencil state.
            </summary>
            <value>
            The depth stencil state.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderStateSetter.BlendState">
            <summary>
            Gets or sets the blend state.
            </summary>
            <value>
            The blend state.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderStateSetter.RasterizerState">
            <summary>
            Gets or sets the rasterizer state.
            </summary>
            <value>
            The rasterizer state.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderTargetSetter">
            <summary>
            A processor that setup a <see cref="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.RenderTarget"/> and a <see cref="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.DepthStencil"/> on a <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderTargetSetter.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.RenderTarget">
            <summary>
            Gets or sets the key to get the render target from <see cref="!:RenderPipeline.Parameters"/>.
            </summary>
            <value>
            The render target key.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.DepthStencil">
            <summary>
            Gets or sets the key to get the depth stencil from <see cref="!:RenderPipeline.Parameters"/>.
            </summary>
            <value>
            The depth stencil key.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
            <value>
            The viewport.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.ClearColor">
            <summary>
            Gets or sets the color used to clear the render target.
            </summary>
            <value>
            The the color used to clear the render target.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.ClearDepth">
            <summary>
            Gets or sets the depth value used to clear the depth stencil buffer.
            </summary>
            <value>
            The depth value used to clear the depth stencil buffer.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.ClearStencil">
            <summary>
            Gets or sets the stencil value used to clear the depth stencil buffer.
            </summary>
            <value>
            The stencil value used to clear the depth stencil buffer.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.EnableClearTarget">
            <summary>
            Gets or sets a value indicating whether [enable clear render target].
            </summary>
            <value>
              <c>true</c> if [enable clear render target]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.EnableClearDepth">
            <summary>
            Gets or sets a value indicating whether [enable clear depth].
            </summary>
            <value>
              <c>true</c> if [enable clear depth ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.EnableClearStencil">
            <summary>
            Gets or sets a value indicating whether [enable clear stencil].
            </summary>
            <value>
              <c>true</c> if [enable clear stencil]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderTargetSetter.EnableSetTargets">
            <summary>
            Gets or sets a value indicating whether [enable set targets].
            </summary>
            <value>
              <c>true</c> if [enable set targets]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderMeshEntry">
            <summary>
            Internal structure used to flatten RenderPass and EffectMesh hierarchy.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Mesh.#ctor(SiliconStudio.Paradox.Effects.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/> class using a shallow copy constructor.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Mesh.NodeIndex">
            <summary>
            Index of the transformation node in <see cref="T:SiliconStudio.Paradox.Effects.Model"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Mesh.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing this <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Mesh.Layer">
            <summary>
            The layer the model belongs to.
            </summary>
            <value>The layer mask.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Mesh.CastShadows">
            <summary>
            The mesh casts shadow.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Mesh.ReceiveShadows">
            <summary>
            The mesh receives shadow.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Mesh.Lighting">
            <summary>
            The list of available lighting configurations. Should be sorted based on the total number of lights.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Model">
            <summary>
            Collection of <see cref="T:SiliconStudio.Paradox.Effects.Mesh"/>, each one usually being a different LOD of the same Model.
            The effect system will select the appropriate LOD depending on distance, current pass, and other effect-specific requirements.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Model.Add(SiliconStudio.Paradox.Effects.Model)">
            <summary>
            Adds the specified model view (for collection initializers).
            </summary>
            <param name="model">The model view.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Model.Add(SiliconStudio.Paradox.Effects.Mesh)">
            <summary>
            Adds the specified mesh (for collection initializers).
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Model.Instantiate">
            <summary>
            Create a clone with its own ParameterCollection.
            It allows reuse of a single Model for multiple ModelComponent.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Model.Children">
            <summary>
            Gets the views.
            </summary>
            <value>
            The views.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Model.Meshes">
            <summary>
            Gets the meshes.
            </summary>
            <value>
            The meshes.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Model.Hierarchy">
            <summary>
            Gets or sets the hierarchy definition, which describes nodes name, default transformation and hierarchical parent.
            </summary>
            <value>
            The hierarchy, which describes nodes name, default transformation and hierarchical parent.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.Model.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing all the <see cref="P:SiliconStudio.Paradox.Effects.Model.Meshes"/> (not including animation).
            </summary>
            <value>
            The bounding box.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.EffectSystem">
            <summary>
            The effect system.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.EffectSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.EffectSystem"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.EffectSystem.LoadEffect(System.String,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters)">
            <summary>
            Loads the effect.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="compilerParameters">The compiler parameters.</param>
            <returns>A new instance of an effect.</returns>
            <exception cref="T:System.InvalidOperationException">Could not compile shader. Need fallback.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.EffectSystem.WasEffectRecompiled(SiliconStudio.Paradox.Graphics.Effect)">
            <summary>
            Tests if the effect was recompiled.
            </summary>
            <param name="effect">The effect.</param>
            <returns>True if it was recompiled, false otherwise.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderPipeline">
            <summary>
            Defines an entry point for mesh instantiation and recursive rendering.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderPass">
            <summary>
            RenderPass is a hierarchy that defines how to collect and render meshes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPass.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.RenderPass.StartPass">
            <summary>
            The start action.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.RenderPass.EndPass">
            <summary>
            The end action.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/> is enabled for collection.
            </summary>
            <value>
              <c>true</c> if enabled for collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Parent">
            <summary>
            Gets the parent pass.
            </summary>
            <value>
            The parent pass.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Pipeline">
            <summary>
            Gets the pipeline (root node, which should be of type <see cref="T:SiliconStudio.Paradox.Effects.RenderPipeline"/>).
            </summary>
            <value>
            The root pass.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Renderers">
            <summary>
            Gets the Renderers attached to this renderpass.
            </summary>
            <value>The Renderers.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderPass.Children">
            <summary>
            Gets the sub render passes.
            </summary>
            <value>
            The sub render passes.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Scene">
            <summary>
            Scene as exported by third-party exporters (FBX, Assimp, etc...)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.ShadowCount">
            <summary>
            The number of shadows in this group.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.CascadeCount">
            <summary>
            The number of cascade in this group.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowConfiguration.FilterType">
            <summary>
             The type of filtering in this group.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.ShadowMaps">
            <summary>
            List of all the shadow map configurations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.FilterType">
            <summary>
            Filter type of the shadow map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.ShadowMapCount">
            <summary>
            Number of shadow maps.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.ShadowMapCascadeCount">
            <summary>
            number of shadow map cascades.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.AtlasKey">
            <summary>
            Name of the atlas.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.ShadowMapParameters.ShadowConfigurations">
            <summary>
            The key to use to create shadow groups.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.SpriteRenderer">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Effects.Renderer"/> is responsible to prepare and render sprites for a specific pass.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.TransformTRS">
            <summary>
            Stores transformation in a TRS format (Translation, Rotation and Scaling).
            </summary>
            <remarks>
            It first applies scaling, then rotation, then translation.
            Rotation is stored in a Quaternion so that animation system can provides smooth rotation interpolations and blending.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.TransformTRS.Translation">
            <summary>
            The translation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.TransformTRS.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.TransformTRS.Scaling">
            <summary>
            The scaling
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.UIRenderer">
            <summary>
            The renderer in charge of drawing the UI.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AnimationOperation">
            <summary>
            A single animation operation (push or blend).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationOperation.NewPush(SiliconStudio.Paradox.DataModel.AnimationClipEvaluator)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationOperation.NewPush(SiliconStudio.Paradox.DataModel.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationOperation.NewPop(SiliconStudio.Paradox.DataModel.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation pop operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationOperation.NewBlend(SiliconStudio.Paradox.DataModel.AnimationBlendOperation,System.Single)">
            <summary>
            Creates a new animation blend operation.
            </summary>
            <param name="operation">The blend operation.</param>
            <param name="blendFactor">The blend factor.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController">
            <summary>
            This class is used to control a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated to a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>.
            </summary>
            <remarks>
            <para>
            Instances of this class can not be directly created by the user, but need to queried from an <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> 
            instance using the <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> function.
            </para>
            <para>
            An instance <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> is not valid anymore if any of those situations arrives: 
            <list type="bullet">
             <item><description>The underlying <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> is disposed.</description></item>
             <item><description>The <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> is detached from its entity.</description></item>
             <item><description>The entity to which it is attached is removed from the Entity System.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.soundEffect">
            <summary>
            The underlying <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.parent">
            <summary>
            The parent <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> to which to controller is associated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.associatedSoundEffectInstances">
            <summary>
            The instances of <see cref="F:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.soundEffect"/> currently created by this controller (one for each listener).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.#ctor(SiliconStudio.Paradox.Engine.AudioEmitterComponent,SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Created a new <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> instance.
            </summary>
            <param name="parent">The parent AudioEmitterComponent to which the controller is associated.</param>
            <param name="soundEffect">The underlying SoundEffect to be controlled</param>
            <remarks>A <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> can be associated to several controllers.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.CreateSoundInstance">
            <summary>
            Create an new instance of underlying sound, and register it in the controller's sound instance list.
            </summary>
            <returns>The new sound effect instance created</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.DestroySoundInstance(SiliconStudio.Paradox.Audio.SoundEffectInstance)">
            <summary>
            Dispose and sound instance and removes it from the controller sound instance list.
            </summary>
            <param name="soundInstance">Sound instance to destroy</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.DestroyAllSoundInstances">
            <summary>
            Dispose and removes all the controller sound instances.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.ShouldBePlayed">
            <summary>
            Indicate the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerProcessor"/> if the controller's sound instances need to be played.
            This variable is need because <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterSoundController.Play"/> is asynchronous and actually starts playing only on next system update.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent">
            <summary>
            Component representing an audio emitter.
            </summary>
            <remarks>
            <para>
            Associate this component to an entity to simulate a 3D localized source of sound coming from the entity center.
            Use the component <see cref="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DistanceScale"/> and <see cref="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DopplerScale"/> properties to attenuate or exaggerate the 
            effect the distance sound attenuation and Doppler effect.
            </para>
            <para>
            Several sounds can be associated to a single AudioEmitterComponent. 
            Use the functions <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)"/> and <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)"/> to associate or dissociate a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to the emitter component.
            Each SoundEffect associated to the emitter component can be controlled (played, paused, stopped, ...) independently for the others.
            Once attached to the emitter component, a SoundEffect is controlled using a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/>.
            To get the AudioEmitterSoundController associated to a SoundEffect use the <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> function.
            </para>
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponent"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.EntityModel.EntityComponent.Entity">
            <summary>
            Gets or sets the owner entity.
            </summary>
            <value>
            The owner entity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.EntityModel.EntityComponent.EnsureEntity">
            <summary>
            Gets the entity and throws an exception if the entity is null.
            </summary>
            <value>The entity.</value>
            <exception cref="T:System.InvalidOperationException">Entity on this instance is null</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.SoundEffectToController">
            <summary>
            Dictionary associating each soundEffect to a single soundController.
            The controller a valid as long as the corresponding SoundEffect is present in the dictionary.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.#ctor(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Create an instance of <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> with a list default <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated.
            </summary>
            <param name="soundEffectToAttach">The SoundEffect to attach to the emitter by default.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.#ctor">
            <summary>
            Create an instance of <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> with no default <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Return a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> that can be used to control the provided <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>.
            </summary>
            <param name="soundEffect">The soundEffect that the user want to control.</param>
            <returns>The controller that can control the <paramref name="soundEffect"/></returns>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The provided <paramref name="soundEffect"/> is not attached to this component.</exception>
            <remarks>The return AudioEmitterSoundController is valid as long as 
            (1) the associated soundEffect is attached to the emitter, 
            (2) the associated soundEffect is not disposed and,
            (3) the emitter component's entity is present into Entity system.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Attach a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to this emitter component.
            Once attached a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> can be queried using <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> to control the attached SoundEffect.
            </summary>
            <param name="soundEffect">The SoundEffect to attach</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The provided <paramref name="soundEffect"/> can not be localized (contains more than one channel).</exception>
            <remarks>Attaching a soundEffect already attached has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffects(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Attach a list of <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to this emitter component.
            Once attached a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> can be queried using <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> to control the attached SoundEffect.
            </summary>
            <param name="soundEffects">The SoundEffects to attach</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffects"/> list is null.</exception>
            <exception cref="T:System.InvalidOperationException">One or more of the provided SoundEffect can not be localized (contains more than one channel).</exception>
            <remarks>Attaching a soundEffect already attached has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Detach a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> from this emitter component.
            Once detach the controller previously associated to the SoundEffect is invalid.
            </summary>
            <param name="soundEffect">The soundEffect to detach.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The provided <paramref name="soundEffect"/> is not currently attached to the emitter component.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffects(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Detach a list of <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> from this emitter component.
            Once detach the controller previously associated to the SoundEffect is invalid.
            </summary>
            <param name="soundEffects">The soundEffects to detach.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffects"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One or more of the provided SoundEffect is not currently attached to the emitter component.</exception>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChanged">
            <summary>
            Event triggered when an <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/> has be attached or detached to the component.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DistanceScale">
            <summary>
            Distance scale used to calculate the signal attenuation with the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value represent the distance unit and determines how quickly the signal attenuates between this object and the AudioListener. 
            Values below 1.0 exaggerate the attenuation to make it more apparent. 
            Values above 1.0 scale down the attenuation. A value of 1.0 leaves the default attenuation unchanged.
            Note that this value modifies only the calculated attenuation between this object and a AudioListener. 
            The calculated attenuation is a product of the relationship between AudioEmitter.Position and AudioListener.Position. 
            If the calculation yields a result of no attenuation effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The distance scale of an audio emitter must be greater than or equal to zero.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DopplerScale">
            <summary>
            The scalar applied to the level of Doppler effect calculated between this and the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value determines how much to modify the calculated Doppler effect between this object and a AudioListener. 
            Values below 1.0 scale down the Doppler effect to make it less apparent. 
            Values above 1.0 exaggerate the Doppler effect. A value of 1.0 leaves the effect unmodified.
            Note that this value modifies only the calculated Doppler between this object and a AudioListener. 
            The calculated Doppler is a product of the relationship between AudioEmitter.Velocity and AudioListener.Velocity. 
            If the calculation yields a result of no Doppler effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The Doppler scale of an audio emitter must be greater than or equal to zero.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ShouldBeProcessed">
            <summary>
            Boolean indicating to the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterProcessor"/> if the AudioEmitterComponent need to be processed or can be skipped.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs">
            <summary>
            Event argument class used to signal the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterProcessor"/> that a new AudioEmitterSoundController has new added or removed to the component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Entity">
            <summary>
            The entity associated the current component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Controller">
            <summary>
            The controller that have been added or removed to the component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Action">
            <summary>
            Action indication if the controller has been added or removed.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEngineInternalExceptions">
            <summary>
            The exception that is thrown when an internal error happened in the Audio System. That is an error that is not due to the user behavior.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioListenerComponent">
            <summary>
            Component representing an audio listener.
            </summary>
            <remarks>
            <para>Associate this component to an <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> to simulate a physical listener listening to the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>s of the scene,
            placed at the entity's center and oriented along the entity's Oz (forward) and Oy (up) vectors.</para>
            <para>Use the AudioSytem's <see cref="M:SiliconStudio.Paradox.Engine.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> and <see cref="M:SiliconStudio.Paradox.Engine.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> functions 
            to activate/deactivate the listeners that are actually listening at a given time.</para>
            <para>The entity needs to be added to the Entity System so that the associated AudioListenerComponent can be processed.</para></remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioListenerProcessor">
            <summary>
            Processor in charge of creating and updating the <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> data associated to the scene <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>s.
            </summary>
            <remarks>
            The processor updates only <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associated to <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>s 
            added to the <see cref="T:SiliconStudio.Paradox.Engine.AudioSystem"/> via the <see cref="M:SiliconStudio.Paradox.Engine.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> function.
            The processor is subscribing to the <see cref="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.audioSystem"/> <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> collection events to be informed of required <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> updates.
            When a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> is added to the <see cref="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.audioSystem"/>, the processor set the associated <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>.
            When a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> is removed from the entity system, 
            the processor set the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> reference of the <see cref="T:SiliconStudio.Paradox.Engine.AudioSystem"/> to null 
            but do not remove the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> from its collection.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityProcessor`1">
            <summary>Helper class for <see cref="T:SiliconStudio.Paradox.EntityModel.EntityProcessor"/>, that will keep track of <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> matching certain <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponent"/> requirements.</summary>
            Additional precomputed data will be stored alongside the <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> to offer faster accesses and iterations.
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityProcessor">
            <summary>Entity processor, triggered on various <see cref="P:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntitySystem"/> events such as Entity and Component additions and removals.</summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.Update(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.Draw(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.OnSystemAdd">
            <summary>
            Run when this <see cref="T:SiliconStudio.Paradox.EntityModel.EntityProcessor"/> is added to an <see cref="P:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntitySystem"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.OnSystemRemove">
            <summary>
            Run when this <see cref="T:SiliconStudio.Paradox.EntityModel.EntityProcessor"/> is removed from an <see cref="P:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntitySystem"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.SetEnabled(SiliconStudio.Paradox.EntityModel.Entity,System.Boolean)">
            <summary>
            Specifies weither an entity is enabled or not.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntityCheck(SiliconStudio.Paradox.EntityModel.Entity,System.Collections.Generic.List{SiliconStudio.Paradox.EntityModel.EntityProcessor},System.Boolean)">
            <summary>
            Checks if <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> needs to be either added or removed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="forceRemove">if set to <c>true</c> [force remove].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.InternalAddEntity(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Adds the entity to the internal list of the <see cref="P:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntitySystem"/>.
            Exposed for inheriting class that has no access to EntitySystem as internal.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor.InternalRemoveEntity(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Removes the entity to the internal list of the <see cref="P:SiliconStudio.Paradox.EntityModel.EntityProcessor.EntitySystem"/>.
            Exposed for inheriting class that has no access to EntitySystem as internal.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.SetEnabled(SiliconStudio.Paradox.EntityModel.Entity,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.EntityCheck(SiliconStudio.Paradox.EntityModel.Entity,System.Collections.Generic.List{SiliconStudio.Paradox.EntityModel.EntityProcessor},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>Generates associated data to the given entity.</summary>
            Called right before <see cref="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,`0)"/>.
            <param name="entity">The entity.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,`0)">
            <summary>Run when a matching entity is added to this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,`0)">
            <summary>Run when a matching entity is removed from this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.EntityModel.EntityProcessor`1.RequiredKeys">
            <summary>Gets the required components for an entity to be added to this entity processor.</summary>
            <value>The required keys.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.audioSystem">
            <summary>
            Reference to the <see cref="T:SiliconStudio.Paradox.Engine.AudioSystem"/> of the game instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioListenerProcessor.#ctor">
            <summary>
            Create a new instance of AudioListenerProcessor.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioListenerProcessor.OnListenerCollectionChanged(System.Object,SiliconStudio.Core.Collections.TrackingCollectionChangedEventArgs)">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.AudioSystem"/> listeners collection has been modified.
            Mark AudioEmitter not for update if removed from the list.
            Create the AudioEmitter data and mark it for update  if added to the list.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.AssociatedData.ShouldBeComputed">
            <summary>
            Boolean indicating whether the AudioEmitter need to be updated for the current loop turn or not.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.AssociatedData.AudioListener">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associated to the below <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.AssociatedData.ListenerComponent">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> associated to the entity.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.AssociatedData.TransformationComponent">
            <summary>
            The <see cref="F:SiliconStudio.Paradox.Engine.AudioListenerProcessor.AssociatedData.TransformationComponent"/> associated to the entity.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterProcessor">
            <summary>
            Processor in charge of updating the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>s.
            </summary>
            <remarks>
            <para>More precisely it updates the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>s and 
            then applies 3D localization to each couple <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>-<see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>.
            When a new emitter or a new listener is added to the system, its creates the required SoundInstances and associate them with the new emitter/listener tuples.
            </para> 
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.audioSystem">
            <summary>
            Reference to the audioSystem.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.#ctor">
            <summary>
            Create a new instance of the processor.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData">
            <summary>
            Data associated to each <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> instances of the system having an <see cref="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/> and an <see cref="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.TransformationComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.AudioEmitter">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> associated to the <see cref="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.TransformationComponent">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.ListenerControllerToSoundInstance">
            <summary>
            A dictionary associating each activated listener of the AudioSystem and each sound controller of the <see cref="F:SiliconStudio.Paradox.Engine.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/> to a valid sound effect instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioSystem">
            <summary>
            The Audio System.
            It creates an underlying instance of <see cref="P:SiliconStudio.Paradox.Engine.AudioSystem.AudioEngine"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Create an new instance of AudioSystem
            </summary>
            <param name="registry">The service registry in which to register the <see cref="T:SiliconStudio.Paradox.Engine.AudioSystem"/> services</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioSystem.Listeners">
            <summary>
            A collection containing the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>-<see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associations.
            The AudioListenerComponent keys are added/removed by the user by calls to <see cref="M:SiliconStudio.Paradox.Engine.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/>/<see cref="M:SiliconStudio.Paradox.Engine.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/>.
            The AudioListener values are created/updated by the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerProcessor"/>. 
            </summary>
            <remarks>When a AudioListenerComponent is added to the AudioSystem but not present in the Entity System, 
            a valid AudioListener can not be computed. Thus we set its value to 'null'.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)">
            <summary>
            Add and activate a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> to the Audio System.
            After this call sounds played via <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/>s will be heard by this listener.
            </summary>
            <param name="listener">The listener to add to the audio system.</param>
            <remarks>Adding a listener already added as no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)">
            <summary>
            Remove a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> from the Audio System.
            After this call sounds played via <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterSoundController"/>s will not be heard by this listener anymore.
            </summary>
            <param name="listener">The listener to remove from the audio system.</param>
            <exception cref="T:System.ArgumentException">The provided listener was not present in the Audio System.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioSystem.AudioEngine">
            <summary>
            The underlying <see cref="P:SiliconStudio.Paradox.Engine.AudioSystem.AudioEngine"/>. This instance can be used to possibly create <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>.
            </summary>
            <value>The audio engine.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsComponent.Elements">
            <summary>
            Elements describing the physical colliders/rigidbodies/character of this entity
            Any runtime dynamic change should happen while the entity if not added to the Game object
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.PhysicsElement.DerivePhysicsTransformation">
            <summary>
            Computes the physics transformation from the TransformationComponent values
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.PhysicsElement.UpdateTransformationComponent(SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Updades the graphics transformation from the given physics transformation
            </summary>
            <param name="physicsTransform"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.PhysicsElement.UpdatePhysicsTransformation">
            <summary>
            Forces an update from the TransformationComponent to the Collider.PhysicsWorldTransform.
            Useful to manually force movements.
            In the case of dynamic rigidbodies a velocity reset should be applied first.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsElement.LinkedBoneName">
            <summary>
            Gets or sets the link (usually a bone).
            </summary>
            <value>
            The mesh's linked bone name
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsElement.CollisionGroup">
            <summary>
            Gets or sets the collision group.
            </summary>
            <value>
            The collision group.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsElement.CanCollideWith">
            <summary>
            Gets or sets the can collide with.
            </summary>
            <value>
            The can collide with.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsElement.StepHeight">
            <summary>
            Gets or sets the height of the character step.
            </summary>
            <value>
            The height of the character step.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PhysicsElement.Sprite">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Engine.PhysicsElement"/> is representing a sprite.
            </summary>
            <value>
              <c>true</c> if sprite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.LightProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.LightProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.LightProcessor.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.LightProcessor.Draw(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Updates all the <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix"/>.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.PlayingAnimation.FilterNodes(SiliconStudio.Paradox.Effects.ModelNodeDefinition[],System.String[])">
            <summary>
            Filters the animation to the specified sub-trees given by <see cref="!:roots"/>.
            </summary>
            <param name="nodes">The node hierarchy.</param>
            <param name="roots">The node roots of sub-trees that should be active (others will be filtered out).</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.BlendOperation">
            <summary>
            Gets or sets the blend operation.
            </summary>
            <value>
            The blend operation.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.RepeatMode">
            <summary>
            Gets or sets the repeat mode.
            </summary>
            <value>
            The repeat mode.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.Weight">
            <summary>
            Gets or sets the animation weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.CurrentTime">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>
            The current time.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.TimeFactor">
            <summary>
            Gets or sets the playback speed factor.
            </summary>
            <value>
            The playback speed factor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.PlayingAnimation.IsPlaying">
            <summary>
            Gets or sets a value indicating whether animation is playing.
            </summary>
            <value>
              <c>true</c> if animation is playing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.Target">
            <summary>
            Gets or sets the model which contains the hierarchy to use.
            </summary>
            <value>
            The model which contains the hierarchy to use.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SpriteAnimationSystem">
            <summary>
            A system in charge of animating the sprites 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Engine.SpriteAnimationSystem"/> and register it in the services.
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Play(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32,System.Int32,SiliconStudio.Paradox.DataModel.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/>.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Play(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32[],SiliconStudio.Paradox.DataModel.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation defined by the provided sequence of indices.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Queue(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32,System.Int32,SiliconStudio.Paradox.DataModel.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/> at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Queue(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32[],SiliconStudio.Paradox.DataModel.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation defined by the provided sequence of indices at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Pause(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Pauses the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to pause</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Resume(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Resumes a previously paused animation.
            </summary>
            <param name="spriteComponent">the sprite component to resume</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.Stop(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Stops the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to stop</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteAnimationSystem.DefaultFramesPerSecond">
            <summary>
            Gets or sets the default sprite animation FPS (Default value = 30 FPS). 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SpriteComponent">
            <summary>
            Add a <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/> to an <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>. It could be an animated sprite.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteGroupInternal">
            <summary>
            The sprites to play.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.Color">
            <summary>
            The color to apply on the sprite.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteEffect">
            <summary>
            The effect to apply on the sprite.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.Effect">
            <summary>
            The effect to use to render the sprite.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteGroup">
            <summary>
            The group of sprites associated to the component.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.CurrentFrame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.CurrentSprite">
            <summary>
            Gets the current sprite.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityExtensions.Clone(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Deep clone of this entity.
            </summary>
            <param name="entity">The entity to clone</param>
            <returns>The cloned entity</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySerializer.Initialize(SiliconStudio.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Game">
            <summary>
            Main Game class system.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Game.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Game"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Game.LoadContent">
            <summary>
            Loads the content.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.GraphicsDeviceManager">
            <summary>
            Gets the graphics device manager.
            </summary>
            <value>The graphics device manager.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.RenderSystem">
            <summary>
            Gets the render system.
            </summary>
            <value>The render system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Script">
            <summary>
            Gets the script system.
            </summary>
            <value>The script.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Input">
            <summary>
            Gets the input manager.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Entities">
            <summary>
            Gets the entity system.
            </summary>
            <value>The entity system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Audio">
            <summary>
            Gets the audio system.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.UI">
            <summary>
            Gets the UI system.
            </summary>
            <value>The UI.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Physics">
            <summary>
            Gets the physics system.
            </summary>
            <value>The physics system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.SpriteAnimation">
            <summary>
            Gets the sprite animation system.
            </summary>
            <value>The sprite animation system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.Font">
            <summary>
            Gets the font system.
            </summary>
            <value>The font system.</value>
            <exception cref="T:System.InvalidOperationException">The font system is not initialized yet</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.ConsoleLogMode">
            <summary>
            Gets or sets the console log mode. See remarks.
            </summary>
            <value>The console log mode.</value>
            <remarks>
            Defines how the console will be displayed when running the game. By default, on Windows, It will open only on debug
            if there are any messages logged.
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Game.ConsoleLogLevel">
            <summary>
            Gets or sets the default console log level.
            </summary>
            <value>The console log level.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GameFontSystem">
            <summary>
            The game system in charge of calling <see cref="P:SiliconStudio.Paradox.Graphics.GameFontSystem.FontSystem"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SpriteProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having sprite components.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleFieldAccessor">
            <summary>
            Specifies how to access a <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription"/> in a given <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/> instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleFieldAccessor`1">
            <summary>
            Specifies how to access a <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription`1"/> in a given <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/> instance.
            </summary>
            <typeparam name="T">Type of the field.</typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription">
            <summary>
            Describes a field for a particle, which can store specific data for every particle.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription`1">
            <summary>
            Describes a field for a particle, which can store specific data for every particle.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.ScriptSystem">
            <summary>
            The script system handles scripts scheduling in a game.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.ScriptSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Games.GameSystemBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <remarks>The GameSystem is expecting the following services to be registered: <see cref="T:SiliconStudio.Paradox.Games.IGame"/> and <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManager"/>.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.ScriptSystem.NextFrame">
            <summary>
            Allows to wait for next frame.
            </summary>
            <returns>ChannelMicroThreadAwaiter&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.ScriptSystem.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds the specified micro thread function.
            </summary>
            <param name="microThreadFunction">The micro thread function.</param>
            <returns>MicroThread.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.ScriptSystem.Add(SiliconStudio.Paradox.IScript)">
            <summary>
            Adds the specified script.
            </summary>
            <param name="script">The script.</param>
            <returns>MicroThread.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.ScriptSystem.WhenAll(SiliconStudio.Core.MicroThreading.MicroThread[])">
            <summary>
            Waits all micro thread finished their task completion.
            </summary>
            <param name="microThreads">The micro threads.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.ScriptSystem.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.IParticlePlugin">
            <summary>
            A particle plugin that can updates or process particles.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.IParticlePluginListener">
            <summary>
            Listeners that can react on addition or removal to a <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.Particle">
            <summary>
            A particle in the particle system.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Get``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor)">
            <summary>
            Gets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Set``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor,``0@)">
            <summary>
            Sets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Set``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor,``0)">
            <summary>
            Sets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Get``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor{``0})">
            <summary>
            Gets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Set``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor{``0},``0@)">
            <summary>
            Sets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.Particle.Set``1(SiliconStudio.Paradox.Particles.ParticleFieldAccessor{``0},``0)">
            <summary>
            Sets the specified field value.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldAccessor">The field accessor.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.Particle.Item(SiliconStudio.Paradox.Particles.ParticleFieldAccessor)">
            <summary>
            Gets the pointer to the specifield field.
            </summary>
            <value>
            The field pointer, as an <see cref="T:System.IntPtr"/>.
            </value>
            <param name="fieldAccessor">The field accessor.</param>
            <returns>The field pointer.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleFields">
            <summary>
            Common particle fields.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Position">
            <summary>
            A particle field description for the particle position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Acceleration">
            <summary>
            A particle field description for the particle acceleration.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Velocity">
            <summary>
            A particle field description for the particle velocity.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Angle">
            <summary>
            A particle field description for the particle Orientation (for billboard only).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.AngularVelocity">
            <summary>
            A particle field description for the particle angular velocity.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.AngularAcceleration">
            <summary>
            A particle field description for the particle angular acceleration.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Size">
            <summary>
            A particle field description for the particle size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Color">
            <summary>
            A particle field description for the particle color.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Rotation">
            <summary>
            A particle field description for the particle Orientation (Euler angles).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleFields.Lifetime">
            <summary>
            Particle field storing the particle current lifetime (age).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleSystem">
            <summary>
            A particle system, containing particles and their updaters.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Particles.ParticleSystem.fields">
            <value>
            The particle fields.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.GetEnumerator">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Particles.Particle"/> enumerator.
            </summary>
            <returns>A <see cref="T:SiliconStudio.Paradox.Particles.Particle"/> enumerator.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.GetField``1(SiliconStudio.Paradox.Particles.ParticleFieldDescription{``0})">
            <summary>
            Gets the field accessor specified by the given <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription`1"/>.
            If the field doesn't exist in this <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/>,
            a <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldAccessor`1"/> is returned with its <see cref="M:SiliconStudio.Paradox.Particles.ParticleFieldAccessor`1.IsValid"/> returning false.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldDesc">The field description.</param>
            <returns>A valid field accessor for the requested field if the field exists; otherwise a non-valid one.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.GetOrCreateField``1(SiliconStudio.Paradox.Particles.ParticleFieldDescription{``0})">
            <summary>
            Gets the field accessor for the given <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription`1"/>.
            If it doesn't exist, a new field will be created in the <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/>.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldDesc">The field description.</param>
            <returns>A valid field accessor for the requested field.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.GetOrCreateFieldWithDefault``1(SiliconStudio.Paradox.Particles.ParticleFieldDescription{``0},``0)">
            <summary>
            Gets the field accessor for the given <see cref="T:SiliconStudio.Paradox.Particles.ParticleFieldDescription`1"/>.
            If it doesn't exist, a new field will be created in the <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem"/>.
            Weither the field exists or not, its default value will be changed to the supplied one.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldDesc">The field description.</param>
            <param name="defaultValue">The new field default value.</param>
            <returns>A valid field accessor for the requested field.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.SetDefaultValue``1(SiliconStudio.Paradox.Particles.ParticleField,``0)">
            <summary>
            Sets the default value for the specified field.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="particleField">The field.</param>
            <param name="defaultValue">The new field default value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.AddField``1(SiliconStudio.Paradox.Particles.ParticleFieldDescription{``0})">
            <summary>
            Adds a new field to the particle system.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="fieldDesc">The field description.</param>
            <returns>The field.</returns>
            <exception cref="T:System.ArgumentException">Particle field size must be a multiple of 4;size</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Update(System.Single)">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.AddParticle">
            <summary>
            Adds the particle.
            </summary>
            <returns>The index of the newly added particle.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.RemoveParticleAt(System.Int32)">
            <summary>
            Removes the particle at the specified index.
            </summary>
            <param name="particleIndex">Index of the particle.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Plugins">
            <summary>
            Gets the particle system plugins.
            </summary>
            <value>
            The particle system plugins.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Position">
            <summary>
            Gets the position field accessor.
            </summary>
            <value>
            The position field accessor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Angle">
            <summary>
            Gets the angle field accessor.
            </summary>
            <value>
            The angle field accessor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.ParticleCount">
            <summary>
            Gets the particle count.
            </summary>
            <value>
            The particle count.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator">
            <summary>
            A <see cref="T:SiliconStudio.Paradox.Particles.Particle"/> enumerator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.#ctor(SiliconStudio.Paradox.Particles.ParticleSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator"/> struct.
            </summary>
            <param name="particleSystem">The particle system.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.RemoveParticle">
            <summary>
            Removes the current particle from the particle system.
            The iterator will be placed at the previous particle, so that
            next iteration with MoveNext() will point to the right particle.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.Index">
            <summary>
            Gets the index of the current particle.
            </summary>
            <value>
            The index of the current particle.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Particles.ParticleSystem.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.CameraKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.CameraKeys.FocusDistance">
            <summary>
            Camera focus distance
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.InheritanceDefinition">
            <summary>
            Inheritance only applies to specific keys (which can be remapped).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.InheritanceIndexer">
            <summary>
            Applies IndexedOf(index) on each key.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.CameraComponent">
            <summary>
            Describes the camera projection and view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.Key">
            <summary>
            The property key of this component.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.#ctor">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.#ctor(SiliconStudio.Paradox.EntityModel.Entity,System.Single,System.Single)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> instance with the provided target, near plane and far plane. 
            </summary>
            <param name="target">The entity to use as target.</param>
            <param name="nearPlane">The near plane value</param>
            <param name="farPlane">The far plane value</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.WithEntity(System.String)">
            <summary>
            Associates an entity with this camera component.
            </summary>
            <param name="name">The name of entity.</param>
            <returns>This CameraComponent.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.Calculate(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Calculates the projection matrix and view matrix.
            </summary>
            <param name="projection">The projection matrix.</param>
            <param name="viewMatrix">The view matrix.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.VerticalFieldOfView">
            <summary>
            Gets or sets the vertical field of view.
            </summary>
            <value>
            The vertical field of view.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.NearPlane">
            <summary>
            Gets or sets the near plane distance.
            </summary>
            <value>
            The near plane distance.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.FarPlane">
            <summary>
            Gets or sets the far plane distance.
            </summary>
            <value>
            The far plane distance.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.Target">
            <summary>
            Gets or sets the target this camera is pointing to. May be null.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.TargetUp">
            <summary>
            Gets or sets the up direction when using a target (for LookAt).
            </summary>
            <value>
            The up direction when using a target (for LookAt).
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.AutoFocus">
            <summary>
            Gets or sets a value indicating whether [auto focus].
            </summary>
            <value><c>true</c> if [auto focus]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.FocusDistance">
            <summary>
            Gets or sets the focus distance.
            </summary>
            <value>The focus distance.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.UseViewMatrix">
            <summary>
            Gets or sets a value indicating whether to use custom <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>. Default is <c>false</c>
            </summary>
            <value><c>true</c> if use custom <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix">
            <summary>
            Gets or sets the local view matrix, only used when <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.UseViewMatrix"/> is <c>true</c>.
            </summary>
            <value>The local view matrix.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ParticleEmitterComponent"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Count">
            <summary>
            Gets or sets the particle count.
            </summary>
            <value>The particle count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Type">
            <summary>
            Gets or sets the type of this emitter..
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Shader">
            <summary>
            Gets or sets the shader.
            </summary>
            <value>The shader.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.ParticleElementSize">
            <summary>
            Gets or sets the size of the particle element.
            </summary>
            <value>The size of the particle element.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.ParticleData">
            <summary>
            Gets or sets the particle data.
            </summary>
            <value>The particle data.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.UpdateNextBuffer">
            <summary>
            Gets or sets a value indicating whether [update next buffer].
            </summary>
            <value><c>true</c> if [update next buffer]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.IsDynamicEmitter">
            <summary>
            Gets a value indicating whether this instance is a dynamic emitter.
            </summary>
            <value><c>true</c> if this instance is a dynamic emitter; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.MeshUpdate">
            <summary>
            A callback called whenever the component is updated by the ParticleSystem.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.LightComponent">
            <summary>
            Add a light to an <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Enabled">
            <summary>
            Gets or sets a value indicating whether the light is enabled.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Deferred">
            <summary>Gets or sets a value indicating whether the light is deferred (if available).</summary>
            <value>true if light is deferred, false if not.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Type">
            <summary>
            Gets or sets the light type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Color">
            <summary>
            Gets or sets the light color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
            <value>
            The light intensity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.DecayStart">
            <summary>
            Gets or sets the decay start.
            </summary>
            <value>
            The decay start.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.LightDirection">
            <summary>Gets or sets the light direction.</summary>
            <value>The light direction.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.SpotBeamAngle">
            <summary>Gets or sets the beam angle of the spot light.</summary>
            <value>The beam angle of the spot (in degrees between 0 and 90).</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.SpotFieldAngle">
            <summary>Gets or sets the spot field angle of the spot light.</summary>
            <value>The spot field angle of the spot (in degrees between 0 and 90).</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMap">
            <summary>Gets or Sets a value indicating if the light cast shadows.</summary>
            <value>True if the ligh generates a shadowmap, false otherwise.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMaxSize">
            <summary>Gets or Sets the maximium size (in pixel) of one cascade of the shadow map.</summary>
            <value>The maximum size of the shadow map.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMinSize">
            <summary>Gets or Sets the minimum size (in pixel) of one cascade of the shadow map.</summary>
            <value>The minimum size of the shadow map.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapCascadeCount">
            <summary>Gets or Sets the number of cascades for this shadow.</summary>
            <value>The number of cascades for this shadow.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowNearDistance">
            <summary>Gets or Sets the near plane distance of the shadow.</summary>
            <value>The near plane distance of the shadow.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowFarDistance">
            <summary>Gets or Sets the far plane distance of the shadow.</summary>
            <value>The far plane distance of the shadow.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.ShadowMapFilterType">
            <summary>
            Gets or sets the shadow map filtering.
            </summary>
            <value>The filter type.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.BleedingFactor">
            <summary>
            Gets or sets the bleeding factor of the variance shadow map.
            </summary>
            <value>The bleeding factor.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.MinVariance">
            <summary>
            Gets or sets the minimal value of the variance of the variance shadow map.
            </summary>
            <value>The minimal variance.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Layers">
            <summary>
            Get or sets the layers that the light influences
            </summary>
            <value>
            The layer mask.
            </value>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ParticleEmitterType.CpuStatic">
            <summary>
            Particles data are uploaded/updated by the CPU at each frame. But count is static.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ParticleEmitterType.CpuDynamic">
            <summary>
            Particles data are uploaded/updated by the CPU at each frame. Count can changed at each frame.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ParticleEmitterType.GpuStatic">
            <summary>
            Particles are managed by the GPU, with a static set of particles (no dynamic emitters).
            </summary>
            <remarks>
            <see cref="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Shader"/> must be non null for GPU particles.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ParticleEmitterType.GpuDynamic">
            <summary>
            Particles are managed by the GPU and is a dynamic emitter.
            </summary>
            <remarks>
            <see cref="P:SiliconStudio.Paradox.Engine.ParticleEmitterComponent.Shader"/> must be non null for GPU particles.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityGroup">
            <summary>
            A group of <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> that can refers to each others.
            They can be loaded together as a chunk.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderSystem">
            <summary>
            Renders its <see cref="P:SiliconStudio.Paradox.Effects.RenderSystem.Pipeline"/>, which will usually result in drawing all meshes, UI, etc...
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderSystem.LoadContent">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderSystem.Draw(SiliconStudio.Paradox.Games.GameTime)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderSystem.Draw(SiliconStudio.Paradox.Effects.RenderPass,SiliconStudio.Paradox.Effects.RenderContext)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderSystem.Pipeline">
            <summary>
            Gets the root pipeline, used as entry point for rendering.
            </summary>
            <value>
            The pipeline.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderSystem.Pipelines">
            <summary>
            Gets all the existing registered pipelines.
            </summary>
            <value>
            The registered pipelines.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.GraphicsResizeContext">
            <summary>
            Keep track of actions to execute when GraphicsDevice is resized.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.GraphicsResizeContext.SetupResize(System.Action{SiliconStudio.Paradox.Effects.GraphicsResizeContext})">
            <summary>
            Execute the resize action and register it for later reexecution.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.GraphicsResizeContext.StartResize">
            <summary>
            First step of the resize process: it sets to null all the resources assigned to a group through SetWithResize.
            Later, EndResize() should be called to execute second step of this system.
            This two steps system should help avoiding unecessary memory peaks and reduce GPU memory fragmentation.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.GraphicsResizeContext.EndResize">
            <summary>
            Recreate all the resizable resources.
            It reexecute all the resize handlers registered through SetupResize to recreate necessary resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.GraphicsResizeExtensions.SetWithResize``1(SiliconStudio.Paradox.Effects.ParameterCollection,SiliconStudio.Paradox.Effects.GraphicsResizeContext,SiliconStudio.Paradox.Effects.ParameterKey{``0},``0)">
            <summary>
            Sets a resizable resource for the specified key.
            </summary>
            <typeparam name="T">Type must be a <see cref="T:SiliconStudio.Core.IReferencable"/></typeparam>
            <param name="parameterCollection">The parameter collection.</param>
            <param name="context">The context.</param>
            <param name="key">The key.</param>
            <param name="resourceValue">The resource value.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderPassForeach">
            <summary>
            Delegate used by <see cref="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.Foreach(SiliconStudio.Paradox.Effects.RenderPass,SiliconStudio.Paradox.Effects.RenderPassForeach,System.Int32)"/>.
            </summary>
            <param name="renderPass">The render pass.</param>
            <param name="level">The level reflects the deepness of this renderpass in the renderpass tree. Zero for the top level render pass.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderPassExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Effects.RenderPass"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.GetProcessor``1(SiliconStudio.Paradox.Effects.RenderPass)">
            <summary>
            Gets a specific processor from a pass.
            </summary>
            <typeparam name="T">Type of the processor</typeparam>
            <param name="pass">The pass.</param>
            <returns>An instance of the processor.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.Descendants(SiliconStudio.Paradox.Effects.RenderPass)">
            <summary>
            Returns all the descendants from a render pass.
            </summary>
            <param name="renderPass">The render pass.</param>
            <returns>An enumerator on descendants render pass</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.Foreach(SiliconStudio.Paradox.Effects.RenderPass,SiliconStudio.Paradox.Effects.RenderPassForeach,System.Int32)">
            <summary>
            Iterate on all render pass an execute an action
            </summary>
            <param name="renderPass">The render pass.</param>
            <param name="onRenderPass">The fire action.</param>
            <param name="level">The initial level.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.Print(SiliconStudio.Paradox.Effects.RenderPass,System.IO.TextWriter,System.Func{SiliconStudio.Paradox.Effects.RenderPass,System.String})">
            <summary>
            Iterate on all Returns all the descendants from a render pass.
            </summary>
            <param name="renderPass">The render pass.</param>
            <param name="writer">The output text writer.</param>
            <param name="printer">The printer is a convenient callback to override the default ToString of a RenderPass.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.RenderPassExtensions.FindDescendantByName(SiliconStudio.Paradox.Effects.RenderPass,System.String)">
            <summary>
            Finds a descendent render pass by name.
            </summary>
            <param name="renderPass">The render pass.</param>
            <param name="name">The name.</param>
            <returns>An instance matching the name or null if not found</returns>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.EffectMesh.Tags">
            <summary>
            Gets the attached properties to this component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.EffectMesh.Render">
            <summary>
            The start action.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.EffectMesh.#ctor(SiliconStudio.Paradox.Graphics.Effect,SiliconStudio.Paradox.Effects.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Effects.EffectMesh"/> class.
            </summary>
            <param name="effect">The effect.</param>
            <param name="meshData">The mesh data.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.RenderContext">
            <summary>
            Thread-local storage context used during rendering.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderContext.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderContext.Parameters">
            <summary>
            Gets the parameters shared by this instance.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderContext.CurrentPass">
            <summary>
            Gets or sets the current pass being rendered.
            </summary>
            <value>The current pass.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Effects.RenderContext.ActiveLayers">
            <summary>
            Gets the list of active layers
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AnimationComponent">
            <summary>
            Add animation capabilities to an <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>. It will usually apply to <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.ModelViewHierarchy"/>
            </summary>
            <remarks>
            Data is stored as in http://altdevblogaday.com/2011/10/23/low-level-animation-part-2/.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Play(System.String)">
            <summary>
            Plays right away the animation with the specified name, instantly removing all other blended animations.
            </summary>
            <param name="name">The animation name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Crossfade(System.String,System.TimeSpan)">
            <summary>
            Crossfades to a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Blend(System.String,System.Single,System.TimeSpan)">
            <summary>
            Blends progressively a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="desiredWeight">The desired weight.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.HierarchicalProcessor">
            <summary>
            This processor will take care of adding/removing children of every Entity added/removed in the EntitySystem.
            It will also exposes a list of root entities.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnEntityAdding(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.TransformationComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnEntityRemoved(SiliconStudio.Paradox.EntityModel.Entity,SiliconStudio.Paradox.Engine.TransformationComponent)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.HierarchicalProcessor.RootEntities">
            <summary>
            Gets the list of root entities (entities which have no <see cref="P:SiliconStudio.Paradox.Engine.TransformationComponent.Parent"/>).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.ModelComponent">
            <summary>
            Add a <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.Model"/> to an <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ModelComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Enabled">
            <summary>
            Gets or sets a value indicating whether rendering is enabled.
            </summary>
            <value>
              <c>true</c> if rendering is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.DrawOrder">
            <summary>
            Gets or sets the draw order (from lowest to highest).
            </summary>
            <value>
            The draw order.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Parameters">
            <summary>
            Gets the parameters used to render this mesh.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.MeshProcessor.linkTransformationToUpdate">
            <summary>
            The link transformation to update.
            </summary>
            <remarks>The collection is declared globally only to avoid allocation at each frames</remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.TransformationComponent">
            <summary>
            Defines Position, Rotation and Scale of its <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix">
            <summary>
            The world matrix.
            Use <see cref="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateWorldMatrix"/> to ensure it is updated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationComponent.LocalMatrix">
            <summary>
            The local matrix.
            Use <see cref="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateLocalMatrix"/> to ensure it is updated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationComponent.Translation">
            <summary>
            The translation relative to the parent transformation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationComponent.Rotation">
            <summary>
            The rotation relative to the parent transformation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationComponent.Scaling">
            <summary>
            The scaling relative to the parent transformation.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateLocalMatrix">
            <summary>
            Updates the local matrix.
            If <see cref="P:SiliconStudio.Paradox.Engine.TransformationComponent.UseTRS"/> is true, <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.LocalMatrix"/> will be updated from <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Translation"/>, <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Rotation"/> and <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Scaling"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateWorldMatrix">
            <summary>
            Updates the world matrix.
            It will first call <see cref="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateLocalMatrix"/> on self, and <see cref="M:SiliconStudio.Paradox.Engine.TransformationComponent.UpdateWorldMatrix"/> on <see cref="P:SiliconStudio.Paradox.Engine.TransformationComponent.Parent"/> if not null.
            Then <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix"/> will be updated by multiplying <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.LocalMatrix"/> and parent <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix"/> (if any).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationComponent.CreateMatrixTRS(SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Quaternion@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformationComponent.Children">
            <summary>
            Gets the children of this <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/>.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformationComponent.RotationEulerXYZ">
            <summary>
            Gets or sets the euler rotation, with XYZ order.
            Not stable: setting value and getting it again might return different value as it is internally encoded as a <see cref="T:SiliconStudio.Core.Mathematics.Quaternion"/> in <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.Rotation"/>.
            </summary>
            <value>
            The euler rotation.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformationComponent.Parent">
            <summary>
            Gets or sets the parent of this <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/>.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.TransformationProcessor">
            <summary>
            Updates <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix"/> of entities.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationProcessor.transformationRoots">
            <summary>
            List of <see cref="T:SiliconStudio.Paradox.Engine.TransformationComponent"/> of every <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> in <see cref="!:EntitySystem.RootEntities"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformationProcessor.notSpecialRootComponents">
            <summary>
            The list of the components that are not special roots.
            </summary>
            <remarks>This field is instantiated here to avoid reallocation at each frames</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.TransformationProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.GenerateAssociatedData(SiliconStudio.Paradox.EntityModel.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.Draw(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Updates all the <see cref="F:SiliconStudio.Paradox.Engine.TransformationComponent.WorldMatrix"/>.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformationProcessor.CreateMatrixR(SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that contains the X, Y and Z rotation.
            </summary>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntitySystem">
            <summary>
            Manage a collection of entities.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Add(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Adds the entity.
            If the <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> has a parent, its parent should be added (or <see cref="!:TransformationComponent.Children"/>) should be used.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentException">Entity shouldn't have a parent.;entity</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.SetEnabled(SiliconStudio.Paradox.EntityModel.Entity,System.Boolean)">
            <summary>
            Sets the enable state of this entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="enabled">if set to <c>true</c>, entity is [enabled].</param>
            <exception cref="T:System.InvalidOperationException">Entity is not part of this EntityManager.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.IsEnabled(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Determines whether the specified entity is enabled.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if the specified entity is enabled; otherwise, <c>false</c>.</returns>
            <inheritdoc />
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Enable(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Enables the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <inheritdoc />
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Disable(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Disables the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <inheritdoc />
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Remove(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Removes the entity from the <see cref="T:SiliconStudio.Paradox.EntityModel.EntitySystem"/>.
            It works weither entity has a parent or not.
            In conjonction with <see cref="!:HierarchicalSystem"/>, it will remove children entities as well.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Clear">
            <summary>
            Removes all entities from the <see cref="T:SiliconStudio.Paradox.EntityModel.EntitySystem"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.GetProcessor``1">
            <summary>
            Gets the processor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.InternalAddEntity(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.InternalRemoveEntity(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntitySystem.Contains(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Determines whether this instance contains the specified entity.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance contains the specified entity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.EntityModel.EntitySystem.Processors">
            <summary>
            Gets the entity Processors.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.Entity">
            <summary>
            Game entity. It usually aggregates multiple EntityComponent
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.Entity.#ctor">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.Entity.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> instance having the provided name.
            </summary>
            <param name="name">The name to give to the entity</param>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.Entity.#ctor(SiliconStudio.Core.Mathematics.Vector3,System.String)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> instance having the provided name and initial position.
            </summary>
            <param name="position">The initial position of the entity</param>
            <param name="name">The name to give to the entity</param>
        </member>
        <member name="P:SiliconStudio.Paradox.EntityModel.Entity.Transformation">
            <summary>
            Gets or sets the <see cref="P:SiliconStudio.Paradox.EntityModel.Entity.Transformation"/> associated to this entity.
            Added for convenience over usual Get/Set method.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexBuffer(SiliconStudio.Paradox.Effects.Data.MeshDrawData)">
            <summary>
            Generates an index buffer for this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.CompactIndexBuffer(SiliconStudio.Paradox.Effects.Data.MeshDrawData)">
            <summary>
            Compacts the index buffer from 32 bits to 16 bits per index, if possible.
            </summary>
            <param name="meshData">The mesh data.</param>
            <returns>Returns true if index buffer was actually compacted.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexBufferAEN(SiliconStudio.Paradox.Effects.Data.MeshDrawData)">
            <summary>
            Generates the index buffer with dominant edge and vertex informations.
            Each triangle gets its indices expanded to 12 control points, with 0 to 2 being original triangle,
            3 to 8 being dominant edges and 9 to 11 being dominant vertices.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexMapping(SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData,System.String[])">
            <summary>
            Generates an index mapping with the specified vertex elements.
            If no vertex elements are specified, use the whole vertex.
            </summary>
            <param name="vertexBufferBinding">The vertex buffer binding.</param>
            <param name="usages">The vertex element usages to consider.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.TNBExtensions.GenerateTangentBinormal(SiliconStudio.Paradox.Effects.Data.MeshDrawData)">
            <summary>
            Generates the tangents and binormals for this mesh data.
            Tangents and bitangents will be encoded as float4:
            float3 for tangent and an additional float for handedness (1 or -1),
            so that bitangent can be reconstructed.
            More info at http://www.terathon.com/code/tangent.html
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.VertexExtensions.GetVertexBufferData``1(SiliconStudio.Paradox.Effects.Data.MeshDrawData,System.String[])">
            <summary>
            Extracts a selection of vertices from a vertex buffer stored in this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
            <param name="vertexElementToExtract">The declaration to extract (e.g. "POSITION0"...etc.) </param>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityCloner">
            <summary>
            Provides method for deep cloning of en <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityCloner.Clone(SiliconStudio.Paradox.EntityModel.Entity)">
            <summary>
            Clones the specified entity.
            <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>, children <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/> and their <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponent"/> will be cloned.
            Other assets will be shared.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.EntityModel.EntityCloner.Clone``1(System.Collections.Generic.HashSet{System.Object},SiliconStudio.Paradox.EntityModel.EntityCloner.TryGetValueFunction{System.Object,System.Object},``0)">
            <summary>
            Clones the specified object, taking special care of <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>, <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponent"/> and external assets.
            User can optionally provides list of cloned objects (list of data reference objects that should be cloned)
            and mapped objects (list of data reference objects that should be ducplicated using the given instance).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clonedObjects">The cloned objects.</param>
            <param name="mappedObjects">The mapped objects.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneSerializer`1">
            <summary>
            Serializer for helping cloning of <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneContext">
            <summary>
            Helper class for cloning <see cref="T:SiliconStudio.Paradox.EntityModel.Entity"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneContext.ClonedObjects">
            <summary>
            Lists objects that should be cloned.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneContext.SharedObjects">
            <summary>
            Stores objects that should be reused in the new cloned instance.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneContext.EntitySerializerSelector">
            <summary>
            Special serializer that goes through <see cref="F:SiliconStudio.Paradox.EntityModel.EntityCloner.CloneContext.EntitySerializerSelector"/> and <see cref="T:SiliconStudio.Paradox.EntityModel.EntityComponentSerializer`1"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys">
            <summary>
            Keys used for render target settings.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys.DepthStencil">
            <summary>
            The depth stencil buffer key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys.DepthStencilSource">
            <summary>
            The depth stencil buffer key used as an input shader resource.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys.RenderTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys.StreamTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.RenderTargetKeys.RequireDepthStencilShaderResource">
            <summary>
            Used by <see cref="!:RenderTargetPlugin"/> to notify that the plugin requires support for depth stencil as shader resource
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Effects.Modules.TransformationKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Effects.Modules.TransformationKeys.ProjectionFrustumPlanes">
            <summary>
            Projection frustum planes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.TransformationKeys.ExtractProjScreenRay(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector2@)">
            <summary>
            Extracts the projected screem 2d vector from the projection matrix.
            </summary>
            <param name="projection">The projection.</param>
            <param name="projScreenRay">The proj screen ray.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.TransformationKeys.ViewToEye(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector4@)">
            <summary>
            Invert the view matrix and build an eye vector.
            </summary>
            <param name="view">The view matrix.</param>
            <param name="eye">The eye vector.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Effects.Modules.TransformationKeys.ExtractFrustumPlanes(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Plane[]@)">
            <summary>
            Extracts the frustum planes from given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="planes">The planes.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.ShadowMapModelRenderer">
            <summary>
            The class will not load effect for meshes that are not casting shadows
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Threading.TaskList">
            <summary>
            Helper methods to dispatch action-items from a list to several threads.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Threading.TaskList.Dispatch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Action{System.Int32,``0})">
            <summary>
            Dispatcher to process items on several threads with a specified action.
            </summary>
            <typeparam name="T">Type of the item data.</typeparam>
            <param name="items">The items.</param>
            <param name="threadCount">The thread count, number of thread tasks in parallel.</param>
            <param name="threshold">The threshold, if number of items is above the threshold, the task parallel is used, otherwise it is sequential.</param>
            <param name="action">The action.</param>
        </member>
    </members>
</doc>
