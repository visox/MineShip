<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Audio</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.Paradox.Audio.AudioChannels">
            <summary>
            Enumeration containing the different audio output configurations.
            </summary>
            <remarks>Currently only Mono and Stereo sounds are supported</remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioChannels.Mono">
            <summary>
            A 1-channel mono sounds.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioChannels.Stereo">
            <summary>
            A 2-channels stereo sounds.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioDevice">
            <summary>
            Reprensent an Audio Hardware Device.
            Can be used when creating an <see cref="T:SiliconStudio.Paradox.Audio.AudioEngine"/> to specify the device on which to play the sound.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioDevice.Name">
            <summary>
            Returns the name of the current device.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEmitter">
            <summary>
            Represents a 3D audio emitter in the audio scene. 
            This object, used in combination with an <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/>, can simulate 3D audio localization effects for a given sound implementing the <see cref="T:SiliconStudio.Paradox.Audio.IPositionableSound"/> interface.
            For more details take a look at the <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> function.
            </summary>
            <seealso cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.AudioListener"/>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitter.#ctor">
            <summary>
            Create a new instance of <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEmitter.Position">
            <summary>
            The position of the emitter in the 3D world.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEmitter.Velocity">
            <summary>
            The velocity of the emitter in the 3D world. 
            </summary>
            <remarks>This is only used to calculate the doppler effect on the sound effect</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEmitter.DopplerScale">
            <summary>
            The scalar applied to the level of Doppler effect calculated between this and the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value determines how much to modify the calculated Doppler effect between this object and a AudioListener. 
            Values below 1.0 scale down the Doppler effect to make it less apparent. 
            Values above 1.0 exaggerate the Doppler effect. A value of 1.0 leaves the effect unmodified.
            Note that this value modifies only the calculated Doppler between this object and a AudioListener. 
            The calculated Doppler is a product of the relationship between AudioEmitter.Velocity and AudioListener.Velocity. 
            If the calculation yields a result of no Doppler effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The doppler scale of an audio emitter must be greater than or equal to zero.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEmitter.DistanceScale">
            <summary>
            Distance scale used to calculate the signal attenuation with the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value represent the distance unit and determines how quicly the signal attenuates between this object and the AudioListener. 
            Values below 1.0 exaggerate the attenuation to make it more apparent. 
            Values above 1.0 scale down the attenuation. A value of 1.0 leaves the default attenuation unchanged.
            Note that this value modifies only the calculated attenuation between this object and a AudioListener. 
            The calculated attenuation is a product of the relationship between AudioEmitter.Position and AudioListener.Position. 
            If the calculation yields a result of no attenuation effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The distance scale of an audio emitter must be greater than zero.</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundMusicAction">
            <summary>
            Describe an play action that a SoundMusic can request to the AudioEngine
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundMusicActionRequest">
            <summary>
            A SoundMusic action request aimed for the AudioEngine.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundMusicEvent">
            <summary>
            A <see cref="T:SiliconStudio.Paradox.Audio.SoundMusic"/> event.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundMusicEventNotification">
            <summary>
            A notification of an SoundMusic event.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEngine">
            <summary>
            Represents the audio engine. 
            In current version, the audio engine necessarily creates its context on the default audio hardware of the device.
            The audio engine is required when creating or loading sounds.
            </summary>
            <remarks>The AudioEngine is Disposable. Call the <see cref="M:SiliconStudio.Core.ComponentBase.Dispose"/> function when you do not need to play sounds anymore to free memory allocated to the audio system. 
            A call to Dispose automatically stops and disposes all the <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>, <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> and <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/> 
            sounds created by this AudioEngine</remarks>
            <seealso cref="M:SiliconStudio.Paradox.Audio.SoundEffect.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)"/>
            <seealso cref="M:SiliconStudio.Paradox.Audio.SoundMusic.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.Logger">
            <summary>
            The logger of the audio engine.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.#ctor(System.UInt32)">
            <summary>
            Create an Audio Engine on the default audio device
            </summary>
            <param name="sampleRate">The desired sample rate of the audio graph. 0 let the engine choose the best value depending on the hardware.</param>
            <exception cref="T:SiliconStudio.Paradox.Audio.AudioInitializationException">Initialization of the audio engine failed. May be due to memory problems or missing audio hardware.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.#ctor(SiliconStudio.Paradox.Audio.AudioDevice,System.UInt32)">
            <summary>
            Create the Audio Engine on the specified device.
            </summary>
            <param name="device">Device on which to create the audio engine.</param>
            <param name="sampleRate">The desired sample rate of the audio graph. 0 let the engine choose the best value depending on the hardware.</param>
            <remarks>Available devices can be queried by calling static method <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.GetAvailableDevices"/></remarks>
            <exception cref="T:SiliconStudio.Paradox.Audio.AudioInitializationException">Initialization of the audio engine failed. May be due to memory problems or missing audio hardware.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.GetAvailableDevices">
            <summary>
            Get the list of the audio hardware available on the device.
            </summary>
            <returns>List of available devices</returns>
            <seealso cref="T:SiliconStudio.Paradox.Audio.AudioEngine"/>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.pausedSounds">
            <summary>
            The list of the sounds that have been paused by the call to <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.PauseAudio"/> and should be resumed by <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.ResumeAudio"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.Update">
            <summary>
            Method that updates all the sounds play status. 
            </summary>
            <remarks>Should be called in same thread as user main thread.</remarks>
            <exception cref="T:System.InvalidOperationException">One or several of the sounds asked for play had invalid data (corrupted or unsupported formats).</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.PauseAudio">
            <summary>
            Pause the audio engine. That is, pause all the currently playing <see cref="T:SiliconStudio.Paradox.Audio.SoundInstanceBase"/>, and block any future play until <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.ResumeAudio"/> is called.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.ResumeAudio">
            <summary>
            Resume all audio engine. That is, resume the sounds paused by <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.PauseAudio"/>, and re-authorize future calls to play.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.GetLeastSignificativeSoundEffect">
            <summary>
            Return the <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> evaluated as having least impact onto the final audio output among all the non stopped <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>.
            </summary>
            <returns>An instance of <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> currently playing or paused, or null if no candidate</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.ForceSoundEffectInstanceUpdate">
            <summary>
            Force all the <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> to update them-self
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.musicActionRequests">
            <summary>
            The pending Sound Music requests
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.SubmitMusicActionRequest(SiliconStudio.Paradox.Audio.SoundMusicActionRequest)">
            <summary>
            Submit an new MusicAction request to the AudioEngine. It will effectively executed during the next AudioEngine.Update().
            </summary>
            <param name="request">The request to submit.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.currentMusic">
            <summary>
            The music that is currently playing or the last music that have been played.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.UpdateMusicImpl">
            <summary>
            This method process all the events from the MusicPlayer and the requests from the SoundMusics.
            <para>There is only a single instance MusicPlayer for several SoundMusic play requests, that why we need to change the player data.
            That is why we need one or more call to <see cref="M:SiliconStudio.Paradox.Audio.AudioEngine.Update"/> to change the current music.</para>
            <para>In order to avoid useless change of the MusicPlayer data, 
            we analyse the whole MusicActionRequest queue and drop all the requests that are followed by subsequent Play-Requests.</para>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.ProcessMusicActionRequests">
            <summary>
            In order to avoid problem that appeared (see TestMediaFoundation) when using MediaSession.SetTopology,
            we destroy and recreate the media session every time we change the music to play. 
            Before shutting down the MediaSession we need to receive the SessionClosed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.musicMediaEvents">
            <summary>
            The music MediaEvents that arrrived since last update.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.PlatformSpecificInit">
            <summary>
            This method is called during engine construction to initialize Windows.Desktop specific components.
            </summary>
            <remarks>Variables do not need to be locked here since there are no concurrent calls before the end of the construction.</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.streamAudioVolumeGuid">
            <summary>
            Guid to the StreamAudioVolume interface.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.mediaSession">
            <summary>
            The Media session used to play the SoundMusic.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.streamVolume">
            <summary>
            AudioStreamVolume interface object used to control the SoundMusic Volume.
            </summary>
            <remarks>
            <para>The SimpleAudioVolume interface can not be used here because it modifies the volume of the whole application (XAudio2 included).</para>
            <para>streamVolume is valid only when the media session topology is ready. streamVolume is set to null when not valid.</para>
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.mediaSource">
            <summary>
            The MediaSource used in the current topology. We need to keep a pointer on it to call shutdown when destroying to MediaSession.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.topology">
            <summary>
            The topology of the media session. Need to be disposed after the Session Closed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.mediaSessionCallback">
            <summary>
            The media session callback that process the event. Need to be disposed every time the Session is destroyed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngine.mediaInputByteStream">
            <summary>
            The ByteStream associated with .
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.CreateTopology(SharpDX.MediaFoundation.ByteStream,SharpDX.MediaFoundation.MediaSource@)">
            <summary>
            Create a topology to be played with a MediaSession from a filepath.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEngine.LoadNewMusic(SiliconStudio.Paradox.Audio.SoundMusic)">
            <summary>
            Load a new music into the media session. That is create a new session and a new topology and set the topology of the session.
            </summary>
            <param name="music"></param>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEngine.AudioSampleRate">
            <summary>
            The underlying sample rate of the audio system.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioEngine.State">
            <summary>
            The current state of the <see cref="T:SiliconStudio.Paradox.Audio.AudioEngine"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEngineState">
            <summary>
            Describe the possible states of the <see cref="T:SiliconStudio.Paradox.Audio.AudioEngine"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngineState.Running">
            <summary>
            The audio engine is currently running.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngineState.Paused">
            <summary>
            The audio engine is currently paused. Any calls to play will be dropped.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngineState.Invalidated">
            <summary>
            The audio engine is not currently usable due to missing audio hardware or unplugged audio output.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEngineState.Disposed">
            <summary>
            The audio engine is disposed. The current instance cannot be used to play or create sounds anymore.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioInitializationException">
            <summary>
            The exception that is thrown when audio engine failed to initialized.
            Most of the time is happens when no hardware is present, or when audio hardware is installed, but it is not enabled or where there is no output connected. 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.NoMicrophoneConnectedException">
            <summary>
            The exception that is thrown when <see cref="T:SiliconStudio.Paradox.Audio.Microphone"/> API calls are made on a disconnected microphone. 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioDeviceInvalidatedException">
            <summary>
            The exception that is thrown when the audio device became unusable through being unplugged or some other event.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioSystemInternalException">
            <summary>
            The exception that is thrown when an internal error happened in the Audio System. That is an error that is not due to the user behaviour.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioListener">
            <summary>
            Represents a 3D audio listener in the audio scene. 
            This object, used in combination with an <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>, can simulate 3D audio localization effects for a sound implemention the <see cref="T:SiliconStudio.Paradox.Audio.IPositionableSound"/> interface.
            For more details take a look at the <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> function.
            </summary>
            <seealso cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioListener.#ctor">
            <summary>
            Create a new instance of AudioListener
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioListener.Position">
            <summary>
            The position of the listener in the 3D world.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioListener.Velocity">
            <summary>
            The velocity of the listener in the 3D world. 
            </summary>
            <remarks>This is only used to calculate the doppler effect on the sound effect</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioListener.Forward">
            <summary>
            Gets or sets the forward orientation vector for this listener. This vector represents the orientation the listener is looking at.
            </summary>
            <remarks>
            <para>By default, this value is (0,0,1).</para>
            <para>The value provided will be normalized if it is not already.</para>
            <para>The values of the Forward and Up vectors must be orthonormal (at right angles to one another). 
            Behavior is undefined if these vectors are not orthonormal.</para>
            <para>Doppler and Matrix values between an <see name="AudioEmitter"/> and an <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> are effected by the listener orientation.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The value provided to the set accessor is (0,0,0) or <see cref="P:SiliconStudio.Paradox.Audio.AudioListener.Up"/>.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioListener.Up">
            <summary>
            Gets or sets the Up orientation vector for this listener. This vector up of the world for the listener.
            </summary>
            <remarks>
            <para>By default, this value is (0,1,0).</para>
            <para>The value provided will be normalized if it is not already.</para>
            <para>The values of the Forward and Up vectors must be orthonormal (at right angles to one another). 
            Behavior is undefined if these vectors are not orthonormal.</para>
            <para>Doppler and Matrix values between an <see name="AudioEmitter"/> and an <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> are effected by the listener orientation.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The value provided to the set accessor is (0,0,0).</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioDataEncoding">
            <summary>
            Enumeration describing the possible audio data encodings.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioDataEncoding.PCM_8Bits">
            <summary>
            Pulse Code Modulation encripted on 8 bits.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioDataEncoding.PCM_16Bits">
            <summary>
            Pulse Code Modulation encripted on 16 bits.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance">
            <summary>
            <para>A dynamic SoundEffectInstance.</para>
            <para>This class provides methods, properties and callbacks to enable SoundEffect wav data streaming and generation. 
            The user can choose its sound format when creating the <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/></para>.
            Then he can generate the audio data and submit it to the audio system.
            The event <see cref="E:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeeded"/> is called every time that sound need data.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundEffectInstance">
            <summary>
            Instance of a SoundEffect sound which can be independently localized and played.
            </summary>
            <remarks>
            <para>
            You can create a SoundEffectInstance by calling <see cref="M:SiliconStudio.Paradox.Audio.SoundEffect.CreateInstance"/>. 
            Initially, the SoundEffectInstance is created as stopped, but you can play it by calling <see cref="M:SiliconStudio.Paradox.Audio.SoundInstanceBase.Play"/>.
            You can modify the volume and the panning of the SoundEffectInstance by setting the <see cref="P:SiliconStudio.Paradox.Audio.SoundInstanceBase.Volume"/> and <see cref="P:SiliconStudio.Paradox.Audio.SoundEffectInstance.Pan"/> properties 
            or directly apply a localization to the sound by calling the <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> function.
            </para>
            <para>
            A SoundEffectInstance is invalidated when the corresponding <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> is Disposed.
            </para>
            </remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.IPositionableSound"/>"/&gt;
            <seealso cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundInstanceBase">
            <summary>
            Base class for sound that creates voices 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundBase">
            <summary>
            Base class for all the sounds and sound instances.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundBase.#ctor(SiliconStudio.Paradox.Audio.AudioEngine)">
            <summary>
            Create an instance of soundBase.
            </summary>
            <param name="engine">A valid AudioEngine</param>
            <exception cref="T:System.ArgumentNullException">The engine argument is null</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.IPlayableSound">
            <summary>
            Interface for a playable sound.
            A playable sound can loop (ref <see cref="P:SiliconStudio.Paradox.Audio.IPlayableSound.IsLooped"/>), be played (ref <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Play"/>), be paused (ref <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Pause"/>), be resumed (ref <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Play"/>), 
            be stopped (ref <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Stop"/>) and be attenuated (ref <see cref="P:SiliconStudio.Paradox.Audio.IPlayableSound.Volume"/>).
            To query the current state of a sound use the <see cref="P:SiliconStudio.Paradox.Audio.IPlayableSound.PlayState"/> property. 
            To stop a sound after its currently loop use <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.ExitLoop"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPlayableSound.Play">
            <summary>
            Start or resume playing the sound.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
            <remarks>A call to Play when the sound is already playing has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPlayableSound.Pause">
            <summary>
            Pause the sounds.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
            <remarks>A call to Pause when the sound is already paused or stopped has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPlayableSound.Stop">
            <summary>
            Stop playing the sound immediately and reset the sound to the beginning of the track.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
            <remarks>A call to Stop when the sound is already stopped has no effects</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPlayableSound.ExitLoop">
            <summary>
            Stop looping. That is, do not start over at the end of the current loop, continue to play until the end of the buffer data and then stop.
            </summary>
            <remarks>
            <para>A call to ExitLoop when the sound is Stopped or when the sound is not looping has no effects. 
            That is why a call to ExitLoop directly following a call to <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Play"/> may be ignored (short play latency). 
            For a correct behaviour wait that the sound actually started playing to call ExitLoop.</para>
            <para>ExitLoop does not modify the value of IsLooped.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IPlayableSound.PlayState">
            <summary>
            The current state of the sound. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IPlayableSound.IsLooped">
            <summary>
            Does the sound is automatically looping from beginning when it reaches the end.
            </summary>
            <remarks>If you want to make a sound play continuously until stopped, be sure to set IsLooped to true <bold>before</bold> you call <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.Play"/>.
            To quit a loop when playing, use <see cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.ExitLoop"/></remarks>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
            <exception cref="T:System.InvalidOperationException">IsLooped cannot be modified after the sound has started to play</exception>
            <seealso cref="M:SiliconStudio.Paradox.Audio.IPlayableSound.ExitLoop"/>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IPlayableSound.Volume">
            <summary>
            The global volume at which the sound is played.
            </summary>
            <remarks>Volume is ranging from 0.0f (silence) to 1.0f (full volume). Values beyond those limits are clamped.</remarks>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundInstanceBase.StopConcurrentInstances">
            <summary>
            Stops the sound instances in competition with this sound instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.IPositionableSound">
            <summary>
            Interface for 3D localizable sound.
            The interface currently supports only mono and stereo sounds (ref <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/>).
            The user can localize its sound with <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> by creating one <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> 
            and one <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> respectly corresponding to the source of the sound and the listener.
            The <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> function enable the user to change the distribution of sound between the left and right speakers.
            </summary>
            <remarks>Functions <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> and <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> cannot be used together. 
            A call to <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> will reset <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> to its default value and inverse.</remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)">
            <summary>
            Applies 3D positioning to the sound. 
            More precisely adjust the channel volumes and pitch of the sound, 
            such that the sound source seems to come from the <paramref name="emitter"/> to the <paramref name="listener"/>.
            </summary>
            <param name="listener">The sound listener of the scene</param>
            <param name="emitter">The emitter that correspond to this sound</param>
            <remarks>
            <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> can be used only on mono-sounds.
            <para>A call to <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> reset <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> to its default values.</para>
            <para>A call to <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/> does not modify the value of <see cref="P:SiliconStudio.Paradox.Audio.IPlayableSound.Volume"/>, 
            the effective volume of the sound is a combination of the two effects.</para>
            <para>
            The final resulting pitch depends on the listener and emitter relative velocity. 
            The final resulting channel volumes depend on the listener and emitter relative positions and the value of <see cref="P:SiliconStudio.Paradox.Audio.IPlayableSound.Volume"/>. 
            The intensity of the doppler and attenuation effects can be adjusted using the <see cref="P:SiliconStudio.Paradox.Audio.AudioEmitter.DopplerScale"/> and <see cref="P:SiliconStudio.Paradox.Audio.AudioEmitter.DistanceScale"/> properties. 
            </para>
            </remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.AudioListener"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Provided listener or emitter is null</exception>
            <exception cref="T:System.InvalidOperationException">The sound has more than one channels. 3D positioning can be applied only to mono-sounds.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IPositionableSound.Reset3D">
            <summary>
            Cancel the effect of possible previous calls to <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/>.
            </summary>
            <remarks>Do not revert <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> to its value before <see cref="M:SiliconStudio.Paradox.Audio.IPositionableSound.Apply3D(SiliconStudio.Paradox.Audio.AudioListener,SiliconStudio.Paradox.Audio.AudioEmitter)"/>.</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan">
            <summary>
            Set the sound balance between left and right speaker.
            </summary>
            <remarks>Panning is ranging from -1.0f (full left) to 1.0f (full right). 0.0f is centered. Values beyond this range are clamped. 
            Panning modifies the total energy of the signal (Pan == -1 =&gt; Energy = 1 + 0, Pan == 0 =&gt; Energy = 1 + 1, Pan == 0.5 =&gt; Energy = 1 + 0.5, ...) 
            <para>A call to <see cref="P:SiliconStudio.Paradox.Audio.IPositionableSound.Pan"/> cancels the effect of Apply3D.</para></remarks>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffectInstance.panChannelVolumes">
            <summary>
            Channel Volume multiplicative factors that come from the user panning.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffectInstance.localizationChannelVolumes">
            <summary>
            Channel Volume multiplicative factors that come from the 3D localization.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffectInstance.dopplerPitchFactor">
            <summary>
            Multiplicative factor to apply to the pitch that comes from the doppler effect.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeededEventNbOfBuffers">
            <summary>
            This constant represent the number of buffers under which the <see cref="E:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeeded"/> event should be thrown.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.waveFormat">
            <summary>
            The wave format of this dynamic sound effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.#ctor(SiliconStudio.Paradox.Audio.AudioEngine,System.Int32,SiliconStudio.Paradox.Audio.AudioChannels,SiliconStudio.Paradox.Audio.AudioDataEncoding)">
            <summary>
            Create a dynamic sound effect instance with the given sound properties.
            </summary>
            <param name="engine">The engine in which the dynamicSoundEffectInstance is created</param>
            <param name="sampleRate">Sample rate, in Hertz (Hz), of audio content. Must between 8000 Hz and 48000 Hz</param>
            <param name="channels">Number of channels in the audio data.</param>
            <param name="encoding">Encoding of a sound data sample</param>
            <returns>A new DynamicSoundEffectInstance instance ready to filled with data and then played</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">This exception is thrown for one of the following reason:
            <list type="bullet">
            <item>The value specified for sampleRate is less than 8000 Hz or greater than 48000 Hz. </item>
            <item>The value specified for channels is something other than mono or stereo. </item>
            <item>The value specified for data encoding is something other than 8 or 16 bits. </item>
            </list>
             </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/> is null.</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.totalNbOfInstances">
            <summary>
            This represent the total number of instances created since the beginning of the game.
            It is used the give a unique name to each Dynamic sound only.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])">
            <summary>
            Submits an audio whole buffer for playback.
            </summary>
            <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
            <remarks>
            The buffer must conform to the format alignment. For example, the buffer length must be aligned to the block alignment value for the audio format type. 
            For PCM audio format, the block alignment is calculated as BlockAlignment = BytesPerSample * AudioChannels. 
            DynamicSoundEffectInstance supports only PCM 8bits and 16-bit mono or stereo data. 
            <para>Submited buffer must not be modified before it finished to play.</para>
            <para>Scratches in the sound flow may appears if the submitted buffers are not big enough.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The exception thrown if SubmitBuffer is called after DynamicSoundEffectInstance is disposed.</exception>
            <exception cref="T:System.ArgumentException">
            The exception thrown when buffer is zero length, or does not satisfy format alignment restrictions. 
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Submits an audio buffer for playback. Playback begins at the specifed offset, and the byte count determines the size of the sample played. 
            </summary>
            <param name="buffer">Buffer that contains the audio data. The audio format must be PCM wave data.</param>
            <param name="offset">Offset, in bytes, to the starting position of the data.</param>
            <param name="byteCount">Amount, in bytes, of data sent.</param>
            <remarks>
            The buffer must conform to the format alignment. For example, the buffer length must be aligned to the block alignment value for the audio format type. 
            For PCM audio format, the block alignment is calculated as BlockAlignment = BytesPerSample * AudioChannels. 
            DynamicSoundEffectInstance supports only PCM 8bits and 16-bit mono or stereo data. 
            <para>Submited buffer must not be modified before it finished to play.</para>
            <para>Scratches in the sound flow may appears if the submitted buffers are not big enough.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The exception thrown if SubmitBuffer is called after DynamicSoundEffectInstance is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The exception thrown when <paramref name="buffer"/> is zero length, or <paramref name="byteCount"/> does not satisfy format alignment restrictions. 
            This exception also is thrown if offset is less than zero or is greater than or equal to the size of the buffer. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The exception thrown when <paramref name="byteCount"/>"/&gt; is less than or equal to zero, or if the sum of <paramref name="offset"/> and <paramref name="byteCount"/> exceeds the size of the buffer. 
            </exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.pendingBufferCount">
            <summary>
            Number of buffer waiting to be played from the user point of view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.internalPendingBufferCount">
            <summary>
            Number of buffer waiting to be played from the underlying implementation point of view.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.CheckAndThrowBufferNeededEvent">
            <summary>
            This method checks if the BufferNeeded event need to be thrown. 
            If it is the case, it invoques the methods associated to the event.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.numberOfInstances">
            <summary>
            The number of DynamicSoundEffectInstances.
            It is used to determine when to create or destroy the working thread.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.awakeWorkerThread">
            <summary>
            Event used to awake the worker thread when there is some work to perform.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.workerTask">
            <summary>
            A reference to the worker task.
            It is used to wait completion of the task before disposing the last instance of Dynamic sound.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.instancesNeedingBuffer">
            <summary>
            Queue of the instances that require a new buffer to be submitted. 
            It is used by the worker thread to determine which user callback to execute.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.CreateWorkerThread">
            <summary>
            Create the working thread that will execute the user code on event <see cref="E:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeeded"/> triggering. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.WorkerThread">
            <summary>
            The worker thread executing the user code on event <see cref="E:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeeded"/>.
            In current implementation the there is only one working thread for all the DynamicSoundEffectInstances.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.submittedBufferHandles">
            <summary>
            The queue of the handles to free as the buffers are consumed.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.PendingBufferCount">
            <summary>
            Returns the number of buffers that are waiting be to played by the audio system.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The exception thrown if PendingBufferCount is called after DynamicSoundEffectInstance is disposed.</exception>
        </member>
        <member name="E:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.BufferNeeded">
            <summary>
            Event that occurs when the sound instance is going to run out of audio data. 
            </summary>
            <remarks>
            More precisely, the event is thrown every time that:
            <list type="bullet">
            <item>the sound is playing and the number of buffers remaining to play is too low.</item>
            <item>the number of buffers remaining after a <see cref="M:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])"/> call is still not enough.</item>
            </list> 
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.IsLooped">
            <summary>
            Indicates whether the audio playback of the <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/> object is looped. 
            </summary>
            <remarks>A sound cannot be looped with a <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>. 
            So accessing the property always returns false, and setting the property to true always throws the <see cref="T:System.InvalidOperationException"/> exception.</remarks>
            <exception cref="T:System.InvalidOperationException">The exception that is thrown when IsLooped is set to true.</exception>
            <exception cref="T:System.ObjectDisposedException">The exception that is thrown if IsLooped is called after <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/> has been disposed. </exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance.SubBufferDataHandles">
            <summary>
            A list of all the data handles lock for one subBuffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.IRecorder">
            <summary>
            <para>Interface for an audio input recorder</para>
            <para></para>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.GetSampleDuration(System.Int32)">
            <summary>
            Returns the duration of audio playback based on the hypotetical given size of the buffer. 
            </summary>
            <param name="sizeInBytes">Size, in bytes, of the audio data of which we want to know the duration.</param>
            <returns><see cref="T:System.TimeSpan"/> object that represents the duration of the audio playback.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.GetSampleSizeInBytes(System.TimeSpan)">
            <summary>
            Returns the size of the byte array required to hold the specified duration of audio for this microphone object. 
            </summary>
            <param name="duration"><see cref="T:System.TimeSpan"/> object that contains the duration of the audio sample of which we want to know the size. </param>
            <returns>Size in bytes, of the audio buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.Start">
            <summary>
            Starts microphone audio capture. 
            </summary>
            <exception cref="T:SiliconStudio.Paradox.Audio.NoMicrophoneConnectedException">The microphone has been unplugged since the creation of the recorder instance</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.Stop">
            <summary>
            Stops microphone audio capture. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.GetData(System.Byte[])">
            <summary>
            Gets the latest recorded data from the microphone based on the audio capture buffer size.
            </summary>
            <param name="buffer">Buffer, in bytes, that will contain the captured audio data. The audio format is PCM wave data.</param>
            <returns>The buffer size, in bytes, of the audio data.</returns>
            <exception cref="T:System.ArgumentException">buffer is null, has zero length, or does not satisfy alignment requirements.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.IRecorder.GetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the latest captured audio data from the microphone based on the specified offset and byte count.
            </summary>
            <param name="buffer">Buffer, in bytes, that will contain the captured audio data. The audio format is PCM wave data.</param>
            <param name="offset">Offset, in bytes, to the desired starting position of the data.</param>
            <param name="count">Amount, in bytes, of desired audio data.</param>
            <returns>The buffer size, in bytes, of the audio data.</returns>
            <exception cref="T:System.ArgumentException">
            The exception thrown when the following arguments are invalid: 
            <list type="bullet">
            <item>buffer is null, has zero length, or does not satisfy alignment requirements.</item>
            <item>offset is less than zero, is greater than or equal to the size of the buffer, or does not satisfy alignment requirements. </item>
            <item>The sum of count and offset is greater than the size of the buffer, count is less than or equal to zero, or does not satisfy alignment requirements. </item>
            </list>
            </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IRecorder.BufferDuration">
            <summary>
            Gets or sets audio capture buffer duration. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IRecorder.BufferSize">
            <summary>
            Gets or sets audio capture buffer size in bytes. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IRecorder.SampleRate">
            <summary>
            Returns the sample rate in Hertz (Hz) at which the microphone is capturing audio data. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.IRecorder.State">
            <summary>
            Returns the recording state of the recorder object. 
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Audio.IRecorder.BufferReady">
            <summary>
            Event that occurs when the audio capture buffer is ready to processed. 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Microphone">
            <summary>
            Class implementing the IRecoder interface designed to capture microphone audio input. Refer to <see cref="T:SiliconStudio.Paradox.Audio.IRecorder"/> for more details.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Microphone.#ctor">
            <summary>
            Create a new instance of Microphone ready for recording.
            </summary>
            <exception cref="T:SiliconStudio.Paradox.Audio.NoMicrophoneConnectedException">No microphone is currently plugged.</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Paradox.Audio"/> namespace contains types to manage sound and music.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.RecorderState">
            <summary>
            Enumeration describing the possible Recording States.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.RecorderState.Started">
            <summary>
            The recorder is currently recording.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.RecorderState.Stopped">
            <summary>
            The recorder is currently stopped.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundEffect">
            <summary>
            This class provides a loaded sound resource which is localizable in the 3D scene. 
            <para>SoundEffects are usually short sounds that are localized and need to be played with very few latency. 
            Classical examples are gun shots, foot steps, etc... Sounds effects can be looped to seems longer.
            Its is not recommended to use SoundEffect to play long track as the memory required will be considerable.
            For that use please refer to the <see cref="T:SiliconStudio.Paradox.Audio.SoundMusic"/> class.</para>
            <para>You can then create multiple instances of that sound resource by calling <see cref="M:SiliconStudio.Paradox.Audio.SoundEffect.CreateInstance"/>.</para>
            </summary>
            <remarks>
            <para>A SoundEffect contains the audio data and metadata (such as wave data and data format) loaded from a sound file. 
            You can create multiple <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> objects, and play them play and localize them independently. 
            All these objects share the resources of that SoundEffect. 
            For convenience purposes a default <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> is automatically created and associated to each SoundEffect, 
            so that you can directly play them without having the need to create a first instance.</para>
            <para>
            You can create a SoundEffect by calling the static <see cref="M:SiliconStudio.Paradox.Audio.SoundEffect.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)"/> load function. 
            Currently only wav files are supported for soundEffects.
             </para>
            <para>
            The only limit to the number of loaded SoundEffect objects is memory. 
            A loaded SoundEffect will continue to hold its memory resources throughout its lifetime. 
            All <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> objects created from a SoundEffect share memory resources. 
            When a SoundEffect object is destroyed, all <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> objects previously created by that SoundEffect stop playing and become invalid.
            </para>
            <para>
            Disposing a SoundEffect object, stops playing all the children <see cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/> and then dispose them.
            </para>
            </remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundEffectInstance"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundMusic"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.IPositionableSound"/>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundEffect.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)">
            <summary>
            Create and Load a sound effect from an input wav stream.
            </summary>
            <param name="engine">Name of the audio engine in which to create the sound effect</param>
            <param name="stream">A stream corresponding to a wav file.</param>
            <returns>A new instance soundEffect ready to be played</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/> or <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The wave file or has more than 2 channels or is not encoded in 16bits.</exception>
            <exception cref="T:System.InvalidOperationException">The content of the stream does not correspond to a valid wave file.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory anymore to load the specified file in memory. </exception>
            <exception cref="T:System.ObjectDisposedException">The audio engine has already been disposed</exception>
            <remarks>Supported WAV files' audio format is the 16bits PCM format.</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffect.soundEffectCreationCount">
            <summary>
            The number of SoundEffect Created so far. Used only to give a unique name to the SoundEffect.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffect.intancesCreationCount">
            <summary>
            The number of Instances Created so far by this SoundEffect. Used only to give a unique name to the SoundEffectInstance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundEffect.CreateInstance">
            <summary>
            Create a new sound effect instance of the sound effect. 
            The audio data are shared between the instances so that useless memory copies is avoided. 
            Each instance that can be played and localized independently from others.
            </summary>
            <returns>A new sound instance</returns>
            <exception cref="T:System.ObjectDisposedException">The sound has already been disposed</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundEffect.Instances">
            <summary>
            Current instances of the SoundEffect.
            We need to keep track of them to stop and dispose them when the soundEffect is disposed.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundEffect.RegisterInstance(SiliconStudio.Paradox.Audio.SoundEffectInstance)">
            <summary>
            Register a new instance to the soundEffect.
            </summary>
            <param name="instance">new instance to register.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundEffect.StopAllInstances">
            <summary>
            Stop all registered instances of the <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundEffect.UnregisterInstance(SiliconStudio.Paradox.Audio.SoundEffectInstance)">
            <summary>
            Unregister a disposed Instance.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundMusic">
            <summary>
            This class provides a loaded sound resource which is playable but not localizable. 
            <para>
            SoundMusics are usually "long" sounds that need neither to be localized nor to be played with low latency. 
            Classical examples are background musics or explainations. SoundMusics are progressively streamed to minimize memory usage.
            The user can also reduce the assets global size using the MP3 file format to encode SoundMusic.
            If low latency or sound localization is required take a look at the <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> or <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/> classes.
            </para>
            </summary>
            <remarks>
            <para>Only one instance of SoundMusic can be played at a time. 
            If Play is called while another SoundMusic is playing that SoundMusic is <bold>Stopped</bold>.</para>
            <para>
            You can create a SoundMusics by calling the static <see cref="M:SiliconStudio.Paradox.Audio.SoundMusic.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)"/> load function. 
            Currently only mono and stereo wav and mp3 files are supported for SoundMusics.
             </para>
            </remarks>
            <seealso cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.IPlayableSound"/>
            <seealso cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.SoundMusic.Load(SiliconStudio.Paradox.Audio.AudioEngine,System.IO.Stream)">
            <summary>
            Create and Load a sound music from an input file.
            </summary>
            <param name="engine">The audio engine in which to load the soundMusic</param>
            <param name="stream">The stream.</param>
            <returns>A new instance of soundMusic ready to be played</returns>
            <exception cref="T:System.ArgumentNullException">engine
            or
            filename</exception>
            <exception cref="T:System.ObjectDisposedException">The AudioEngine in which to create the voice is disposed.</exception>
            <exception cref="T:System.ArgumentException">engine or stream</exception>
            <exception cref="T:System.ObjectDisposedException">The AudioEngine in which to create the voice is disposed.</exception>
            <exception cref="T:System.ArgumentNullException">File ' + filename + ' does not exist.</exception>
            <remarks>On all platform the wav format is supported.
            For compressed formats, it is the task of the build engine to automatically adapt the original files to the best hardware specific format.</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundMusic.soundMusicCreationCount">
            <summary>
            The number of SoundMusic Created so far. Used only to give a unique name to the SoundEffect.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.SoundPlayState">
            <summary>
            Current state (playing, paused, or stopped) of a sound implementing the <see cref="T:SiliconStudio.Paradox.Audio.IPlayableSound"/> interface.
            </summary>
            <seealso cref="T:SiliconStudio.Paradox.Audio.IPlayableSound"/>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundPlayState.Playing">
            <summary>
            The sound is currently being played.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundPlayState.Paused">
            <summary>
            The sound is currently paused.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.SoundPlayState.Stopped">
            <summary>
            The sound is currently stopped.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.ThreadSafeQueue`1">
            <summary>
            Thread safe queue.
            </summary>
            <remarks>Fields <see cref="P:SiliconStudio.Paradox.Audio.ThreadSafeQueue`1.InternalQueue"/> and <see cref="P:SiliconStudio.Paradox.Audio.ThreadSafeQueue`1.InternalLock"/> can be used to perform specific optimizations. 
            In this case it is the responsibility of the user to ensure the proper use of the Queue.</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.RiffChunk">
            <summary>
            A chunk of a Riff stream.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffChunk.#ctor(System.IO.Stream,SiliconStudio.Paradox.FourCC,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Audio.Wave.RiffChunk"/> class.
            </summary>
            <param name="stream">The stream holding this chunk</param>
            <param name="type">The type.</param>
            <param name="size">The size.</param>
            <param name="dataPosition">The data offset.</param>
            <param name="isList">if set to <c>true</c> [is list].</param>
            <param name="isHeader">if set to <c>true</c> [is header].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffChunk.GetData">
            <summary>
            Gets the raw data contained in this chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffChunk.GetDataAs``1">
            <summary>
            Gets structured data contained in this chunk.
            </summary>
            <typeparam name="T">The type of the data to return</typeparam>
            <returns>
            A structure filled with the chunk data
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffChunk.GetDataAsArray``1">
            <summary>
            Gets structured data contained in this chunk.
            </summary>
            <typeparam name="T">The type of the data to return</typeparam>
            <returns>A structure filled with the chunk data</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffChunk.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.Stream">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.Type">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.FourCC"/> of this chunk.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.Size">
            <summary>
            Gets the size of the data enbedded by this chunk.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.DataPosition">
            <summary>
            Gets the position of the data embedded by this chunk relative to the stream.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.IsList">
            <summary>
            Gets or sets a value indicating whether this instance is a list chunk.
            </summary>
            <value>
              <c>true</c> if this instance is list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffChunk.IsHeader">
            <summary>
            Gets a value indicating whether this instance is a header chunk.
            </summary>
            <value>
              <c>true</c> if this instance is a header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.RiffParser">
            <summary>
            Riff chunk enumerator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Audio.Wave.RiffParser"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.Ascend">
            <summary>
            Ascends to the outer chunk.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.Descend">
            <summary>
            Descends to the current chunk.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.GetAllChunks">
            <summary>
            Gets all chunks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.RiffParser.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffParser.ChunkStack">
            <summary>
            Gets the current stack of chunks.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.RiffParser.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
              </returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.SoundStream">
            <summary>
            Generic sound input stream supporting WAV (Pcm,Float), ADPCM sound file formats.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Audio.Wave.SoundStream"/> class.
            </summary>
            <param name="stream">The sound stream.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.Initialize(System.IO.Stream)">
            <summary>
            Initializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
              </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative.
              </exception>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.SoundStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.
              </exception>
              
            <exception cref="T:System.ArgumentNullException">
              <paramref name="buffer"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="offset"/> or <paramref name="count"/> is negative.
              </exception>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.Format">
            <summary>
            Gets the wave format of this instance.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.
              </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.
              </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.
              </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
              </returns>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.SoundStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
              </returns>
              
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
              </exception>
              
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
              </exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.#ctor">
            <summary>
            Creates a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.CreateCustomFormat(SiliconStudio.Paradox.Audio.Wave.WaveFormatEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a WaveFormat with custom members
            </summary>
            <param name="tag">The encoding</param>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
            <param name="averageBytesPerSecond">Average Bytes Per Second</param>
            <param name="blockAlign">Block Align</param>
            <param name="bitsPerSample">Bits Per Sample</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PCM format with the specified sample rate, bit depth and channels
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.CreateIeeeFloatWaveFormat(System.Int32,System.Int32)">
            <summary>
            Creates a new 32 bit IEEE floating point wave format
            </summary>
            <param name="sampleRate">sample rate</param>
            <param name="channels">number of channels</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.MarshalFrom(System.Byte[])">
            <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
            <param name="rawdata">Buffer to the WaveFormat rawdata</param>
            <returns>WaveFormat structure</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.MarshalFrom(System.IntPtr)">
            <summary>
            Helper function to retrieve a WaveFormat structure from a pointer
            </summary>
            <param name="pointer">Pointer to the WaveFormat rawdata</param>
            <returns>WaveFormat structure</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.MarshalToPtr(SiliconStudio.Paradox.Audio.Wave.WaveFormat)">
            <summary>
            Helper function to marshal WaveFormat to an IntPtr
            </summary>
            <param name="format">WaveFormat</param>
            <returns>IntPtr to WaveFormat structure (needs to be freed by callee)</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.#ctor(System.IO.BinaryReader)">
            <summary>
            Reads a new WaveFormat object from a stream
            </summary>
            <param name="br">A binary reader that wraps the stream</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.Encoding">
            <summary>
            Returns the encoding type used
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__Native.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.waveFormatTag">
            <summary>format type</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormat.__PcmNative.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm">
            <summary>
            WaveFormatAdpcm
            http://msdn.microsoft.com/en-us/library/microsoft.directx_sdk.xaudio2.adpcmwaveformat%28v=vs.85%29.aspx
            Additional documentation: http://icculus.org/SDL_sound/downloads/external_documentation/wavecomp.htm
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm.#ctor">
            <summary>
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new WaveFormatAdpcm for MicrosoftADPCM
            </summary>
            <param name="rate">The rate.</param>
            <param name="channels">The channels.</param>
            <param name="blockAlign">The block align. If 0, then 256 for [0, 11KHz], 512 for ]11KHz, 22Khz], 1024 for ]22Khz, +inf]</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm.SamplesPerBlock">
            <summary>
            Gets or sets the samples per block.
            </summary>
            <value>
            The samples per block.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm.Coefficients1">
            <summary>
            Gets or sets the coefficients.
            </summary>
            <value>
            The coefficients.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.Wave.WaveFormatAdpcm.Coefficients2">
            <summary>
            Gets or sets the coefficients.
            </summary>
            <value>
            The coefficients.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible">
            <summary>
            WaveFormatExtensible
            http://www.microsoft.com/whdc/device/audio/multichaud.mspx
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible.GuidSubFormat">
            <summary>
            Guid of the subformat.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible.ChannelMask">
            <summary>
            Speaker configuration
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible.#ctor">
            <summary>
            Parameterless constructor for marshalling
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new WaveFormatExtensible for PCM or IEEE
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.Wave.WaveFormatExtensible.ToString">
            <summary>
            String representation
            </summary>
        </member>
    </members>
</doc>
