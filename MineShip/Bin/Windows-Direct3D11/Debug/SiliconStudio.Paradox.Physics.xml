<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Physics</name>
    </assembly>
    <members>
        <member name="M:SiliconStudio.Paradox.Physics.ColliderShape.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShape.LocalOffset">
            <summary>
            The local offset
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShape.LocalRotation">
            <summary>
            The local rotation
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ColliderShape.UpdateLocalTransformations">
            <summary>
            Updates the local transformations, required if you change LocalOffset and/or LocalRotation.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ColliderShape.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ColliderShape.PositiveCenterMatrix">
            <summary>
            Gets the positive center matrix.
            </summary>
            <value>
            The positive center matrix.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ColliderShape.NegativeCenterMatrix">
            <summary>
            Gets the negative center matrix.
            </summary>
            <value>
            The negative center matrix.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ColliderShape.Scaling">
            <summary>
            Gets or sets the scaling.
            Make sure that you manually created and assigned an exclusive ColliderShape to the Collider otherwise since the engine shares shapes among many Colliders, all the colliders will be scaled.
            Please note that this scaling has no relation to the TransformationComponent scaling.
            Not all the shapes support this feature properly and at the moment the debug primitives don't update scaling. //todo
            </summary>
            <value>
            The scaling.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ColliderShape.Is2D">
            <summary>
            Gets a value indicating whether the collider shape is 2D.
            </summary>
            <value>
              <c>true</c> if [is2 d]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Box2DColliderShape.#ctor(SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.Box2DColliderShape"/> class.
            </summary>
            <param name="halfExtents">The half extents.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Box2DColliderShape.HalfExtent">
            <summary>
            Gets the half extent.
            </summary>
            <value>
            The half extent.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.BoxColliderShape.#ctor(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.BoxColliderShape"/> class.
            </summary>
            <param name="halfExtents">The half extents.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.BoxColliderShape.HalfExtents">
            <summary>
            Gets the half extents.
            </summary>
            <value>
            The half extents.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CapsuleColliderShape.#ctor(System.Boolean,System.Single,System.Single,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.CapsuleColliderShape"/> class.
            </summary>
            <param name="is2D">if set to <c>true</c> [is2 d].</param>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="upAxis">Up axis.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CapsuleColliderShape.Radius">
            <summary>
            Gets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CapsuleColliderShape.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CapsuleColliderShape.UpAxis">
            <summary>
            Gets up axis.
            </summary>
            <value>
            Up axis.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Collider.#ctor(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.Collider"/> class.
            </summary>
            <param name="collider">The collider.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Collider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Collider.Activate(System.Boolean)">
            <summary>
            Attempts to awake the collider.
            </summary>
            <param name="forceActivation">if set to <c>true</c> [force activation].</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Physics.Collider"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.CanSleep">
            <summary>
            Gets or sets a value indicating whether this instance can sleep.
            </summary>
            <value>
              <c>true</c> if this instance can sleep; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.IsActive">
            <summary>
            Gets a value indicating whether this instance is active (awake).
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.Restitution">
            <summary>
            Gets or sets the restitution.
            </summary>
            <value>
            The restitution.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.Friction">
            <summary>
            Gets or sets the friction.
            </summary>
            <value>
            The friction.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.RollingFriction">
            <summary>
            Gets or sets the rolling friction.
            </summary>
            <value>
            The rolling friction.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.CcdMotionThreshold">
            <summary>
            Gets or sets the CCD motion threshold.
            </summary>
            <value>
            The CCD motion threshold.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.CcdSweptSphereRadius">
            <summary>
            Gets or sets the CCD swept sphere radius.
            </summary>
            <value>
            The CCD swept sphere radius.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.IsTrigger">
            <summary>
            Gets or sets a value indicating whether this instance is a trigger.
            </summary>
            <value>
            <c>true</c> if this instance is trigger; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.PhysicsWorldTransform">
            <summary>
            Gets the physics world transform.
            </summary>
            <value>
            The physics world transform.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.ColliderShape">
            <summary>
            Gets the collider shape.
            </summary>
            <value>
            The collider shape.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.ContactsAlwaysValid">
            <summary>
            Gets or sets a value indicating whether the Contacts list needs to be always valid.
            This is used to improve performance in the case the list is not needed.
            </summary>
            <value>
              <c>true</c> if [contacts always valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:SiliconStudio.Paradox.Physics.Collider.OnFirstContactBegin">
            <summary>
            Occurs when the first contant with a collider begins.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Physics.Collider.OnContactBegin">
            <summary>
            Occurs when a contact begins (there could be multiple contacts and contact points).
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Physics.Collider.OnContactChange">
            <summary>
            Occurs when a contact changed.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Physics.Collider.OnLastContactEnd">
            <summary>
            Occurs when the last contact with a collider happened.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Physics.Collider.OnContactEnd">
            <summary>
            Occurs when a contact ended.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.Contacts">
            <summary>
            Gets the contacts.
            </summary>
            <value>
            The contacts.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Collider.EntityObject">
            <summary>
            Gets or sets the entity object. 
            Should always cast this as an Entity
            </summary>
            <value>
            The entity object.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Character.#ctor(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.Character"/> class.
            </summary>
            <param name="collider">The collider.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Character.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Character.Jump">
            <summary>
            Jumps this instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Character.Teleport(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Teleports the specified target position.
            </summary>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Character.Move(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Moves the specified movement.
            </summary>
            <param name="movement">The movement.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.FallSpeed">
            <summary>
            Gets or sets the fall speed.
            </summary>
            <value>
            The fall speed.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.MaxSlope">
            <summary>
            Gets or sets the maximum slope.
            </summary>
            <value>
            The maximum slope.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.JumpSpeed">
            <summary>
            Gets or sets the jump speed.
            </summary>
            <value>
            The jump speed.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.UpAxis">
            <summary>
            Gets or sets up axis.
            </summary>
            <value>
            Up axis.
            </value>
            <exception cref="T:System.Exception">Invalid Up Axis.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.Gravity">
            <summary>
            Gets or sets the gravity.
            </summary>
            <value>
            The gravity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Character.IsGrounded">
            <summary>
            Gets a value indicating whether this instance is on the ground.
            </summary>
            <value>
            <c>true</c> if this instance is grounded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CompoundColliderShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.CompoundColliderShape"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CompoundColliderShape.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CompoundColliderShape.AddChildShape(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Adds a child shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CompoundColliderShape.RemoveChildShape(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Removes a child shape.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CompoundColliderShape.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Physics.ColliderShape"/> with the specified i.
            </summary>
            <value>
            The <see cref="T:SiliconStudio.Paradox.Physics.ColliderShape"/>.
            </value>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CompoundColliderShape.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Constraint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Constraint.RigidBodyA">
            <summary>
            Gets the rigid body a.
            </summary>
            <value>
            The rigid body a.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Constraint.RigidBodyB">
            <summary>
            Gets the rigid body b.
            </summary>
            <value>
            The rigid body b.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Constraint.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Physics.Constraint"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Constraint.BreakingImpulseThreshold">
            <summary>
            Gets or sets the breaking impulse threshold.
            </summary>
            <value>
            The breaking impulse threshold.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Constraint.AppliedImpulse">
            <summary>
            Gets the applied impulse.
            </summary>
            <value>
            The applied impulse.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetFrames(SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
            <param name="relaxationFactor">The relaxation factor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetAngularOnly(System.Boolean)">
            <summary>
            Sets the angular only.
            </summary>
            <param name="angularOnly">if set to <c>true</c> [angular only].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetDamping(System.Single)">
            <summary>
            Sets the damping.
            </summary>
            <param name="damping">The damping.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.EnableMotor(System.Boolean)">
            <summary>
            Enables the motor.
            </summary>
            <param name="b">if set to <c>true</c> [b].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetMaxMotorImpulse(System.Single)">
            <summary>
            Sets the maximum motor impulse.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetMaxMotorImpulseNormalized(System.Single)">
            <summary>
            Sets the maximum motor impulse normalized.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetMotorTarget(SiliconStudio.Core.Mathematics.Quaternion)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SetMotorTargetInConstraintSpace(SiliconStudio.Core.Mathematics.Quaternion)">
            <summary>
            Sets the motor target in constraint space.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.FixThresh">
            <summary>
            Gets or sets the fix thresh.
            </summary>
            <value>
            The fix thresh.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SwingSpan1">
            <summary>
            Gets the swing span1.
            </summary>
            <value>
            The swing span1.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SwingSpan2">
            <summary>
            Gets the swing span2.
            </summary>
            <value>
            The swing span2.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.TwistAngle">
            <summary>
            Gets the twist angle.
            </summary>
            <value>
            The twist angle.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.TwistLimitSign">
            <summary>
            Gets the twist limit sign.
            </summary>
            <value>
            The twist limit sign.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.TwistSpan">
            <summary>
            Gets the twist span.
            </summary>
            <value>
            The twist span.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.IsPastSwingLimit">
            <summary>
            Gets a value indicating whether this instance is past swing limit.
            </summary>
            <value>
            <c>true</c> if this instance is past swing limit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SolveSwingLimit">
            <summary>
            Gets the solve swing limit.
            </summary>
            <value>
            The solve swing limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.ConeTwistConstraint.SolveTwistLimit">
            <summary>
            Gets the solve twist limit.
            </summary>
            <value>
            The solve twist limit.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.CylinderColliderShape.#ctor(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.CylinderColliderShape"/> class.
            </summary>
            <param name="halfExtents">The half extents.</param>
            <param name="upAxis">Up axis.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CylinderColliderShape.HalfExtents">
            <summary>
            Gets the half extents.
            </summary>
            <value>
            The half extents.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.CylinderColliderShape.UpAxis">
            <summary>
            Gets up axis.
            </summary>
            <value>
            Up axis.
            </value>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.PhysicsEngine.DebugEffect">
            <summary>
            The debug effect, populate this field in the case of debug rendering
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateDebugPrimitives">
            <summary>
            Set to true if you want the engine to create the debug primitives
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.PhysicsEngine.RenderDebugPrimitives">
            <summary>
             Set to true if you want the engine to render the debug primitives
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.PhysicsEngine.DisableSimulation">
            <summary>
            Totally disable the simulation if set to true
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.Initialize(SiliconStudio.Paradox.Physics.PhysicsEngineFlags)">
            <summary>
            Initializes the Physics engine using the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <exception cref="T:System.NotImplementedException">SoftBody processing is not yet available</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateCollider(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Creates the collider.
            </summary>
            <param name="shape">The shape.</param>
            <param name="initialPosition">The initial position.</param>
            <param name="initialRotation">The initial rotation.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateRigidBody(SiliconStudio.Paradox.Physics.ColliderShape)">
            <summary>
            Creates the rigid body.
            </summary>
            <param name="collider">The collider.</param>
            <param name="getWorldTransformCallback"></param>
            <param name="setWorldTransformCallback"></param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateCharacter(SiliconStudio.Paradox.Physics.ColliderShape,System.Single)">
            <summary>
            Creates the character.
            </summary>
            <param name="collider">The collider.</param>
            <param name="initialPosition">The initial position.</param>
            <param name="initialRotation">The initial rotation.</param>
            <param name="stepHeight">Height of the step.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddCollider(SiliconStudio.Paradox.Physics.Collider)">
            <summary>
            Adds the collider to the engine processing pipeline.
            </summary>
            <param name="collider">The collider.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddCollider(SiliconStudio.Paradox.Physics.Collider,SiliconStudio.Paradox.Physics.CollisionFilterGroups,SiliconStudio.Paradox.Physics.CollisionFilterGroups)">
            <summary>
            Adds the collider to the engine processing pipeline.
            </summary>
            <param name="collider">The collider.</param>
            <param name="group">The group.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.RemoveCollider(SiliconStudio.Paradox.Physics.Collider)">
            <summary>
            Removes the collider from the engine processing pipeline.
            </summary>
            <param name="collider">The collider.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddRigidBody(SiliconStudio.Paradox.Physics.RigidBody)">
            <summary>
            Adds the rigid body to the engine processing pipeline.
            </summary>
            <param name="rigidBody">The rigid body.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddRigidBody(SiliconStudio.Paradox.Physics.RigidBody,SiliconStudio.Paradox.Physics.CollisionFilterGroups,SiliconStudio.Paradox.Physics.CollisionFilterGroups)">
            <summary>
            Adds the rigid body to the engine processing pipeline.
            </summary>
            <param name="rigidBody">The rigid body.</param>
            <param name="group">The group.</param>
            <param name="mask">The mask.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.RemoveRigidBody(SiliconStudio.Paradox.Physics.RigidBody)">
            <summary>
            Removes the rigid body from the engine processing pipeline.
            </summary>
            <param name="rigidBody">The rigid body.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddCharacter(SiliconStudio.Paradox.Physics.Character)">
            <summary>
            Adds the character to the engine processing pipeline.
            </summary>
            <param name="character">The character.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddCharacter(SiliconStudio.Paradox.Physics.Character,SiliconStudio.Paradox.Physics.CollisionFilterGroups,SiliconStudio.Paradox.Physics.CollisionFilterGroups)">
            <summary>
            Adds the character to the engine processing pipeline.
            </summary>
            <param name="character">The character.</param>
            <param name="group">The group.</param>
            <param name="mask">The mask.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.RemoveCharacter(SiliconStudio.Paradox.Physics.Character)">
            <summary>
            Removes the character from the engine processing pipeline.
            </summary>
            <param name="character">The character.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateConstraint(SiliconStudio.Paradox.Physics.ConstraintTypes,SiliconStudio.Paradox.Physics.RigidBody,SiliconStudio.Core.Mathematics.Matrix,System.Boolean)">
            <summary>
            Creates the constraint.
            </summary>
            <param name="type">The type.</param>
            <param name="rigidBodyA">The rigid body a.</param>
            <param name="frameA">The frame a.</param>
            <param name="useReferenceFrameA">if set to <c>true</c> [use reference frame a].</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Both RigidBodies must be valid
            or
            A Gear constraint always needs two rigidbodies to be created.
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.CreateConstraint(SiliconStudio.Paradox.Physics.ConstraintTypes,SiliconStudio.Paradox.Physics.RigidBody,SiliconStudio.Paradox.Physics.RigidBody,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix,System.Boolean)">
            <summary>
            Creates the constraint.
            </summary>
            <param name="type">The type.</param>
            <param name="rigidBodyA">The rigid body a.</param>
            <param name="rigidBodyB">The rigid body b.</param>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
            <param name="useReferenceFrameA">if set to <c>true</c> [use reference frame a].</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Both RigidBodies must be valid
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddConstraint(SiliconStudio.Paradox.Physics.Constraint)">
            <summary>
            Adds the constraint to the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.AddConstraint(SiliconStudio.Paradox.Physics.Constraint,System.Boolean)">
            <summary>
            Adds the constraint to the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <param name="disableCollisionsBetweenLinkedBodies">if set to <c>true</c> [disable collisions between linked bodies].</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.RemoveConstraint(SiliconStudio.Paradox.Physics.Constraint)">
            <summary>
            Removes the constraint from the engine processing pipeline.
            </summary>
            <param name="constraint">The constraint.</param>
            <exception cref="T:System.Exception">Cannot perform this action when the physics engine is set to CollisionsOnly</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.Raycast(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Raycasts and stops at the first hit.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.RaycastPenetrating(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Raycasts penetrating any shape the ray encounters.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.ShapeSweep(SiliconStudio.Paradox.Physics.ColliderShape,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Pefrorms a sweep test using a collider shape and stops at the first hit
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.PhysicsEngine.ShapeSweepPenetrating(SiliconStudio.Paradox.Physics.ColliderShape,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Pefrorms a sweep test using a collider shape and never stops until "to"
            </summary>
            <param name="shape">The shape.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <exception cref="T:System.Exception">This kind of shape cannot be used for a ShapeSweep.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.PhysicsEngine.Initialized">
            <summary>
            Gets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Physics.PhysicsEngine"/> is initialized.
            </summary>
            <value>
              <c>true</c> if initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.PhysicsEngine.Gravity">
            <summary>
            Gets or sets the gravity.
            </summary>
            <value>
            The gravity.
            </value>
            <exception cref="T:System.Exception">
            Cannot perform this action when the physics engine is set to CollisionsOnly
            or
            Cannot perform this action when the physics engine is set to CollisionsOnly
            </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.GearConstraint.AxisA">
            <summary>
            Gets or sets the axis a.
            </summary>
            <value>
            The axis a.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.GearConstraint.AxisB">
            <summary>
            Gets or sets the axis b.
            </summary>
            <value>
            The axis b.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.GearConstraint.Ratio">
            <summary>
            Gets or sets the ratio.
            </summary>
            <value>
            The ratio.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.Generic6DoFConstraint"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.SetFrames(SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.SetLimit(System.Int32,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="axis">The axis.</param>
            <param name="lo">The lo.</param>
            <param name="hi">The hi.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.AngularLowerLimit">
            <summary>
            Gets or sets the angular lower limit.
            </summary>
            <value>
            The angular lower limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.AngularUpperLimit">
            <summary>
            Gets or sets the angular upper limit.
            </summary>
            <value>
            The angular upper limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.LinearLowerLimit">
            <summary>
            Gets or sets the linear lower limit.
            </summary>
            <value>
            The linear lower limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.LinearUpperLimit">
            <summary>
            Gets or sets the linear upper limit.
            </summary>
            <value>
            The linear upper limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.TranslationalLimitMotor">
            <summary>
            Gets the translational limit motor.
            </summary>
            <value>
            The translational limit motor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Generic6DoFConstraint.RotationalLimitMotor">
            <summary>
            Gets the rotational limit motor.
            </summary>
            <value>
            The rotational limit motor.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFSpringConstraint.EnableSpring(System.Int32,System.Boolean)">
            <summary>
            Enables the spring.
            </summary>
            <param name="index">The index.</param>
            <param name="onOff">if set to <c>true</c> [on off].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFSpringConstraint.SetDamping(System.Int32,System.Single)">
            <summary>
            Sets the damping.
            </summary>
            <param name="index">The index.</param>
            <param name="damping">The damping.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFSpringConstraint.SetEquilibriumPoint(System.Int32,System.Single)">
            <summary>
            Sets the equilibrium point.
            </summary>
            <param name="index">The index.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.Generic6DoFSpringConstraint.SetStiffness(System.Int32,System.Single)">
            <summary>
            Sets the stiffness.
            </summary>
            <param name="index">The index.</param>
            <param name="stiffness">The stiffness.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetFrames(SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetLimit(System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
            <param name="relaxationFactor">The relaxation factor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.EnableAngularMotor(System.Boolean,System.Single,System.Single)">
            <summary>
            Enables the angular motor.
            </summary>
            <param name="enableMotor">if set to <c>true</c> [enable motor].</param>
            <param name="targetVelocity">The target velocity.</param>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.EnableMotor(System.Boolean)">
            <summary>
            Enables the motor.
            </summary>
            <param name="enableMotor">if set to <c>true</c> [enable motor].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetMotorTarget(System.Single,System.Single)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="targetAngle">The target angle.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.HingeConstraint.SetMotorTarget(SiliconStudio.Core.Mathematics.Quaternion,System.Single)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="qAinB">The q ain b.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.AngularOnly">
            <summary>
            Gets or sets a value indicating whether [angular only].
            </summary>
            <value>
              <c>true</c> if [angular only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.HingeAngle">
            <summary>
            Gets the hinge angle.
            </summary>
            <value>
            The hinge angle.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.MaxMotorImpulse">
            <summary>
            Gets or sets the maximum motor impulse.
            </summary>
            <value>
            The maximum motor impulse.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.MotorTargetVelocity">
            <summary>
            Gets the motor target velocity.
            </summary>
            <value>
            The motor target velocity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.SolveLimit">
            <summary>
            Gets the solve limit.
            </summary>
            <value>
            The solve limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.LowerLimit">
            <summary>
            Gets the lower limit.
            </summary>
            <value>
            The lower limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.UpperLimit">
            <summary>
            Gets the upper limit.
            </summary>
            <value>
            The upper limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.HingeConstraint.LimitSign">
            <summary>
            Gets the limit sign.
            </summary>
            <value>
            The limit sign.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Point2PointConstraint.PivotInA">
            <summary>
            Gets or sets the pivot in a.
            </summary>
            <value>
            The pivot in a.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Point2PointConstraint.PivotInB">
            <summary>
            Gets or sets the pivot in b.
            </summary>
            <value>
            The pivot in b.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Point2PointConstraint.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Point2PointConstraint.ImpulseClamp">
            <summary>
            Gets or sets the impulse clamp.
            </summary>
            <value>
            The impulse clamp.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.Point2PointConstraint.Tau">
            <summary>
            Gets or sets the tau.
            </summary>
            <value>
            The tau.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyImpulse(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="impulse">The impulse.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyImpulse(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="impulse">The impulse.</param>
            <param name="localOffset">The local offset.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyForce(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the force.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyForce(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the force.
            </summary>
            <param name="force">The force.</param>
            <param name="localOffset">The local offset.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyTorque(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the torque.
            </summary>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RigidBody.ApplyTorqueImpulse(SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Applies the torque impulse.
            </summary>
            <param name="torque">The torque.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>
            The angular damping.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>
            The linear damping.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.Gravity">
            <summary>
            Gets or sets the gravity for this single rigid body overriding the engine.
            </summary>
            <value>
            The gravity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.TotalTorque">
            <summary>
            Gets the total torque.
            </summary>
            <value>
            The total torque.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.AngularVelocity">
            <summary>
            Gets or sets the angular velocity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.TotalForce">
            <summary>
            Gets the total force.
            </summary>
            <value>
            The total force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.AngularFactor">
            <summary>
            Gets or sets the angular factor.
            </summary>
            <value>
            The angular factor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.LinearFactor">
            <summary>
            Gets or sets the linear factor.
            </summary>
            <value>
            The linear factor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RigidBody.LinkedConstraints">
            <summary>
            Gets the linked constraints.
            </summary>
            <value>
            The linked constraints.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RotationalLimitMotor.#ctor(BulletSharp.RotationalLimitMotor)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.RotationalLimitMotor"/> class.
            </summary>
            <param name="motor">The motor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.RotationalLimitMotor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.AccumulatedImpulse">
            <summary>
            Gets or sets the accumulated impulse.
            </summary>
            <value>
            The accumulated impulse.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.Bounce">
            <summary>
            Gets or sets the bounce.
            </summary>
            <value>
            The bounce.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.CurrentLimit">
            <summary>
            Gets or sets the current limit.
            </summary>
            <value>
            The current limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.CurrentLimitError">
            <summary>
            Gets or sets the current limit error.
            </summary>
            <value>
            The current limit error.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.CurrentPosition">
            <summary>
            Gets or sets the current position.
            </summary>
            <value>
            The current position.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.EnableMotor">
            <summary>
            Gets or sets a value indicating whether to enable the motor.
            </summary>
            <value>
              <c>true</c> if the motor is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.HiLimit">
            <summary>
            Gets or sets the hi limit.
            </summary>
            <value>
            The hi limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.IsLimited">
            <summary>
            Gets a value indicating whether this instance is limited.
            </summary>
            <value>
            <c>true</c> if this instance is limited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.LimitSoftness">
            <summary>
            Gets or sets the limit softness.
            </summary>
            <value>
            The limit softness.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.LoLimit">
            <summary>
            Gets or sets the lo limit.
            </summary>
            <value>
            The lo limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.MaxLimitForce">
            <summary>
            Gets or sets the maximum limit force.
            </summary>
            <value>
            The maximum limit force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor force.
            </summary>
            <value>
            The maximum motor force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.NormalCFM">
            <summary>
            Gets or sets the normal CFM.
            </summary>
            <value>
            The normal CFM.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.StopCFM">
            <summary>
            Gets or sets the stop CFM.
            </summary>
            <value>
            The stop CFM.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.StopERP">
            <summary>
            Gets or sets the stop erp.
            </summary>
            <value>
            The stop erp.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.RotationalLimitMotor.TargetVelocity">
            <summary>
            Gets or sets the target velocity.
            </summary>
            <value>
            The target velocity.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.SliderConstraint.SetFrames(SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>
            Sets the frames.
            </summary>
            <param name="frameA">The frame a.</param>
            <param name="frameB">The frame b.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.UpperLinearLimit">
            <summary>
            Gets or sets the upper linear limit.
            </summary>
            <value>
            The upper linear limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.LowerLinearLimit">
            <summary>
            Gets or sets the lower linear limit.
            </summary>
            <value>
            The lower linear limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.UpperAngularLimit">
            <summary>
            Gets or sets the upper angular limit.
            </summary>
            <value>
            The upper angular limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.LowerAngularLimit">
            <summary>
            Gets or sets the lower angular limit.
            </summary>
            <value>
            The lower angular limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.AngularDepth">
            <summary>
            Gets the angular depth.
            </summary>
            <value>
            The angular depth.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.AngularPosition">
            <summary>
            Gets the angular position.
            </summary>
            <value>
            The angular position.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingDirAngular">
            <summary>
            Gets or sets the damping dir angular.
            </summary>
            <value>
            The damping dir angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingDirLinear">
            <summary>
            Gets or sets the damping dir linear.
            </summary>
            <value>
            The damping dir linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingLimAngular">
            <summary>
            Gets or sets the damping lim angular.
            </summary>
            <value>
            The damping lim angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingLimLinear">
            <summary>
            Gets or sets the damping lim linear.
            </summary>
            <value>
            The damping lim linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingOrthoAngular">
            <summary>
            Gets or sets the damping ortho angular.
            </summary>
            <value>
            The damping ortho angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.DampingOrthoLinear">
            <summary>
            Gets or sets the damping ortho linear.
            </summary>
            <value>
            The damping ortho linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.LinearDepth">
            <summary>
            Gets the linear depth.
            </summary>
            <value>
            The linear depth.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.LinearPosition">
            <summary>
            Gets the linear position.
            </summary>
            <value>
            The linear position.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.MaxAngMotorForce">
            <summary>
            Gets or sets the maximum ang motor force.
            </summary>
            <value>
            The maximum ang motor force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.MaxLinearMotorForce">
            <summary>
            Gets or sets the maximum linear motor force.
            </summary>
            <value>
            The maximum linear motor force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.PoweredAngularMotor">
            <summary>
            Gets or sets a value indicating whether [powered angular motor].
            </summary>
            <value>
              <c>true</c> if [powered angular motor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.PoweredLinearMotor">
            <summary>
            Gets or sets a value indicating whether [powered linear motor].
            </summary>
            <value>
              <c>true</c> if [powered linear motor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionDirAngular">
            <summary>
            Gets or sets the restitution dir angular.
            </summary>
            <value>
            The restitution dir angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionDirLinear">
            <summary>
            Gets or sets the restitution dir linear.
            </summary>
            <value>
            The restitution dir linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionLimAngular">
            <summary>
            Gets or sets the restitution lim angular.
            </summary>
            <value>
            The restitution lim angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionLimLinear">
            <summary>
            Gets or sets the restitution lim linear.
            </summary>
            <value>
            The restitution lim linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionOrthoAngular">
            <summary>
            Gets or sets the restitution ortho angular.
            </summary>
            <value>
            The restitution ortho angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.RestitutionOrthoLinear">
            <summary>
            Gets or sets the restitution ortho linear.
            </summary>
            <value>
            The restitution ortho linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessDirAngular">
            <summary>
            Gets or sets the softness dir angular.
            </summary>
            <value>
            The softness dir angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessDirLinear">
            <summary>
            Gets or sets the softness dir linear.
            </summary>
            <value>
            The softness dir linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessLimAngular">
            <summary>
            Gets or sets the softness lim angular.
            </summary>
            <value>
            The softness lim angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessLimLinear">
            <summary>
            Gets or sets the softness lim linear.
            </summary>
            <value>
            The softness lim linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessOrthoAngular">
            <summary>
            Gets or sets the softness ortho angular.
            </summary>
            <value>
            The softness ortho angular.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SoftnessOrthoLinear">
            <summary>
            Gets or sets the softness ortho linear.
            </summary>
            <value>
            The softness ortho linear.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SolveAngularLimit">
            <summary>
            Gets a value indicating whether [solve angular limit].
            </summary>
            <value>
              <c>true</c> if [solve angular limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.SolveLinearLimit">
            <summary>
            Gets a value indicating whether [solve linear limit].
            </summary>
            <value>
              <c>true</c> if [solve linear limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.TargetAngularMotorVelocity">
            <summary>
            Gets or sets the target angular motor velocity.
            </summary>
            <value>
            The target angular motor velocity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SliderConstraint.TargetLinearMotorVelocity">
            <summary>
            Gets or sets the target linear motor velocity.
            </summary>
            <value>
            The target linear motor velocity.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.SphereColliderShape.#ctor(System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.SphereColliderShape"/> class.
            </summary>
            <param name="is2D">if set to <c>true</c> [is2 d].</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.SphereColliderShape.Radius">
            <summary>
            Gets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.StaticPlaneColliderShape.#ctor(SiliconStudio.Core.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.StaticPlaneColliderShape"/> class.
            A static plane that is solid to infinity on one side. 
            Several of these can be used to confine a convex space in a manner that completely prevents tunneling to the outside. 
            The plane itself is specified with a normal and distance as is standard in mathematics. 
            </summary>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.StaticPlaneColliderShape.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>
            The normal.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.StaticPlaneColliderShape.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.#ctor(BulletSharp.TranslationalLimitMotor)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Physics.TranslationalLimitMotor"/> class.
            </summary>
            <param name="motor">The motor.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.AccumulatedImpulse">
            <summary>
            Gets or sets the accumulated impulse.
            </summary>
            <value>
            The accumulated impulse.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.CurrentLimitError">
            <summary>
            Gets or sets the current limit error.
            </summary>
            <value>
            The current limit error.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.CurrentLinearDiff">
            <summary>
            Gets or sets the current linear difference.
            </summary>
            <value>
            The current linear difference.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>
            The damping.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.LimitSoftness">
            <summary>
            Gets or sets the limit softness.
            </summary>
            <value>
            The limit softness.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.LowerLimit">
            <summary>
            Gets or sets the lower limit.
            </summary>
            <value>
            The lower limit.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor force.
            </summary>
            <value>
            The maximum motor force.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.NormalCFM">
            <summary>
            Gets or sets the normal CFM.
            </summary>
            <value>
            The normal CFM.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.Restitution">
            <summary>
            Gets or sets the restitution.
            </summary>
            <value>
            The restitution.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.StopCFM">
            <summary>
            Gets or sets the stop CFM.
            </summary>
            <value>
            The stop CFM.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.StopERP">
            <summary>
            Gets or sets the stop erp.
            </summary>
            <value>
            The stop erp.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.TargetVelocity">
            <summary>
            Gets or sets the target velocity.
            </summary>
            <value>
            The target velocity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Physics.TranslationalLimitMotor.UpperLimit">
            <summary>
            Gets or sets the upper limit.
            </summary>
            <value>
            The upper limit.
            </value>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShapeTypes.Box">
            <summary>
                3D and 2D ( a plane )
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShapeTypes.Sphere">
            <summary>
                3D and 2D ( a circle )
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShapeTypes.Cylinder">
            <summary>
                3D only
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ColliderShapeTypes.Capsule">
            <summary>
                3D and 2D
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ConstraintTypes.Point2Point">
            <summary>
                The translation vector of the matrix to create this will represent the pivot, the rest is ignored
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.ConstraintTypes.Gear">
            <summary>
                The translation vector of the matrix to create this will represent the axis, the rest is ignored
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Physics.Contact">
            <summary>
                Generic contact between colliders, Always using Vector3 as the engine allows mixed 2D/3D contacts.
                Note: As class because it is shared between the 2 Colliders.. maybe struct is faster?
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.RigidBodyTypes.Static">
            <summary>
                They are supposed to never move, they are not automatically updated by the engine.
                They can be moved tho by an explicit call to UpdateTransformation(), results are not realist for dynamic simulation
                so use it wisely.
                If you plan to move the entity it is advised to use Kinematic, which allows the normal dynamic simulation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.RigidBodyTypes.Dynamic">
            <summary>
                The Physics engine is the authority for this kind of rigidbody, you should move them using forces and/or impulses,
                never directly editing the Transformation
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Physics.RigidBodyTypes.Kinematic">
            <summary>
                You can move this kind of rigidbody around and the physics engine will interpolate and perform dynamic interactions
                with dynamic bodies
                Notice that there is no dynamic interaction with static and other kinematic bodies
            </summary>
        </member>
    </members>
</doc>
