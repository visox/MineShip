<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Graphics</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.Paradox.Games.AppContextType">
            <summary>
            Type of a <see cref="!:GameContext"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.Desktop">
            <summary>
            Game running on desktop in a form or <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.DesktopWpf">
            <summary>
            Game running on desktop in a WPF window through a D3DImage.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.DesktopOpenTK">
            <summary>
            Game running on desktop in an OpenTK form.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.Android">
            <summary>
            Game running on Android in an AndroidGameView.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.WinRT">
            <summary>
            Game running on WinRT in a CoreWindow.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.WinRTBackgroundXaml">
            <summary>
            Game running on WinRT in a SwapChainBackgroundPanel.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.WinRTXaml">
            <summary>
            Game running on WinRT in a SurfaceImageSource.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.WindowsPhoneBackgroundXaml">
            <summary>
            Game running on WinRT in a DrawingBackgroundSurface.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.WindowsPhoneXaml">
            <summary>
            Game running on WinRT in a DrawingSurface.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Games.AppContextType.iOS">
            <summary>
            Game running on iOS in a iPhoneOSGameView.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BatchBase`1">
            <summary>
            Base class to batch a group of draw calls into one.
            </summary>
            <typeparam name="TDrawInfo">A structure containing all the required information to draw one element of the batch.</typeparam>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.isBeginCalled">
            <summary>
            Boolean indicating if we are between a call of Begin and End.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BatchBase`1.Begin(SiliconStudio.Paradox.Graphics.Effect,SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Paradox.Graphics.DepthStencilState,SiliconStudio.Paradox.Graphics.RasterizerState,System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects and a custom effect. 
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, depthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). 
            Passing a null effect selects the default effect shader. 
            </summary>
            <param name="effect">The effect to use for this begin/end draw session (default effect if null)</param>
            <param name="sessionSortMode">Sprite drawing order used for the Begin/End session.</param>
            <param name="sessionBlendState">Blending state used for the Begin/End session</param>
            <param name="sessionSamplerState">Texture sampling used for the Begin/End session</param>
            <param name="sessionDepthStencilState">Depth and stencil state used for the Begin/End session</param>
            <param name="sessionRasterizerState">Rasterization state used for the Begin/End session</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference for the Begin/End session</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BatchBase`1.End">
            <summary>
            Flushes the sprite batch and restores the device state to how it was before Begin was called. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BatchBase`1.UpdateBufferValuesFromElementInfo(SiliconStudio.Paradox.Graphics.BatchBase{`0}.ElementInfo@,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Update the mapped vertex and index buffer values using the provided element info.
            </summary>
            <param name="elementInfo">The structure containing the information about the element to draw.</param>
            <param name="vertexPointer">The pointer to the vertex array buffer to update.</param>
            <param name="indexPointer">The pointer to the index array buffer to update. This value is null if the index buffer used is static.</param>
            <param name="vexterStartOffset">The offset in the vertex buffer where the vertex of the element starts</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BatchBase`1.Effect">
            <summary>
            The effect used for the current Begin/End session.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BatchBase`1.ElementInfo">
            <summary>
            The structure containing all the information required to batch one element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ElementInfo.VertexCount">
            <summary>
            The number of vertex needed to draw the element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ElementInfo.IndexCount">
            <summary>
            The number of indices needed to draw the element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ElementInfo.Depth">
            <summary>
            The depth of the element. Used to sort the elements.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ElementInfo.DrawInfo">
            <summary>
            The user draw information.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo">
            <summary>
            A class containing information on how to build the batch vertex and index buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.ResourceKey">
            <summary>
            The key used to identify the GPU resource.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.StaticIndices">
            <summary>
            Gets or sets the static indices to use for the index buffer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.CreateDynamicIndexBufferInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Create the buffer resource information for a batch having both a dynamic index buffer and vertex buffer.
            </summary>
            <param name="resourceKey">The name of key to use to identify the resource</param>
            <param name="indexCount">The number of indices contained by the index buffer</param>
            <param name="vertexCount">The number of vertices contained by the vertex buffer</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.CreateStaticIndexBufferInfo(System.String,System.Int16[],System.Int32)">
            <summary>
            Create the buffer resource information for a batch having a dynamic vertex buffer but a static index buffer.
            </summary>
            <param name="resourceKey">The name of key to use to identify the resource</param>
            <param name="staticIndices">The value of the indices to upload into the index buffer.</param>
            <param name="vertexCount">The number of vertices contained by the vertex buffer</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.BatchCapacity">
            <summary>
            The initial number of draw calls that can be batched at one time.
            </summary>
            <remarks>Data structure will adjust their size when needed if capacity is not sufficient</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.VertexCount">
            <summary>
            Gets the number indices of the vertex buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.IndexCount">
            <summary>
            Gets the number indices of the index buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BatchBase`1.ResourceBufferInfo.IsIndexBufferDynamic">
            <summary>
            Gets the value indicating whether the index buffer is static or dynamic.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BatchBase`1.StaticQuadBufferInfo">
            <summary>
            A class containing the information required to build a vertex and index buffer for simple quad based batching.
            </summary>
            <remarks>
            The index buffer is used in static mode and contains six indices for each quad. The vertex buffer contains 4 vertices for each quad.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext">
            <summary>
            Use a ResourceContext per GraphicsDevice (DeviceContext)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.VertexBuffer">
            <summary>
            The vertex buffer of the batch.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.IndexBuffer">
            <summary>
            The index buffer of the batch.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.VertexArrayObject">
            <summary>
            The VertexArrayObject of the batch.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.VertexBufferPosition">
            <summary>
            The current position in vertex into the vertex array buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.IndexBufferPosition">
            <summary>
            The current position in index into the index array buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BatchBase`1.DeviceResourceContext.IsInImmediateMode">
            <summary>
            Indicate if the batch system is drawing in immediate mode for this buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DisplayMode">
            <summary>
            Describes the display mode.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DisplayMode.#ctor(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.Rational)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.DisplayMode"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="refreshRate">The refresh rate.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayMode.Format">
            <summary>
            Gets a value indicating the surface format of the display mode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayMode.Width">
            <summary>
            Gets a value indicating the screen width, in pixels.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayMode.Height">
            <summary>
            Gets a value indicating the screen height, in pixels.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayMode.RefreshRate">
            <summary>
            Gets a value indicating the refresh rate
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DisplayMode.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DisplayMode.AspectRatio">
            <summary>
            Gets the aspect ratio used by the graphics device.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.EffectInputSignature">
            <summary>
            Describes an input signature for an <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.EffectInputSignature.GetOrCreateLayout(SiliconStudio.Paradox.Graphics.EffectInputSignature)">
            <summary>
            Gets the original create signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns>VertexArrayLayout.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsOutput">
            <summary>
            Provides methods to retrieve and manipulate an graphics output (a monitor), it is equivalent to <see cref="T:SharpDX.DXGI.Output"/>.
            </summary>
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput</unmanaged>	
            <unmanaged-short>IDXGIOutput</unmanaged-short>	
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsOutput.#ctor(SiliconStudio.Paradox.Graphics.GraphicsAdapter,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsOutput"/>.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="outputIndex">Index of the output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">output</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsOutput.FindClosestMatchingDisplayMode(SiliconStudio.Paradox.Graphics.GraphicsProfile[],SiliconStudio.Paradox.Graphics.DisplayMode)">
            <summary>
            Find the display mode that most closely matches the requested display mode.
            </summary>
            <param name="targetProfiles">The target profile, as available formats are different depending on the feature level..</param>
            <param name="mode">The mode.</param>
            <returns>Returns the closes display mode.</returns>
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
            <remarks>Direct3D devices require UNORM formats. This method finds the closest matching available display mode to the mode specified in pModeToMatch. Similarly ranked fields (i.e. all specified, or all unspecified, etc) are resolved in the following order.  ScanlineOrdering Scaling Format Resolution RefreshRate  When determining the closest value for a particular field, previously matched fields are used to filter the display mode list choices, and  other fields are ignored. For example, when matching Resolution, the display mode list will have already been filtered by a certain ScanlineOrdering,  Scaling, and Format, while RefreshRate is ignored. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode, because  the application can choose some values initially, effectively changing the order that fields are chosen. Fields of the display mode are matched one at a time, generally in a specified order. If a field is unspecified, FindClosestMatchingMode gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, then the default desktop output is used to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode will typically return a display mode that matches the desktop settings for this output.   Unspecified fields are lower priority than specified fields and will be resolved later than specified fields.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsOutput.InitializeSupportedDisplayModes">
            <summary>
            Enumerates all available display modes for this output and stores them in <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.SupportedDisplayModes"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsOutput.InitializeCurrentDisplayMode">
            <summary>
            Initializes <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.CurrentDisplayMode"/> with the most appropiate mode from <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.SupportedDisplayModes"/>.
            </summary>
            <remarks>It checks first for a mode with <see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/>,
            if it is not found - it checks for <see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/>.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsOutput.TryFindMatchingDisplayMode(SharpDX.DXGI.Format)">
            <summary>
            Tries to find a display mode that has the same size as the current <see cref="T:SharpDX.DXGI.OutputDescription"/> associated with this instance
            of the specified format.
            </summary>
            <param name="format">The format to match with.</param>
            <returns>A matched <see cref="T:SiliconStudio.Paradox.Graphics.DisplayMode"/> or null if nothing is found.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.MonitorHandle">
            <summary>
            Retrieves the handle of the monitor associated with this <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsOutput"/>.
            </summary>
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>HMONITOR Monitor</unmanaged>	
            <unmanaged-short>HMONITOR Monitor</unmanaged-short>	
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.NativeOutput">
            <summary>
            Gets the native output.
            </summary>
            <value>The native output.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.CurrentDisplayMode">
            <summary>
            Gets the current display mode.
            </summary>
            <value>The current display mode.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.SupportedDisplayModes">
            <summary>
            Returns a collection of supported display modes for this <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsOutput"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.DesktopBounds">
            <summary>
            Gets the desktop bounds of the current output.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsOutput.Adapter">
            <summary>
            Gets the adapter this output is attached.
            </summary>
            <value>The adapter.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Rational">
            <summary>	
            <p>Represents a rational number.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure operates under the following rules:</p><ul> <li>0/0 is legal and will be interpreted as 0/1.</li> <li>0/anything is interpreted as zero.</li> <li>If you are representing a whole number, the denominator should be 1.</li> </ul>	
            </remarks>	
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Rational.FromSharpDX(SharpDX.DXGI.Rational)">
            <summary>
            Converts from SharpDX representation.
            </summary>
            <param name="rational">The rational.</param>
            <returns>Rational.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Rational.ToSharpDX">
            <summary>
            Converts to SharpDX representation.
            </summary>
            <returns>SharpDX.DXGI.Rational.</returns>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Rational.Numerator">
            <summary>	
            <dd> <p>An unsigned integer value representing the top of the rational number.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Rational.Denominator">
            <summary>	
            <dd> <p>An unsigned integer value representing the bottom of the rational number.</p> </dd>	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DepthStencilState">
            <summary>
            Contains depth-stencil state for the device.
            </summary>
            <summary>
            Contains depth-stencil state for the device.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResourceBase">
            <summary>
            GraphicsResource class
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.SetDebugName(SiliconStudio.Paradox.Graphics.GraphicsDevice,SharpDX.Direct3D11.DeviceChild,System.String)">
            <summary>
            Associates the private data to the device child, useful to get the name in PIX debugger.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.SetDebugName(SiliconStudio.Paradox.Graphics.GraphicsDevice,SharpDX.DXGI.DXGIObject,System.String)">
            <summary>
            Associates the private data to the device child, useful to get the name in PIX debugger.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.OnDestroyed">
            <summary>
            Called when graphics device has been detected to be internally destroyed.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.OnRecreate">
            <summary>
            Called when graphics device has been recreated.
            </summary>
            <returns>True if item transitionned to a <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState.Active"/> state.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.GetCpuAccessFlagsFromUsage(SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Gets the cpu access flags from resource usage.
            </summary>
            <param name="usage">The usage.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResourceBase"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResourceBase"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResourceBase"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.OnPause">
            <summary>
            Called when graphics device is inactive (put in the background and rendering is paused).
            It should voluntarily release objects that can be easily recreated, such as FBO and dynamic buffers.
            </summary>
            <returns>True if item transitionned to a <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState.Paused"/> state.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.OnResume">
            <summary>
            Called when graphics device is resumed from either paused or destroyed state.
            If possible, resource should be recreated.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.Destroy">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.NativeDeviceChild">
            <summary>
            Gets or sets the device child.
            </summary>
            <value>The device child.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsResourceBase.GraphicsDevice">
            <summary>
            Gets the graphics device attached to this instance.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilState.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DepthStencilStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.DepthStencilState"/> class.
            </summary>
            <param name="depthEnable">if set to <c>true</c> [depth enable].</param>
            <param name="depthWriteEnable">if set to <c>true</c> [depth write enable].</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilState.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilState.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilState.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DepthStencilStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="!:IDepthStencilState"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="description">The description.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilState.Description">
            <summary>
            Gets the depth stencil state description.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FakeRasterizerState">
            <summary>Fake rasterizer state (Description should be valid).</summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.RasterizerState">
            <summary>
            Describes rasterizer state, that determines how to convert vector data (shapes) into raster data (pixels).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerState.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.RasterizerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerState"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="rasterizerStateDescription">The rasterizer state description.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerState.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerState.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerState.Apply(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Applies this instance to the pipeline stage.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerState.Description">
            <summary>
            Gets the rasterizer state description.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerState.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.RasterizerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="!:IRasterizerState"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="rasterizerStateDescription">The rasterizer state description.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.FontAntiAliasMode">
            <summary>
            Available antialias mode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontAntiAliasMode.Default">
            <summary>
            The default grayscale anti-aliasing
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontAntiAliasMode.Grayscale">
            <summary>
            Use grayscale antialiasing
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontAntiAliasMode.ClearType">
            <summary>
            Use cleartype antialiasing.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontAntiAliasMode.Aliased">
            <summary>
            Don't use any antialiasing
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive">
            <summary>
            A geometric primitive. Use <see cref="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Sphere"/> to learn how to use it.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1">
            <summary>
            A geometric primitive used to draw a simple model built from a set of vertices and indices.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.IndexBuffer">
            <summary>
            The index buffer used by this geometric primitive.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.VertexBuffer">
            <summary>
            The vertex buffer used by this geometric primitive.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.GraphicsDevice">
            <summary>
            The default graphics device.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.vertexArrayObject">
            <summary>
            The input layout used by this geometric primitive (shared for all geometric primitive).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.IsIndex32Bits">
            <summary>
            True if the index buffer is a 32 bit index buffer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.GeometricMeshData{`0})" -->
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.Draw">
            <summary>
            Draws this <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.Draw(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Draws this <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive"/>.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive`1.ReverseWinding``1(`0[],``0[])">
            <summary>
            Helper for flipping winding of geometric primitives for LH vs. RH coordinates
            </summary>
            <typeparam name="TIndex">The type of the T index.</typeparam>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cube">
            <summary>
            A cube has six faces, each one pointing in a different direction.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cube.New(System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="size">The size.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cylinder">
            <summary>
            A Cylinder primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cylinder.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Cylinder.New(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Torus">
            <summary>
            A Torus primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Torus.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Torus.New(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Sphere">
            <summary>
            A sphere primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Sphere.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricMultiTexcoordPrimitive.Sphere.New(System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.ImageRegionRotation">
            <summary>
            Defines the possible rotations to apply on image regions.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ImageRegionRotation.NoRotation">
            <summary>
            No rotation is performed. The image region is displayed as is.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ImageRegionRotation.Rotate90">
            <summary>
            Perform a clockwise rotation of the 90 degrees.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ImageRegionRotation.Rotate90C">
            <summary>
            Perform a counter-clockwise rotation of the 90 degrees.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ImageRegionRotation.Rotate180">
            <summary>
            Perform a rotation of 180 degrees.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PostEffectQuad.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PostEffectQuad"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="effect">The effect that will be used.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PostEffectQuad.Draw">
            <summary>
            Draws a quad. The effect must have been applied before calling this method.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PostEffectQuad.Draw(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Draws a quad with a texture. This Draw method is using a simple pixel shader that is sampling the texture.
            </summary>
            <param name="texture">The texture to draw.</param>
            <exception cref="T:System.ArgumentException">Expecting a Texture2D;texture</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.PostEffectQuad.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PostEffectQuad.SharedData">
            <summary>
            Internal structure used to store VertexBuffer and VertexInputLayout.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PostEffectQuad.SharedData.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexArrayLayout">
            <summary>
            Defines the input layout of a <see cref="T:SiliconStudio.Paradox.Graphics.VertexArrayObject"/>. There is only one instance at runtime per input layout.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexArrayLayout.#ctor(SharpDX.Direct3D11.InputElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexArrayLayout"/> class.
            </summary>
            <param name="inputElements">The input elements.</param>
            <exception cref="T:System.ArgumentNullException">inputElements</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexArrayLayout.GetOrCreateLayout(SiliconStudio.Paradox.Graphics.VertexArrayLayout)">
            <summary>
            Gets the original create layout.
            </summary>
            <param name="layout">The layout.</param>
            <returns>VertexArrayLayout.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Effect.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="bytecode">The bytecode.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Effect.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Shaders.EffectBytecode,SiliconStudio.Paradox.Effects.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="bytecode">The bytecode.</param>
            <param name="usedParameters">The parameters used to create this shader (from a pdxfx).</param>
            <exception cref="T:System.ArgumentNullException">
            device
            or
            bytecode
            </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Effect.InputSignature">
            <summary>
            Gets the input signature of this effect.
            </summary>
            <value>The input signature.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Effect.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Effect.LightingParameters">
            <summary>
            The lighting parameters of this effect.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Effect.ShadowParameters">
            <summary>
            The shadow parameters of this effect
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Effect.UpdateLightingParameters">
            <summary>
            A flag stating if the LightingParameters should be updated.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FakeBlendState">
            <summary>Fake blend state (Description should be valid).</summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BlendState">
            <summary>
            Describes a blend state.
            </summary>
            <summary>	
            Describes a blend state.	
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendState.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.BlendStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="blendStateDescription">The blend state description.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendState.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendState.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendState.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.BlendStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="blendStateDescription">The blend state description.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendState.Description">
            <summary>
            Gets the blend state description.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendState.BlendFactor">
            <summary>
            Gets or sets the four-component (RGBA) blend factor for alpha blending.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendState.MultiSampleMask">
            <summary>
            Gets or sets a bitmask which defines which samples can be written during multisampling. The default is 0xffffffff.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontHelper.PointsToPixels(System.Single)">
            <summary>
            Converts a font size from points to pixels. Can't just let GDI+ do this for us, because we want identical results on every machine regardless of system DPI settings.
            </summary>
            <param name="points">The size in number of points</param>
            <returns>The size in number of pixels</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontHelper.GetFontPath(System.String,SiliconStudio.Paradox.Graphics.Font.FontStyle)">
            <summary>
            Build the path of a font in the database given the name of the font family and the font style.
            </summary>
            <param name="fontName">Family name of the font</param>
            <param name="style">The style of the font</param>
            <remarks>This function does not indicate it the font exists or not in the database.</remarks>
            <returns>The absolute path of the font in the database</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.FontManager">
            <summary>
            A font manager is in charge of loading in memory the ttf files, looking for font informations, rendering and then caching the <see cref="T:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap"/>s on the CPU . 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.dataStructuresLock">
            <summary>
            Lock both <see cref="F:SiliconStudio.Paradox.Graphics.Font.FontManager.generatedBitmaps"/> and <see cref="F:SiliconStudio.Paradox.Graphics.Font.FontManager.bitmapsToGenerate"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.cachedFontFaces">
            <summary>
            The font data that are currently cached in the registry
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.generatedBitmaps">
            <summary>
            The list of the bitmaps that have already been generated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.bitmapsToGenerate">
            <summary>
            The list of the bitmaps that are in generation or to generate
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.bitmapBuildSignal">
            <summary>
            The <see cref="T:System.Threading.AutoResetEvent"/> used to signal the bitmap build thread that a build operation is requested.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.bitmapBuilderThread">
            <summary>
            The thread in charge of building the characters bitmaps
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.bitmapShouldEndThread">
            <summary>
            Boolean specifying if we need to quit the bitmap building thread.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.freetypeLibrary">
            <summary>
            A reference pointer to the freetype library.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.assetManager">
            <summary>
            The asset manager used to load the ttf fonts.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontManager.borderSize">
            <summary>
            The size of the transparent border to add around the character bitmap.
            <remarks>
            If we don't do so artifacts appears around the character when scaling fonts
            Note that we cannot just increase space taken in the bin packer because artifacts with old/previous characters may happen.
            </remarks>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontManager.#ctor">
            <summary>
            Create an empty register.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontManager.GenerateBitmap(SiliconStudio.Paradox.Graphics.Font.CharacterSpecification,System.Boolean)">
            <summary>
            Start the generation of the specified character's bitmap. 
            </summary>
            <remarks>Does nothing if the bitmap already exist or if the generation is currently running.</remarks>
            <param name="characterSpecification">The character we want the bitmap of</param>
            <param name="synchronously">Indicate if the generation of the bitmap must by done synchronously or asynchronously</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontManager.GetFontInfo(System.String,SiliconStudio.Paradox.Graphics.Font.FontStyle,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Get various information about a font of a given family, type, and size.
            </summary>
            <param name="fontFamily">The name of the family of the font</param>
            <param name="fontStyle">The style of the font</param>
            <param name="lineSpacing">The space between two lines for a font size of 1 pixel</param>
            <param name="baseLine">The default base line for a font size of 1 pixel</param>
            <param name="maxWidth">The width of the largest character for a font size of 1 pixel</param>
            <param name="maxHeight">The height of the largest character for a font size of 1 pixel</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontManager.DoesFontContains(System.String,SiliconStudio.Paradox.Graphics.Font.FontStyle,System.Char)">
            <summary>
            Returns a boolean indicating if the specified font contains the provided character.
            </summary>
            <param name="fontStyle">The style in the font family</param>
            <param name="character">The character to look for</param>
            <param name="fontFamily">The family of the font</param>
            <returns>boolean indicating if the font contains the character</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontManager.BuildBitmapThread">
            <summary>
            Thread function in charge of building the bitmap
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap">
            <summary>
            A bitmap representing a given character
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap"/> representing a null bitmap.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.#ctor(System.IntPtr,SiliconStudio.Core.Mathematics.Int2@,System.Int32,System.Int32,System.Int32,System.Int32,SharpFont.PixelMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap"/> class from a data array.
            </summary>
            <param name="pixelMode">The data format of the bitmap data</param>
            <param name="data">The bitmap data</param>
            <param name="borderSize">The size of the border around the image</param>
            <param name="width">The width of the bitmap </param>
            <param name="rows">The height of the bitmap</param>
            <param name="pitch">The pitch of the bitmap</param>
            <param name="grayLevels">The number of gray levels of the bitmap</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.IsDisposed">
            <summary>
            Gets a value indicating whether the <see cref="T:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap"/> has been disposed.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.Rows">
            <summary>
            Gets the number of bitmap rows.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.Width">
            <summary>
            Gets the number of pixels in bitmap row.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.Pitch">
            <summary><para>
            Gets the pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However,
            the pitch is positive when the bitmap has a ‘down’ flow, and negative when it has an ‘up’ flow. In all
            cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.
            </para><para>
            Note that ‘padding’ means the alignment of a bitmap to a byte border, and FreeType functions normally align
            to the smallest possible integer value.
            </para><para>
            For the B/W rasterizer, ‘pitch’ is always an even number.
            </para></summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.Buffer">
            <summary>
            Gets a typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most
            cases.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.GrayLevels">
            <summary>
            Gets the number of gray levels used in the bitmap. This field is only used with
            <see cref="F:SharpFont.PixelMode.Gray"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.CharacterBitmap.PixelMode">
            <summary>
            Gets the pixel mode, i.e., how pixel bits are stored.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont">
            <summary>
            A dynamic font. That is a font that generate its character bitmaps at execution.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteFont">
            <summary>
            SpriteFont to use with <see cref="T:SiliconStudio.Paradox.Graphics.SpriteBatch"/>. See <see cref="T:SiliconStudio.Paradox.Graphics.SpriteFont"/> to learn how to use it.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteFont.FontSystem">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Graphics.Font.FontSystem"/> that is managing this sprite font.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetExtraSpacing(System.Single)">
            <summary>
            Get the value of the extra line spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the character spacing</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetExtraLineSpacing(System.Single)">
            <summary>
            Get the value of the extra character spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the character spacing</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetFontDefaultLineSpacing(System.Single)">
            <summary>
            Get the value of the font default line spacing for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the default line spacing</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetBaseOffsetY(System.Single)">
            <summary>
            Get the value of the base offset for the given font size.
            </summary>
            <param name="fontSize">The font size in pixels</param>
            <returns>The value of the base offset</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetTotalLineSpacing(System.Single)">
            <summary>
            Gets the value of the total line spacing (font default + user defined) in pixels for a given font size. 
            </summary>
            <remarks>Line spacing is the distance between the base lines of two consecutive lines of text (blank space as well as characters' height are thus included).</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.PreGenerateGlyphs(System.String,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Pre-generate synchronously the glyphs of the character needed to render the provided text at the provided size.
            </summary>
            <param name="text">The text containing the characters to pre-generate</param>
            <param name="size">The size of the font</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String)">
            <summary>
            Returns the width and height of the provided text for the current font size <see cref="P:SiliconStudio.Paradox.Graphics.SpriteFont.Size"/>
            </summary>
            <param name="text">The string to measure.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
            <summary>
            Returns the width and height of the provided text for the current font size <see cref="P:SiliconStudio.Paradox.Graphics.SpriteFont.Size"/>
            </summary>
            <param name="text">The string to measure.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String,System.Single)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,System.Single)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String,SiliconStudio.Core.Mathematics.Vector2@)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2@)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String,SiliconStudio.Core.Mathematics.Vector2,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.String,SiliconStudio.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2@,System.Int32)">
            <summary>
            Returns the width and height of the provided text for a given font size
            </summary>
            <param name="text">The string to measure.</param>
            <param name="fontSize">The size of the font (ignored in the case of static fonts)</param>
            <param name="length">The length of the string to measure</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.IsCharPresent(System.Char)">
            <summary>
            Checks whether the provided character is present in the character map of the current <see cref="T:SiliconStudio.Paradox.Graphics.SpriteFont"/>.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if the <paramref name="c"/> is present in the character map, false - otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetGlyph(System.Char,SiliconStudio.Core.Mathematics.Vector2@,System.Boolean)">
            <summary>
            Return the glyph associated to provided character at the given size.
            </summary>
            <param name="character">The character we want the glyph of</param>
            <param name="fontSize">The font size in pixel</param>
            <param name="uploadGpuResources">Indicate if the GPU resource should be uploaded or not.</param>
            <returns>The glyph corresponding to the request or null if not existing</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.Size">
            <summary>
            Gets the font size (resp. the default font size) for static fonts (resp. for dynamic fonts) in pixels.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.DefaultCharacter">
            <summary>
            Gets or sets the default character for the font.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.IgnoreUnkownCharacters">
            <summary>
            Completely skips characters that are not in the map.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.ExtraSpacing">
            <summary>
            Gets or sets extra spacing (in pixels) between the characters for the current font <see cref="P:SiliconStudio.Paradox.Graphics.SpriteFont.Size"/>. 
            This value is scaled during the draw in the case of dynamic fonts. 
            Use <see cref="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetExtraSpacing(System.Single)"/> to get the value of the extra spacing for a given font size.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.ExtraLineSpacing">
            <summary>
            Gets or sets the extra line spacing (in pixels) to add to the default font line spacing for the current font <see cref="P:SiliconStudio.Paradox.Graphics.SpriteFont.Size"/>.
            This value will be scaled during the draw in the case of dynamic fonts.
            Use <see cref="M:SiliconStudio.Paradox.Graphics.SpriteFont.GetExtraLineSpacing(System.Single)"/> to get the value of the extra spacing for a given font size.
            </summary>
            <remarks>Line spacing is the distance between the base lines of two consecutive lines of text (blank space as well as characters' height are thus included).</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteFont.IsDynamic">
            <summary>
            Gets a boolean indicating if the current font is dynamic or not.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteFont.InternalDrawCommand">
            <summary>
            Structure InternalDrawCommand used to pass parameters to InternalDrawGlyph
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteFont.InternalUIDrawCommand">
            <summary>
            Structure InternalDrawCommand used to pass parameters to InternalDrawGlyph
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont.fontName">
            <summary>
            Input the family name of the (TrueType) font.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont.style">
            <summary>
            Style for the font. 'regular', 'bold' or 'italic'. Default is 'regular
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont.useKerning">
            <summary>
            Specifies whether to use kerning information when rendering the font. Default value is false (NOT SUPPORTED YET).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont.antiAlias">
            <summary>
            The alias mode of the font
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFont.sizedCharacterToCharacterData">
            <summary>
            The character specifications cached to avoid re-allocations
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData">
            <summary>
            Data for a dynamic SpriteFont object.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData.FontName">
            <summary>
            Input the family name of the (TrueType) font.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData.DefaultSize">
            <summary>
             Size and style for TrueType fonts in points.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData.Style">
            <summary>
            Style for the font. 'regular', 'bold' or 'italic'. Default is 'regular
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData.UseKerning">
            <summary>
            Specifies whether to use kerning information when rendering the font. Default value is false (NOT SUPPORTED YET).
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData.AntiAlias">
            <summary>
            By default, font textures is a grey. To generate ClearType textures, turn this flag to true 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.FontCacheManager">
            <summary>
            Represent a GPU cache of font characters
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontCacheManager.ClearCache">
            <summary>
            Remove all the currently cached characters from the cache.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontCacheManager.UploadCharacterBitmap(SiliconStudio.Paradox.Graphics.Font.CharacterSpecification)">
            <summary>
            Upload a character's bitmap into the current cache.
            </summary>
            <param name="character">The character specifications corresponding to the bitmap</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontCacheManager.RemoveLessUsedCharacters(System.Int32)">
            <summary>
            Remove all the character that haven't been used for the given amount of frames
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Font.FontCacheManager.Textures">
            <summary>
            The textures containing the cached characters on the GPU.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification">
            <summary>
            A character of a specific font with a specific size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.FontName">
            <summary>
            Name of a system (TrueType) font.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.Size">
            <summary>
             Size of the TrueType fonts in pixels
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.Style">
            <summary>
            Style for the font. 'regular', 'bold', 'italic', 'underline', 'strikeout'. Default is 'regular
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.AntiAlias">
            <summary>
            The alias mode of the font
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.Bitmap">
            <summary>
            The bitmap of the character
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.Glyph">
            <summary>
            The glyph of the character
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.IsBitmapUploaded">
            <summary>
            Indicate if the current <see cref="F:SiliconStudio.Paradox.Graphics.Font.Glyph.Subrect"/> and <see cref="F:SiliconStudio.Paradox.Graphics.Font.Glyph.BitmapIndex"/> data has been uploaded to the GPU or not.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.ListNode">
            <summary>
            The node of the least recently used (LRU) list.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.CharacterSpecification.LastUsedFrame">
            <summary>
            The index of the frame where the character has been used for the last time.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.FontStyle">
            <summary>
            Type of a font.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontStyle.Regular">
            <summary>
            A regular font.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontStyle.Bold">
            <summary>
            A bold font.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Font.FontStyle.Italic">
            <summary>
            An italic font.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.FontSystem">
            <summary>
            The system managing the fonts.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.IFontSystem">
            <summary>
            The interface to create and manage fonts.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.IFontSystem.NewStatic(SiliconStudio.Paradox.Graphics.StaticSpriteFontData)">
            <summary>
            Create a new instance of a static font.
            </summary>
            <param name="data">The static font data from which to create the font.</param>
            <returns>The newly created static font</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.IFontSystem.NewDynamic(SiliconStudio.Paradox.Graphics.Font.DynamicSpriteFontData)">
            <summary>
            Create a new instance of a dynamic font.
            </summary>
            <param name="data">The dynamic font data from which to create the font.</param>
            <returns>The newly created dynamic font</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontSystem.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Create a new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Font.FontSystem"/> base on the provided <see cref="P:SiliconStudio.Paradox.Graphics.Font.FontSystem.GraphicsDevice"/>.
            </summary>
            <param name="graphicsDevice">A valid instance of <see cref="P:SiliconStudio.Paradox.Graphics.Font.FontSystem.GraphicsDevice"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graphicsDevice"/> is null</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Font.FontSystem.Load">
            <summary>
            Load the fonts.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Font.GuillotinePacker">
            <summary>
            Implementation of a "Guillotine" packer.
            More information at http://clb.demon.fi/files/RectangleBinPack.pdf.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FrameworkResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.CannotCreateDefaultRenderTarget">
            <summary>
              Looks up a localized string similar to DefaultRenderTarget is already created.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.CurrentDisplayModeNotFound">
            <summary>
              Looks up a localized string similar to Unable to determine current display mode.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.GraphicsResourceAlreadySet">
            <summary>
              Looks up a localized string similar to [{0}] GraphicsResource is already set.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.GraphicsResourceStateBound">
            <summary>
              Looks up a localized string similar to Cannot set a property on an already bound [{0}] GraphicsResource.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.NoDefaultRenterTarget">
            <summary>
              Looks up a localized string similar to No default render target is available. Use GraphicsDevice.InitDefaultRenderTarget()..
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.NoDepthStencilBufferBound">
            <summary>
              Looks up a localized string similar to No Depth/Stencil buffer is currently setup on this GraphicsDevice..
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.NoGraphicsDeviceAvailable">
            <summary>
              Looks up a localized string similar to No GraphicsDevice are currently available. Check GraphicsDevice.Current should not be null.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.FrameworkResources.NoStencilBufferForDepthFormat">
            <summary>
              Looks up a localized string similar to Cannot clear a stencil buffer without a Stencil Buffer format [{0}].
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricMeshData`1">
            <summary>
            A geometric data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GeometricMeshData`1.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GeometricMeshData`1.Indices">
            <summary>
            Gets or sets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GeometricMeshData`1.IsLeftHanded">
            <summary>
            Gets or sets a value indicating whether this instance is left handed.
            </summary>
            <value><c>true</c> if this instance is left handed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GeometricMeshData`1.Layout">
            <summary>
            Gets or sets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive">
            <summary>
            A geometric primitive. Use <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cube"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cylinder"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.GeoSphere"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Plane"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Sphere"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Teapot"/>, <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Torus"/>. See <see cref="!:Draw+vertices"/> to learn how to use it.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Capsule">
            <summary>
            A sphere primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Capsule.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Capsule.New(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cube">
            <summary>
            A cube has six faces, each one pointing in a different direction.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cube.New(System.Single,System.Boolean)">
            <summary>
            Creates a cube with six faces each one pointing in a different direction.
            </summary>
            <param name="size">The size.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cube.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cylinder">
            <summary>
            A Cylinder primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cylinder.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="textureTiling">The texture tiling.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Cylinder.New(System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Creates a cylinder primitive.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="textureTiling">The texture tiling.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A cylinder primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt;= 3</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.GeoSphere">
            <summary>
            A Geodesic sphere.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.GeoSphere.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.GeoSphere.New(System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.GeoSphere.Create(System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a Geodesic sphere.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Geodesic sphere.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Plane">
            <summary>
            A plane primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Plane.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Boolean,System.Nullable{SiliconStudio.Core.Mathematics.Vector2})">
            <summary>
            Creates a Plane primitive on the X/Y plane with a normal equal to -<see cref="F:SiliconStudio.Core.Mathematics.Vector3.UnitZ"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="sizeX">The size X.</param>
            <param name="sizeY">The size Y.</param>
            <param name="tessellation">The tessellation, as the number of quads per axis.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="uvFactors">Scale UVs between 0 and the values of this parameter.</param>
            <returns>A Plane primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt; 0</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Plane.New(System.Single,System.Single,System.Int32,System.Boolean,System.Nullable{SiliconStudio.Core.Mathematics.Vector2},System.Boolean)">
            <summary>
            Creates a Plane primitive on the X/Y plane with a normal equal to -<see cref="F:SiliconStudio.Core.Mathematics.Vector3.UnitZ"/>.
            </summary>
            <param name="sizeX">The size X.</param>
            <param name="sizeY">The size Y.</param>
            <param name="tessellation">The tessellation, as the number of quads per axis.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <param name="uvFactors">Scale UVs between 0 and the values of this parameter.</param>
            <returns>A Plane primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt; 0</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Sphere">
            <summary>
            A sphere primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Sphere.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Sphere.New(System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a sphere primitive.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A sphere primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;Must be &gt;= 3</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Teapot">
            <summary>
            A Teapot primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Teapot.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a teapot primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>GeometricPrimitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt; 0</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Teapot.New(System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a teapot primitive.
            </summary>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>GeometricPrimitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation must be &gt; 0</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Torus">
            <summary>
            A Torus primitive.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Torus.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="device">The device.</param>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GeometricPrimitive.Torus.New(System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Creates a torus primitive.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="toLeftHanded">if set to <c>true</c> vertices and indices will be transformed to left handed. Default is false.</param>
            <returns>A Torus primitive.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tessellation;tessellation parameter out of range</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDeviceSharedDataType">
            <summary>
            Type of shared data. <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.GetOrCreateSharedData``1(SiliconStudio.Paradox.Graphics.GraphicsDeviceSharedDataType,System.Object,SiliconStudio.Paradox.Graphics.GraphicsDevice.CreateSharedData{``0})"/>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceSharedDataType.PerDevice">
            <summary>
            Data is shared within a <see cref="T:SharpDX.Direct3D11.Device"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceSharedDataType.PerContext">
            <summary>
            Data is shared within a <see cref="T:SharpDX.Direct3D11.DeviceContext"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState">
            <summary>
            Describes the lifetime state of a graphics resource.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState.Active">
            <summary>
            Resource is active and available for use.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState.Paused">
            <summary>
            Resource is in a reduced state (partially or completely destroyed) because application is in the background.
            Context should still be alive.
            This is useful for freeing dynamic resources such as FBO, that could be easily restored when application is resumed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceLifetimeState.Destroyed">
            <summary>
            Resource has been destroyed due to graphics device being destroyed.
            It will need to be recreated or reloaded when rendering resume.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.MappedResource">
            <summary>
            A GPU resource mapped for CPU access. This is returned by using <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.MapSubresource(SiliconStudio.Paradox.Graphics.GraphicsResource,System.Int32,SiliconStudio.Paradox.Graphics.MapMode,System.Boolean,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.MappedResource.#ctor(SiliconStudio.Paradox.Graphics.GraphicsResource,System.Int32,SiliconStudio.Paradox.Graphics.DataBox)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="dataBox">The data box.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.MappedResource.#ctor(SiliconStudio.Paradox.Graphics.GraphicsResource,System.Int32,SiliconStudio.Paradox.Graphics.DataBox,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.MappedResource"/> struct.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="dataBox">The data box.</param>
            <param name="offsetInBytes">Offset since the beginning of the buffer.</param>
            <param name="sizeInBytes">Size of the mapped resource.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MappedResource.Resource">
            <summary>
            The resource mapped.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MappedResource.SubResourceIndex">
            <summary>
            The subresource index.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MappedResource.DataBox">
            <summary>
            The data box
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MappedResource.OffsetInBytes">
            <summary>
            the offset of the mapped resource since the beginning of the buffer
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MappedResource.SizeInBytes">
            <summary>
            the size of the mapped resource
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.NamespaceDoc">
            <summary>
            The <see cref="N:SiliconStudio.Paradox.Graphics"/> namespace contains types that provides a unified Graphics API for Direct3D, OpenGL and OpenGLES.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Internals.ShaderParameterUpdaterDefinition.VisitDependencies(System.Collections.Generic.Dictionary{SiliconStudio.Paradox.Graphics.Internals.ParameterDependency,System.Collections.Generic.List{SiliconStudio.Paradox.Graphics.Internals.ParameterDependency}},System.Collections.Generic.HashSet{SiliconStudio.Paradox.Graphics.Internals.ParameterDependency},System.Collections.Generic.List{SiliconStudio.Paradox.Graphics.Internals.ParameterDependency},SiliconStudio.Paradox.Graphics.Internals.ParameterDependency)">
            <summary>
            Builds list of dynamic dependencies.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Internals.ShaderParameterUpdaterDefinition.BuildDependencies(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Graphics.Internals.ParameterDependency})">
            <summary>
            Builds dependency graph and generates update ordering.
            </summary>
            <param name="edges"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Internals.ShaderParameterUpdater">
            <summary>
            Updates ParameterCollection for rendering, including dynamic parameters.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PrimitiveQuad">
            <summary>
            Primitive quad use to draw an effect on a quad (fullscreen by default). This is directly accessible from the <see cref="!:GraphicsDevice.DrawQuad"/> method.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveQuad.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PrimitiveQuad"/> class with a <see cref="T:SiliconStudio.Paradox.Graphics.SimpleEffect"/>.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveQuad.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PrimitiveQuad"/> class with a particular effect.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveQuad.Draw">
            <summary>
            Draws a quad. The effect must have been applied before calling this method with pixel shader having the signature float2:TEXCOORD.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveQuad.Draw(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Draws a quad with a texture. This Draw method is using the current effect bound to this instance.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveQuad.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Core.Mathematics.Color4)">
            <summary>
            Draws a quad with a texture. This Draw method is using a simple pixel shader that is sampling the texture.
            </summary>
            <param name="texture">The texture to draw.</param>
            <param name="samplerState">State of the sampler. If null, default sampler is <see cref="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearClamp"/>.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentException">Expecting a Texture2D;texture</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.PrimitiveQuad.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PrimitiveQuad.SharedData">
            <summary>
            Internal structure used to store VertexBuffer and VertexInputLayout.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveQuad.SharedData.VertexBuffer">
            <summary>
            The vertex buffer
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteBatch">
            <summary>
            Renders a group of sprites.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.SpriteBatch"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="bufferElementCount">The maximum number element that can be batched in one time.</param>
            <param name="batchCapacity">The batch capacity default to 64.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Begin(SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.Effect)">
            <summary>
            Begins a sprite batch operation using deferred sort and default state objects (BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Begin(SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Paradox.Graphics.DepthStencilState,SiliconStudio.Paradox.Graphics.RasterizerState,SiliconStudio.Paradox.Graphics.Effect)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil and rasterizer state objects, plus a custom effect. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader.
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="effect">Effect state options.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Begin(SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Paradox.Graphics.DepthStencilState,SiliconStudio.Paradox.Graphics.RasterizerState,SiliconStudio.Paradox.Graphics.Effect,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Paradox.Graphics.SpriteTransformMode,System.Int32)">
            <summary>
            Begins a sprite batch rendering using the specified sorting mode and blend state, sampler, depth stencil, rasterizer state objects, plus a custom effect and a 2D transformation matrix. Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). Passing a null effect selects the default SpriteBatch Class shader. 
            </summary>
            <param name="sortMode">Sprite drawing order.</param>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="effect">Effect state options.</param>
            <param name="transformationMatrix">Transformation matrix for scale, rotate, translate options.</param>
            <param name="transformMode">The transformation mode indicating how the transformation matrix should be used</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.RectangleF,SiliconStudio.Core.Mathematics.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <remarks>
            Before making any calls to Draw, you must call Begin. Once all calls to Draw are complete, call End. 
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.RectangleF,System.Nullable{SiliconStudio.Core.Mathematics.Rectangle},SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, destination rectangle, source rectangle, color, rotation, origin, effects and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. If this rectangle is not the same size as the source rectangle, the sprite will be scaled to fit.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,System.Single,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,System.Nullable{SiliconStudio.Core.Mathematics.Rectangle},SiliconStudio.Core.Mathematics.Color)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, and color. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,System.Nullable{SiliconStudio.Core.Mathematics.Rectangle},SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,System.Single,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Draw(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector2,System.Nullable{SiliconStudio.Core.Mathematics.Rectangle},SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to a batch of sprites for rendering using the specified texture, position, source rectangle, color, rotation, origin, scale, effects, and layer. 
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="sourceRectangle">A rectangle that specifies (in texels) the source texels from a texture. Use null to draw the entire texture. </param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.MeasureString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String)">
            <summary>
            Returns the size of the given text in virtual pixels.
            </summary>
            <param name="spriteFont">The font used to draw the text.</param>
            <param name="text">The text to measure.</param>
            <returns>The size of the text in virtual pixels.</returns>
            <exception cref="T:System.ArgumentNullException">The provided sprite font is null.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.MeasureString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,System.Single)">
            <summary>
            Returns the size of the given text in virtual pixels.
            </summary>
            <param name="spriteFont">The font used to draw the text.</param>
            <param name="text">The text to measure.</param>
            <param name="fontSize">The font size (in pixels) used to draw the text.</param>
            <returns>The size of the text in virtual pixels.</returns>
            <exception cref="T:System.ArgumentNullException">The provided sprite font is null.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.Text.StringBuilder,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, and color.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.Text.StringBuilder,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">A text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.Text.StringBuilder,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,System.Single,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SpriteEffects,System.Single,SiliconStudio.Paradox.Graphics.TextAlignment)">
            <summary>Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation, origin, scale, effects and layer.</summary>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">Text string.</param>
            <param name="fontSize">The font size in pixels (ignored in the case of static fonts)</param>
            <param name="position">The location (in screen coordinates) to draw the sprite.</param>
            <param name="color">The color to tint a sprite. Use Color.White for full color with no tinting.</param>
            <param name="rotation">Specifies the angle (in radians) to rotate the sprite about its center.</param>
            <param name="origin">The sprite origin in virtual pixels; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effects">Effects to apply.</param>
            <param name="layerDepth">The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer. Use SpriteSortMode if you want sprites to be sorted during drawing.</param>
            <param name="alignment">Describes how to align the text to draw</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SpriteBatch.VirtualResolution">
            <summary>
            Gets or sets the virtual resolution used for this <see cref="T:SiliconStudio.Paradox.Graphics.SpriteBatch"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.SimpleEffect.Color">
            <summary>
            Gets or sets the color. Default is <see cref="F:SharpDX.Color.White"/>.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Sprite">
            <summary>
            A sprite represents a series frames in an atlas forming an animation. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Sprite.TextureRegion">
            <summary>
            The rectangle specifying the region of the texture to use.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Sprite.Center">
            <summary>
            The position of the center of the image in pixels.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Sprite.#ctor">
            <summary>
            Creates a new empty instance of sprite.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Sprite.Draw(SiliconStudio.Paradox.Graphics.SpriteBatch,SiliconStudio.Core.Mathematics.Vector2,System.Single,System.Single,SiliconStudio.Paradox.Graphics.SpriteEffects)">
            <summary>
            Draw a specific frame of the sprite with white color and scale of 1.
            </summary>
            <param name="spriteBatch">The sprite batch used to draw the sprite.</param>
            <param name="position">The position to which draw the sprite</param>
            <param name="rotation">The rotation to apply on the sprite</param>
            <param name="depthLayer">The depth layer to which draw the sprite</param>
            <param name="spriteEffects">The sprite effect to apply on the sprite</param>
            <remarks>This function must be called between the <see cref="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Begin(SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.Effect)"/> 
            and <see cref="!:SpriteBatch.End()"/> calls of the provided <paramref name="spriteBatch"/></remarks>
            <exception cref="T:System.ArgumentException">The provided frame index is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided spriteBatch is null</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Sprite.Draw(SiliconStudio.Paradox.Graphics.SpriteBatch,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Core.Mathematics.Vector2,System.Single,System.Single,SiliconStudio.Paradox.Graphics.SpriteEffects)">
            <summary>
            Draw a specific frame of the sprite.
            </summary>
            <param name="spriteBatch">The sprite batch used to draw the sprite.</param>
            <param name="position">The position to which draw the sprite</param>
            <param name="color">The color to use to draw the sprite</param>
            <param name="rotation">The rotation to apply on the sprite</param>
            <param name="scales">The scale factors to apply on the sprite</param>
            <param name="depthLayer">The depth layer to which draw the sprite</param>
            <param name="spriteEffects">The sprite effect to apply on the sprite</param>
            <remarks>This function must be called between the <see cref="M:SiliconStudio.Paradox.Graphics.SpriteBatch.Begin(SiliconStudio.Paradox.Graphics.SpriteSortMode,SiliconStudio.Paradox.Graphics.Effect)"/> 
            and <see cref="!:SpriteBatch.End()"/> calls of the provided <paramref name="spriteBatch"/></remarks>
            <exception cref="T:System.ArgumentException">The provided frame index is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided spriteBatch is null</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Sprite.Clone">
            <summary>
            Clone the current sprite.
            </summary>
            <returns>A new instance of the current sprite.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Sprite.Name">
            <summary>
            Gets or sets the name of the sprite.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Sprite.Texture">
            <summary>
            The texture in which the sprite is contained
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Sprite.IsTransparent">
            <summary>
            Gets or sets the value indicating if the sprite contains transparent regions.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteEffects">
            <summary>
            Defines sprite mirroring options.
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spriteeffects.aspx'>SpriteEffects</a> class.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteEffects.None">
            <summary>
            No rotations specified.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Rotate 180 degrees around the Y axis before rendering.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Rotate 180 degrees around the X axis before rendering.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteEffects.FlipBoth">
            <summary>
            Rotate 180 degrees around both the X and Y axis before rendering.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteFrame">
            <summary>
            A sprite frame represents a single frame a sprite animation.
            It contains the region of the texture representing the frame and the time it is supposed to be displayed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteFrame.TextureRegion">
            <summary>
            The rectangle specifying the region of the texture to use for that frame.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteFrame.CenterBias">
            <summary>
            The bias to the frame center in pixels.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteFrame.Clone">
            <summary>
            Clone the current sprite frame instance.
            </summary>
            <returns>A new instance of the current sprite frame.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteGroup">
            <summary>
            Represent of group of <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteGroup.Sprites">
            <summary>
            The list of sprites.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SpriteGroup.FindSpriteIndex(System.String)">
            <summary>
            Find the index of a sprite in the group using its name.
            </summary>
            <param name="spriteName">The name of the sprite</param>
            <returns>The index value</returns>
            <remarks>If two sprites have the provided name then the first sprite found is returned</remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No sprite in the group have the given name</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteSortMode">
            <summary>
            Defines sprite sort-rendering options. 
            </summary>
            <remarks>
            Description is taken from original XNA <a href='http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.graphics.spritesortmode.aspx'>SpriteBatch</a> class.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteSortMode.Deferred">
            <summary>
            Sprites are not drawn until End is called. 
            End will apply graphics device settings and draw all the sprites in one batch, in the same order calls to Draw were received. 
            This mode allows Draw calls to two or more instances of SpriteBatch without introducing conflicting graphics device settings. SpriteBatch defaults to Deferred mode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteSortMode.Immediate">
            <summary>
            Begin will apply new graphics device settings, and sprites will be drawn within each Draw call. In Immediate mode there can only be one active SpriteBatch instance without introducing conflicting device settings. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteSortMode.Texture">
            <summary>
            Same as Deferred mode, except sprites are sorted by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteSortMode.BackToFront">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteSortMode.FrontToBack">
            <summary>
            Same as Deferred mode, except sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DeviceCreationFlags">
            <summary>	
            <p>Describes parameters that are used to create a device.</p>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DeviceCreationFlags.Debug">
            <summary>	
            Creates a device that supports the debug layer.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DeviceCreationFlags.BgraSupport">
            <summary>	
            Required for Direct2D interoperability with Direct3D resource.
            </summary>	
        </member>
        <!-- Badly formed XML comment ignored for member "F:SiliconStudio.Paradox.Graphics.DeviceCreationFlags.VideoSupport" -->
        <member name="F:SiliconStudio.Paradox.Graphics.DeviceCreationFlags.None">
            <summary>	
            None.	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DisplayOrientation">
            <summary>
            Describes the orientation of the display.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayOrientation.Default">
            <summary>
            The default value for the orientation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayOrientation.LandscapeLeft">
            <summary>
            Displays in landscape mode to the left.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayOrientation.LandscapeRight">
            <summary>
            Displays in landscape mode to the right.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DisplayOrientation.Portrait">
            <summary>
            Displays in portrait mode.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus">
            <summary>
            Describes the current status of a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.Normal">
            <summary>
            The device is running fine.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.Removed">
            <summary>
            The video card has been physically removed from the system, or a driver upgrade for the video card has occurred. The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.Hung">
            <summary>
            The application's device failed due to badly formed commands sent by the application. This is an design-time issue that should be investigated and fixed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.Reset">
            <summary>
            The device failed due to a badly formed command. This is a run-time issue; The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.InternalError">
            <summary>
            The driver encountered a problem and was put into the device removed state.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceStatus.InvalidCall">
            <summary>
            The application provided invalid parameter data; this must be debugged and fixed before the application is released.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsPresenter">
            <summary>
            This class is a frontend to <see cref="!:SwapChain"/> and <see cref="!:SwapChain1"/>.
            </summary>
            <remarks>
            In order to create a new <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsPresenter"/>, a <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.GraphicsDevice"/> should have been initialized first.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.PresentationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsPresenter"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="presentationParameters"> </param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.Present">
            <summary>
            Presents the Backbuffer to the screen.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.Resize(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Resizes the current presenter, by resizing the back buffer and the depth stencil buffer.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.OnDestroyed">
            <summary>
            Called when [destroyed].
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.OnRecreated">
            <summary>
            Called when [recreated].
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsPresenter.CreateDepthStencilBuffer">
            <summary>
            Creates the depth stencil buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.Description">
            <summary>
            Gets the description of this presenter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.DefaultViewport">
            <summary>
            Default viewport that covers the whole presenter surface.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.BackBuffer">
            <summary>
            Gets the default back buffer for this presenter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.DepthStencilBuffer">
            <summary>
            Gets the default depth stencil buffer for this presenter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.NativePresenter">
            <summary>
            Gets the underlying native presenter (can be a <see cref="T:SharpDX.DXGI.SwapChain"/> or <see cref="!:SharpDX.DXGI.SwapChain1"/> or null, depending on the platform).
            </summary>
            <value>The native presenter.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.IsFullScreen">
            <summary>
            Gets or sets fullscreen mode for this presenter.
            </summary>
            <value><c>true</c> if this instance is full screen; otherwise, <c>false</c>.</value>
            <remarks>This method is only valid on Windows Desktop and has no effect on Windows Metro.</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.PresentInterval">
            <summary>
            Gets or sets the <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsPresenter.PresentInterval"/>. Default is to wait for one vertical blanking.
            </summary>
            <value>The present interval.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService">
            <summary>
            Service providing method to access GraphicsDevice life-cycle.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService.DeviceCreated">
            <summary>
            Occurs when a device is created.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService.DeviceDisposing">
            <summary>
            Occurs when a device is disposing.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService.DeviceReset">
            <summary>
            Occurs when a device is reseted.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService.DeviceResetting">
            <summary>
            Occurs when a device is resetting.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.IGraphicsDeviceService.GraphicsDevice">
            <summary>
            Gets the current graphcs device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.RenderTargetGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.EffectProgram.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.EffectProgram.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResource">
            <summary>
            GraphicsResource class
            </summary>
            <summary>
            GraphicsResource abstract class
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsResource.NativeShaderResourceView">
            <summary>
            Gets or sets the ShaderResourceView attached to this GraphicsResource.
            Note that only Texture2D, Texture3D, RenderTarget2D, RenderTarget3D, DepthStencil are using this ShaderResourceView
            </summary>
            <value>The device child.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsResource.NativeUnorderedAccessView">
            <summary>
            Gets or sets the UnorderedAccessView attached to this GraphicsResource.
            </summary>
            <value>The device child.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Texture">
            <summary>
            Base class for texture resources.
            </summary>
            <typeparam name="T">Type of the <see cref="N:SharpDX.Direct3D11"/> texture resource.</typeparam>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetShaderResourceView(SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipIndex">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetRenderTargetView(SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> from this texture.
            </summary>
            <param name="viewType">Type of the view slice.</param>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.RenderTargetView"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetUnorderedAccessView(System.Int32,System.Int32)">
            <summary>
            Gets a specific <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/> from this texture.
            </summary>
            <param name="arrayOrDepthSlice">The texture array slice index.</param>
            <param name="mipMapSlice">The mip map slice index.</param>
            <returns>An <see cref="T:SharpDX.Direct3D11.UnorderedAccessView"/></returns>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.Description">
            <summary>
            Common description for the original texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.Width">
            <summary>
            The width of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.Height">
            <summary>
            The height of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.Depth">
            <summary>
            The depth of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.ViewFormat">
            <summary>
            The format of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.ViewType">
            <summary>
            The format of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.MipLevel">
            <summary>
            The miplevel index of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.ArraySlice">
            <summary>
            The array index of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.IsBlockCompressed">
            <summary>
            Gets a boolean indicating whether this <see cref="T:SiliconStudio.Paradox.Graphics.Texture"/> is a using a block compress format (BC1, BC2, BC3, BC4, BC5, BC6H, BC7).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.RowStride">
            <summary>
            The width stride in bytes (number of bytes per row).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.DepthStride">
            <summary>
            The depth stride in bytes (number of bytes per depth slice).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Texture.ParentTexture">
            <summary>
            The underlying parent texture (if this is a view).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.ToTexture``1(SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a view on this texture for a particular <see cref="F:SiliconStudio.Paradox.Graphics.Texture.ViewType"/>, array index (or zIndex for Texture3D), and mipmap index.
            </summary>
            <param name="viewType">The type of the view to create.</param>
            <param name="arrayOrDepthSlice"></param>
            <param name="mipMapSlice"></param>
            <returns>A new texture object that is bouded to the requested view.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.ToTexture(SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32)">
            <summary>
            Gets a view on this texture for a particular <see cref="F:SiliconStudio.Paradox.Graphics.Texture.ViewType"/>, array index (or zIndex for Texture3D), and mipmap index.
            </summary>
            <param name="viewType">The type of the view to create.</param>
            <param name="arraySlice"></param>
            <param name="mipMapSlice"></param>
            <returns>A new texture object that is bouded to the requested view.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetMipMapDescription(System.Int32)">
            <summary>
            Gets the mipmap description of this instance for the specified mipmap level.
            </summary>
            <param name="mipmap">The mipmap.</param>
            <returns>A description of a particular mipmap for this texture.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetSubResourceIndex(System.Int32,System.Int32)">
            <summary>
            Gets the absolute sub-resource index from the array and mip slice.
            </summary>
            <param name="arraySlice">The array slice index.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>A value equals to arraySlice * Description.MipLevels + mipSlice.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.CalculateWidth``1(System.Int32)">
            <summary>
            Calculates the expected width of a texture using a specified type.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <returns>The expected width</returns>
            <exception cref="T:System.ArgumentException">If the size is invalid</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.CalculatePixelDataCount``1(System.Int32)">
            <summary>
            Calculates the number of pixel data this texture is requiring for a particular mip level.
            </summary>
            <typeparam name="TData">The type of the T pixel data.</typeparam>
            <param name="mipLevel">The mip level.</param>
            <returns>The number of pixel data.</returns>
            <remarks>This method is used to allocated a texture data buffer to hold pixel datas: var textureData = new T[ texture.CalculatePixelCount&lt;T&gt;() ] ;.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.Clone``1">
            <summary>
            Makes a copy of this texture with type casting.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetData``1(System.Int32,System.Int32)">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <returns>The texture data.</returns>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetData``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetData``1(SiliconStudio.Paradox.Graphics.Texture,``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">To data.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.SetData``1(``0[],System.Int32,System.Int32,System.Nullable{SiliconStudio.Paradox.Graphics.ResourceRegion})">
            <summary>
            Copies the content an array of data on CPU memory to this texture into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working on the main graphics device. Use method with explicit graphics device to set data on a deferred context.
            See also unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.SetData(SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,System.Int32,System.Nullable{SiliconStudio.Paradox.Graphics.ResourceRegion})">
            <summary>
            Copies the content an data on CPU memory to this texture into GPU memory using the specified <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> (The graphics device could be deffered).
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working on the main graphics device. Use method with explicit graphics device to set data on a deferred context.
            See also unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.SetData``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],System.Int32,System.Int32,System.Nullable{SiliconStudio.Paradox.Graphics.ResourceRegion})">
            <summary>
            Copies the content an array of data on CPU memory to this texture into GPU memory using the specified <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> (The graphics device could be deffered).
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetData(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copies the content of this texture from GPU memory to a pointer on CPU memory using a specific staging resource.
            </summary>
            <param name="stagingTexture">The staging texture used to transfer the texture to.</param>
            <param name="toData">The pointer to data in CPU memory.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <returns><c>true</c> if data was correctly retrieved, <c>false</c> if <see cref="!:doNotWait"/> flag was true and the resource is still being used by the GPU for writing.</returns>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.SetData(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,System.Int32,System.Nullable{SiliconStudio.Paradox.Graphics.ResourceRegion})">
            <summary>
            Copies the content an data on CPU memory to this texture into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="arraySlice">The array slice index. This value must be set to 0 for Texture 3D.</param>
            <param name="mipSlice">The mip slice index.</param>
            <param name="region">Destination region</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            See unmanaged documentation for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.Load(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.IO.Stream,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Image,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <returns>A texture</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.Save(System.IO.Stream,SiliconStudio.Paradox.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileType">Type of the image file.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetDataAsImage">
            <summary>
            Gets the GPU content of this texture as an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/> on the CPU.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.GetDataAsImage(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Gets the GPU content of this texture to an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/> on the CPU.
            </summary>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.Save(System.IO.Stream,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.ImageFileType)">
            <summary>
            Saves this texture to a stream with a specified format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="stagingTexture">The staging texture used to temporary transfer the image from the GPU to CPU.</param>
            <param name="fileType">Type of the image file.</param>
            <exception cref="T:System.ArgumentException">If stagingTexture is not a staging texture.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture.CalculateMipMapCount(SiliconStudio.Paradox.Graphics.MipMapCount,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip map count from a requested level.
            </summary>
            <param name="requestedLevel">The requested level.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>The resulting mipmap count (clamp to [1, maxMipMapCount] for this texture)</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures">
            <summary>
            Features supported by a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </summary>
            <remarks>
            This class gives also features for a particular format, using the operator this[dxgiFormat] on this structure.
            </remarks>
            <summary>
            Features supported by a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </summary>
            <remarks>
            This class gives also features for a particular format, using the operator this[dxgiFormat] on this structure.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.GetMaximumMSAASampleCount(SharpDX.Direct3D11.Device,SharpDX.DXGI.Format)">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:SiliconStudio.Paradox.Graphics.PixelFormat"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="pixelFormat">The pixelFormat.</param>
            <returns>The maximum multisample count for this pixel pixelFormat</returns>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.Profile">
            <summary>
            Features level of the current device.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.HasComputeShaders">
            <summary>
            Boolean indicating if this device supports compute shaders, unordered access on structured buffers and raw structured buffers.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.HasDoublePrecision">
            <summary>
            Boolean indicating if this device supports shaders double precision calculations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.HasMultiThreadingConcurrentResources">
            <summary>
            Boolean indicating if this device supports concurrent resources in multithreading scenarios.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.HasDriverCommandLists">
            <summary>
            Boolean indicating if this device supports command lists in multithreading scenarios.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.IsProfiled">
            <summary>
            Is the device being profiled.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.Item(SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat"/> for the specified <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="dxgiFormat">The dxgi format.</param>
            <returns>Features for the specific format.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.Format">
            <summary>
            The <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.MSAALevelMax">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:SiliconStudio.Paradox.Graphics.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDeviceFeatures.FeaturesPerFormat.FormatSupport">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Texture2DBase">
            <summary>
            A Texture 2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <summary>
            A Texture 2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription,SiliconStudio.Paradox.Graphics.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Texture2DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description2D">The description.</param>
            <param name="dataBoxes">A variable-length parameters list containing data rectangles.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture2DBase,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.CheckMipLevels(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription@)">
            <summary>
            Check and modify if necessary the mipmap levels of the image (Troubles with DXT images whose resolution in less than 4x4 in DX9.x).
            </summary>
            <param name="device">The graphics device.</param>
            <param name="description">The texture description.</param>
            <returns>The updated texture description.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.CalculateMipCountFromSize(System.Int32,System.Int32)">
            <summary>
            Calculates the mip level from a specified size.
            </summary>
            <param name="size">The size.</param>
            <param name="minimumSizeLastMip">The minimum size of the last mip.</param>
            <returns>The mip level.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be &gt; 0;size</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2DBase.CalculateMipCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the mip level from a specified width,height,depth.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="minimumSizeLastMip">The minimum size of the last mip.</param>
            <returns>The mip level.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be &gt; 0;size</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FormatSupport">
            <summary>	
            <p>Which resources are supported for a given format and given device (see <strong><see cref="M:SharpDX.Direct3D11.Device.CheckFormatSupport(SharpDX.DXGI.Format)"/></strong> and <strong><see cref="M:SharpDX.Direct3D11.Device.CheckFeatureSupport(SharpDX.Direct3D11.Feature)"/></strong>).</p>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Buffer">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.InputAssemblyVertexBuffer">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.InputAssemblyIndexBuffer">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.StreamOutputBuffer">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Texture1D">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Texture2D">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Texture3D">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.TextureCube">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderLoad">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderSample">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderSampleComparison">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderSampleMonoText">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Mip">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.MipAutogen">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.RenderTarget">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Blendable">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.DepthStencil">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.CpuLockable">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.MultisampleResolve">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.Display">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.CastWithinBitLayout">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.MultisampleRendertarget">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.MultisampleLoad">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderGather">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.BackBufferCast">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.TypedUnorderedAccessView">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.ShaderGatherComparison">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FormatSupport.None">
            <summary>	
            None.	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SwapChainGraphicsPresenter">
            <summary>
            Graphics presenter for SwapChain.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SpriteTransformMode">
            <summary>
            Describe what a provided matrix represent.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteTransformMode.WorldTransform">
            <summary>
            The world matrix.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SpriteTransformMode.WorldProjectionTransform">
            <summary>
            The composition of the world and projection matrix.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SwizzleMode">
            <summary>
            Specify how to swizzle a vector.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SwizzleMode.None">
            <summary>
            Take the vector as is.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SwizzleMode.RRRR">
            <summary>
            Take the only the red component of the vector.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SwizzleMode.XXXX">
            <summary>
            Take the only the x component of the vector.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.TextAlignment">
            <summary>
            Specify the available text alignment when rendering text.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextAlignment.Left">
            <summary>
            The text will aligned on the left border.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextAlignment.Center">
            <summary>
            The text will be centered.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextAlignment.Right">
            <summary>
            The text will be aligned on the right border.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer">
            <summary>
            All-in-One Buffer class linked <see cref="T:SharpDX.Direct3D11.Buffer"/>.
            </summary>
            <remarks>
            This class is able to create constant buffers, indexelementCountrtex buffers, structured buffer, raw buffers, argument buffers.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.BufferDescription,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <param name="bufferFlags">Type of the buffer.</param>
            <param name="viewFormat">The view format.</param>
            <param name="dataPointer">The data pointer.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Recreate(System.IntPtr)">
            <summary>
            Explicitly recreate buffer with given data. Usually called after a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetShaderResourceView(SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for a particular <see cref="T:SiliconStudio.Paradox.Graphics.PixelFormat"/>.
            </summary>
            <param name="viewFormat">The view format.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/> for the particular view format.</returns>
            <remarks>
            The buffer must have been declared with <see cref="F:SiliconStudio.Paradox.Graphics.BufferFlags.ShaderResource"/>. 
            The ShaderResourceView instance is kept by this buffer and will be disposed when this buffer is disposed.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetRenderTargetView(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Gets a <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> for a particular <see cref="T:SiliconStudio.Paradox.Graphics.PixelFormat"/>.
            </summary>
            <param name="pixelFormat">The view format.</param>
            <param name="width">The width in pixels of the render target.</param>
            <returns>A <see cref="T:SharpDX.Direct3D11.RenderTargetView"/> for the particular view format.</returns>
            <remarks>The buffer must have been declared with <see cref="F:SiliconStudio.Paradox.Graphics.BufferFlags.RenderTarget"/>.
            The RenderTargetView instance is kept by this buffer and will be disposed when this buffer is disposed.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.InitializeViews">
            <summary>
            Initializes the views.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Buffer.Description">
            <summary>
            Gets the description of this buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Buffer.BufferFlags">
            <summary>
            Gets the type of this belementCount    /// </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Buffer.ViewFormat">
            <summary>
            Gets the default view format of this buffer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns>A new instance of this buffer as a staging resource</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of this instance</returns>
            <remarks>
            This method will not copy the content of the buffer to the clone
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData``1">
            <summary>
            Gets the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData``1(``0[])">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData``1(``0@)">
            <summary>
            Copies the content of this buffer to an array of data.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="toData">The destination buffer to receive a copy of the texture datas.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData``1(SiliconStudio.Paradox.Graphics.Buffer,``0@)">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData``1(SiliconStudio.Paradox.Graphics.Buffer,``0[])">
            <summary>
            Copies the content of this buffer from GPU memory to an array of data on CPU memory using a specific staging resource.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData``1(``0@,System.Int32)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData``1(``0[],System.Int32)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData(SiliconStudio.Paradox.Graphics.DataPointer,System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <typeparam name="TData">The type of the T data.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.GetData(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Paradox.Graphics.DataPointer)">
            <summary>
            Copies the content of this buffer from GPU memory to a CPU memory using a specific staging resource.
            </summary>
            <param name="stagingTexture">The staging buffer used to transfer the buffer.</param>
            <param name="toData">To data pointer.</param>
            <exception cref="T:System.ArgumentException">When strides is different from optimal strides, and TData is not the same size as the pixel format, or Width * Height != toData.Length</exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.SetData(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32)">
            <summary>
            Copies the content an array of data on CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">A data pointer.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.BufferDescription,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description of the buffer.</param>
            <param name="viewFormat">View format used if the buffer is used as a shared resource view.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="elementCount">Number of T elment in this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="bufferSize">Size of the buffer in bytes.</param>
            <param name="elementSize">Size of an element in the buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="value">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <typeparam name="T">Type of the buffer, to get the sizeof from.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Byte[],System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance from a byte array.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="initialValue">The initial value of this buffer.</param>
            <param name="elementSize">Size of an element. Must be equal to 2 or 4 for an index buffer, or to the size of a struct for a structured/typed buffer. Can be set to 0 for other buffers.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> instance.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="bufferFlags">The buffer flags to specify the type of buffer.</param>
            <param name="viewFormat">The view format must be specified if the buffer is declared as a shared resource view.</param>
            <param name="usage">The usage.</param>
            <returns>An instance of a new <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.RecreateWith``1(``0[])">
            <summary>
            Reload <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> from given data if <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> has been reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer">The data pointer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.RecreateWith(System.IntPtr)">
            <summary>
            Reload <see cref="T:SiliconStudio.Paradox.Graphics.Buffer"/> from given data if <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> has been reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer">The data pointer.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Recreate``1(``0[])">
            <summary>
            Explicitly recreate buffer with given data. Usually called after a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> reset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataPointer"></param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Buffer.ElementCount">
            <summary>
            Gets the number of elements.
            </summary>
            <remarks>
            This value is valid for structured buffers, raw buffers and index buffers that are used as a SharedResourceView.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Argument">
            <summary>
            Argument buffer helper methods.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Argument.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Argument.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Argument.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Argument buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Argument buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Argument buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Argument buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Cosntant">
            <summary>
            Constant buffer helper methods.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Cosntant.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new constant buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Cosntant.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Creates a new constant buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Cosntant.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Cosntant.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <typeparam name="T">Type of the constant buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Cosntant.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new constant buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> usage.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the constant buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A constant buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Index">
            <summary>
            Index buffer helper methods.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the index buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Byte[],System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="is32BitIndex">Set to true if the buffer is using a 32 bit index or false for 16 bit index.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Index.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new index buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the index buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A index buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Raw">
            <summary>
            Raw buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: ByteAddressBuffer or RWByteAddressBuffer for raw buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Raw.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Raw.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Raw.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Raw.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Raw buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Raw.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Raw buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Raw buffer.</param>
            <param name="additionalBindings">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="!:BufferFlags.IndexBuffer"/>)</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Raw buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SiliconStudio.Paradox.Graphics.Buffer.Structured" -->
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Structured.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="!:ShaderResourceView"/> and optionaly as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Structured.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer accessible as a <see cref="!:ShaderResourceView"/> and optionaly as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Structured.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the Structured buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Structured.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32,System.Boolean)">
            <summary>
            Creates a new Structured buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Structured buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <returns>A Structured buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SiliconStudio.Paradox.Graphics.Buffer.StructuredAppend" -->
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredAppend.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="!:ShaderResourceView"/> and as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredAppend.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer accessible as a <see cref="!:ShaderResourceView"/> and optionaly as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredAppend.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <typeparam name="T">Type of the StructuredAppend buffer to get the sizeof from</typeparam>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredAppend.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredAppend buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredAppend buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredAppend buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SiliconStudio.Paradox.Graphics.Buffer.StructuredCounter" -->
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredCounter.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="!:ShaderResourceView"/> and as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <param name="elementSize">Size of the struct.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredCounter.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer accessible as a <see cref="!:ShaderResourceView"/> and optionaly as a <see cref="!:UnorderedAccessView"/>.
            </summary>
            <typeparam name="T">Type of the element in the structured buffer</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of element in this buffer.</param>
            <returns>A Structured buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredCounter.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[])">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <typeparam name="T">Type of the StructuredCounter buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.StructuredCounter.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,System.Int32)">
            <summary>
            Creates a new StructuredCounter buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the StructuredCounter buffer.</param>
            <param name="elementSize">Size of the element.</param>
            <returns>A StructuredCounter buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Typed">
            <summary>
            Typed buffer helper methods.
            </summary>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Typed.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="count">The number of data with the following viewFormat.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Typed.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.PixelFormat,System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <typeparam name="T">Type of the Typed buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Typed.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,SiliconStudio.Paradox.Graphics.PixelFormat,System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Typed buffer <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Typed buffer.</param>
            <param name="viewFormat">The view format of the buffer.</param>
            <param name="isUnorderedAccess">if set to <c>true</c> this buffer supports unordered access (RW in HLSL).</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Typed buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer.Vertex">
            <summary>
            Vertex buffer helper methods.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size in bytes.</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0@,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,``0[],SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default"/> usage by default.
            </summary>
            <typeparam name="T">Type of the Vertex buffer to get the sizeof from</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="vertexBufferCount">Number of vertex in this buffer with the sizeof(T).</param>
            <param name="usage">The usage.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer.Vertex.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.DataPointer,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new Vertex buffer with <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> uasge by default.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="value">The value to initialize the Vertex buffer.</param>
            <param name="usage">The usage of this resource.</param>
            <returns>A Vertex buffer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DepthStencilBuffer">
            <summary>
            Depth stencil buffer
            </summary>
            <summary>
            Depth stencil buffer
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilBuffer.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilBuffer.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsAdapter">
            <summary>
            Provides methods to retrieve and manipulate graphics adapters. This is the equivalent to <see cref="T:SharpDX.DXGI.Adapter1"/>.
            </summary>
            <msdn-id>ff471329</msdn-id>	
            <unmanaged>IDXGIAdapter1</unmanaged>	
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>	
            <summary>
            This class represents a graphics adapter.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapter.#ctor(SharpDX.DXGI.Factory1,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsAdapter"/> class.
            </summary>
            <param name="defaultFactory">The default factory.</param>
            <param name="adapterOrdinal">The adapter ordinal.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapter.IsProfileSupported(SiliconStudio.Paradox.Graphics.GraphicsProfile)">
            <summary>
            Tests to see if the adapter supports the requested profile.
            </summary>
            <param name="graphicsProfile">The graphics profile.</param>
            <returns>true if the profile is supported</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapter.ToString">
            <summary>
            Return the description of this adapter
            </summary>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapter.Description">
            <summary>
            Gets the description of this adapter.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapter.VendorId">
            <summary>
            Gets or sets the vendor identifier.
            </summary>
            <value>
            The vendor identifier.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapter.IsDefaultAdapter">
            <summary>
            Determines if this instance of GraphicsAdapter is the default adapter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapter.Outputs">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsOutput"/> attached to this adapter
            </summary>
            <returns>The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsOutput"/> attached to this adapter.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory">
            <summary>
            Factory for <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsAdapter"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.InitializeInternal">
            <summary>
            Initializes all adapters with the specified factory.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Initialize">
            <summary>
            Initializes the GraphicsAdapter. On Desktop and WinRT, this is done statically.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Reset">
            <summary>
            Perform a <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Dispose"/> and <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Initialize"/> to re-initialize all adapters informations.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Dispose">
            <summary>
            Dispose all statically cached value by this instance.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Factory">
            <summary>
            Gets the <see cref="T:SharpDX.DXGI.Factory1"/> used by all GraphicsAdapter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Adapters">
            <summary>
            Collection of available adapters on the system.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsAdapterFactory.Default">
            <summary>
            Gets the default adapter. This property can be <c>null</c>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDevice">
            <summary>
                Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, and creates shaders. See <see cref="!:The+GraphicsDevice+class"/> to learn more about the class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> class using the default GraphicsAdapter
            and the Level10 <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsProfile"/>.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Begin">
            <summary>
                Marks context as active on the current thread.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.BeginProfile(SiliconStudio.Core.Mathematics.Color4,System.String)">
            <summary>
            Begins profiling.
            </summary>
            <param name="profileColor">Color of the profile.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Clear(SiliconStudio.Paradox.Graphics.DepthStencilBuffer,SiliconStudio.Paradox.Graphics.DepthStencilClearOptions,System.Single,System.Byte)">
            <summary>
            Clears the specified depth stencil buffer. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <param name="options">The options.</param>
            <param name="depth">The depth.</param>
            <param name="stencil">The stencil.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Clear(SiliconStudio.Paradox.Graphics.RenderTarget,SiliconStudio.Core.Mathematics.Color4)">
            <summary>
            Clears the specified render target. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="renderTarget">The render target.</param>
            <param name="color">The color.</param>
            <exception cref="T:System.ArgumentNullException">renderTarget</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Core.Mathematics.Vector4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Core.Mathematics.Int4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Core.Mathematics.UInt4)">
            <summary>
            Clears a read-write Buffer. This buffer must have been created with read-write/unordered access.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;buffer</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Vector4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;texture</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Int4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;texture</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ClearReadWrite(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.UInt4)">
            <summary>
            Clears a read-write Texture. This texture must have been created with read-write/unordered access.
            </summary>
            <param name="texture">The texture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">texture</exception>
            <exception cref="T:System.ArgumentException">Expecting buffer supporting UAV;texture</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.CopyCount(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Paradox.Graphics.Buffer,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Dispatch(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Dispatch(SiliconStudio.Paradox.Graphics.Buffer,System.Int32)">
            <summary>
            Dispatches the specified indirect buffer.
            </summary>
            <param name="indirectBuffer">The indirect buffer.</param>
            <param name="offsetInBytes">The offset information bytes.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Draw(SiliconStudio.Paradox.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Draw non-indexed, non-instanced primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="vertexCount">Number of vertices to draw.</param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the <strong>SV_TargetId</strong> system-value semantic.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawAuto(SiliconStudio.Paradox.Graphics.PrimitiveType)">
            <summary>
            Draw geometry of an unknown size.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawIndexed(SiliconStudio.Paradox.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw indexed, non-instanced primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="indexCount">Number of indices to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawIndexedInstanced(SiliconStudio.Paradox.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw indexed, instanced primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawIndexedInstanced(SiliconStudio.Paradox.Graphics.PrimitiveType,SiliconStudio.Paradox.Graphics.Buffer,System.Int32)">
            <summary>
            Draw indexed, instanced, GPU-generated primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="argumentsBuffer">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawInstanced(SiliconStudio.Paradox.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw non-indexed, instanced primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="vertexCountPerInstance">Number of vertices to draw.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startVertexLocation">Index of the first vertex.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawInstanced(SiliconStudio.Paradox.Graphics.PrimitiveType,SiliconStudio.Paradox.Graphics.Buffer,System.Int32)">
            <summary>
            Draw instanced, GPU-generated primitives.
            </summary>
            <param name="primitiveType">Type of the primitive to draw.</param>
            <param name="argumentsBuffer">An arguments buffer</param>
            <param name="alignedByteOffsetForArgs">Offset in <em>pBufferForArgs</em> to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.EnableProfile(System.Boolean)">
            <summary>
            Enables profiling.
            </summary>
            <param name="enabledFlag">if set to <c>true</c> [enabled flag].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.End">
            <summary>
                Unmarks context as active on the current thread.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.EndProfile">
            <summary>
            Ends profiling.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ExecuteCommandList(SiliconStudio.Paradox.Graphics.ICommandList)">
            <summary>
            Executes a deferred command list.
            </summary>
            <param name="commandList">The deferred command list.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.FinishCommandList">
            <summary>
            Finishes a deffered command list.
            </summary>
            <returns>A deferred command list.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.MapSubresource(SiliconStudio.Paradox.Graphics.GraphicsResource,System.Int32,SiliconStudio.Paradox.Graphics.MapMode,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Maps a subresource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="subResourceIndex">Index of the sub resource.</param>
            <param name="mapMode">The map mode.</param>
            <param name="doNotWait">if set to <c>true</c> this method will return immediately if the resource is still being used by the GPU for writing. Default is false</param>
            <param name="offsetInBytes">The offset information in bytes.</param>
            <param name="lengthInBytes">The length information in bytes.</param>
            <returns>Pointer to the sub resource to map.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.NewDeferred">
            <summary>
            Creates a new deferred device used for multithread deferred rendering.
            </summary>
            <returns>GraphicsDevice.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.ResetTargets">
            <summary>
            Unbinds all depth-stencil buffer and render targets from the output-merger stage.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetBlendState(SiliconStudio.Paradox.Graphics.BlendState)">
            <summary>
            Set the blend state of the output-merger stage with a white default blend color and sample mask set to 0xffffffff. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="blendState">a blend-state</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetBlendState(SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Core.Mathematics.Color4,System.Int32)">
            <summary>
            Set the blend state of the output-merger stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="blendState">a blend-state</param>
            <param name="blendFactor">Blend factors, one for each RGBA component. This requires a blend state object that specifies the <see cref="F:SiliconStudio.Paradox.Graphics.Blend.BlendFactor"/></param>
            <param name="multiSampleMask">32-bit sample coverage. The default value is 0xffffffff.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetBlendState(SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Core.Mathematics.Color4,System.UInt32)">
            <summary>
            Set the blend state of the output-merger stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="blendState">a blend-state</param>
            <param name="blendFactor">Blend factors, one for each RGBA component. This requires a blend state object that specifies the <see cref="F:SiliconStudio.Paradox.Graphics.Blend.BlendFactor"/></param>
            <param name="multiSampleMask">32-bit sample coverage. The default value is 0xffffffff.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetDepthStencilState(SiliconStudio.Paradox.Graphics.DepthStencilState,System.Int32)">
            <summary>
            Sets the depth-stencil state of the output-merger stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="depthStencilState">a depth-stencil state</param>
            <param name="stencilReference">Reference value to perform against when doing a depth-stencil test.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRasterizerState(SiliconStudio.Paradox.Graphics.RasterizerState)">
            <summary>
            Set the <strong>rasterizer state</strong> for the rasterizer stage of the pipeline. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="rasterizerState">The rasterizser state to set on this device.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRenderTarget(SiliconStudio.Paradox.Graphics.DepthStencilBuffer,SiliconStudio.Paradox.Graphics.RenderTarget)">
            <summary>
            Binds a depth-stencil buffer and a single render target to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRenderTargets(SiliconStudio.Paradox.Graphics.DepthStencilBuffer,SiliconStudio.Paradox.Graphics.RenderTarget[])">
            <summary>
            Binds a depth-stencil buffer and a set of render targets to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilView">A view of the depth-stencil buffer to bind.</param>
            <param name="renderTargetViews">A set of render target views to bind.</param>
            <exception cref="T:System.ArgumentNullException">renderTargetViews</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetScissorRectangles(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Binds a single scissor rectangle to the rasterizer stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetScissorRectangles(SiliconStudio.Core.Mathematics.Rectangle[])">
            <summary>
            Binds a set of scissor rectangles to the rasterizer stage. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <param name="scissorRectangles">The set of scissor rectangles to bind.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetStreamTargets(SiliconStudio.Paradox.Graphics.Buffer[])">
            <summary>
            Sets the stream targets.
            </summary>
            <param name="buffers">The buffers.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetVertexArrayObject(SiliconStudio.Paradox.Graphics.VertexArrayObject)">
            <summary>
            Sets the vertex array object.
            </summary>
            <param name="vertexArrayObject">The vertex array object.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetViewport(SiliconStudio.Paradox.Graphics.Viewport)">
            <summary>
                Gets or sets the 1st viewport. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetViewport(System.Int32,SiliconStudio.Paradox.Graphics.Viewport)">
            <summary>
                Gets or sets the 1st viewport. See <see cref="!:Render+states"/> to learn how to use it.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.UnsetReadWriteBuffers">
            <summary>
                Unsets the read/write buffers.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.UnsetRenderTargets">
            <summary>
            Unsets the render targets.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetConstantBuffer(SiliconStudio.Paradox.Shaders.ShaderStage,System.Int32,SiliconStudio.Paradox.Graphics.Buffer)">
            <summary>
                Sets a constant buffer to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="buffer">The constant buffer to set.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetSamplerState(SiliconStudio.Paradox.Shaders.ShaderStage,System.Int32,SiliconStudio.Paradox.Graphics.SamplerState)">
            <summary>
                Sets a sampler state to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="samplerState">The sampler state to set.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetShaderResourceView(SiliconStudio.Paradox.Shaders.ShaderStage,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResource)">
            <summary>
                Sets a shader resource view to the shader pipeline.
            </summary>
            <param name="stage">The shader stage.</param>
            <param name="slot">The binding slot.</param>
            <param name="shaderResourceView">The shader resource view.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetUnorderedAccessView(SiliconStudio.Paradox.Shaders.ShaderStage,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResource)">
            <summary>
                Sets an unordered access view to the shader pipeline.
            </summary>
            <param name="stage">The stage.</param>
            <param name="slot">The slot.</param>
            <param name="unorderedAccessView">The unordered access view.</param>
            <exception cref="T:System.ArgumentException">Invalid stage.;stage</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.InitializePlatformDevice(SiliconStudio.Paradox.Graphics.GraphicsProfile[],SiliconStudio.Paradox.Graphics.DeviceCreationFlags,System.Object)">
            <summary>
                Initializes the specified device.
            </summary>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <param name="deviceCreationFlags">The device creation flags.</param>
            <param name="windowHandle">The window handle.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.PrepareDraw(SiliconStudio.Paradox.Graphics.PrimitiveType)">
            <summary>
                Prepares a draw call. This method is called before each Draw() method to setup the correct Primitive, InputLayout and VertexBuffers.
            </summary>
            <param name="primitiveType">Type of the primitive.</param>
            <exception cref="T:System.InvalidOperationException">Cannot GraphicsDevice.Draw*() without an effect being previously applied with Effect.Apply() method</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsDevice.Features">
            <summary>
                Gets the features supported by this graphics device.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.#ctor(SiliconStudio.Paradox.Graphics.GraphicsAdapter,SiliconStudio.Paradox.Graphics.GraphicsProfile[],SiliconStudio.Paradox.Graphics.DeviceCreationFlags,SiliconStudio.Paradox.Graphics.WindowHandle)">
            <summary>
                Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> class.
            </summary>
            <param name="adapter">The graphics adapter.</param>
            <param name="profile">The graphics profile.</param>
            <param name="deviceCreationFlags">The device creation flags.</param>
            <param name="windowHandle">The window handle.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.New(SiliconStudio.Paradox.Graphics.DeviceCreationFlags,SiliconStudio.Paradox.Graphics.GraphicsProfile[])">
            <summary>
                Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> class.
            </summary>
            <param name="creationFlags">The creation flags.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>
                An instance of <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.New(SiliconStudio.Paradox.Graphics.GraphicsAdapter,SiliconStudio.Paradox.Graphics.DeviceCreationFlags,SiliconStudio.Paradox.Graphics.GraphicsProfile[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="creationFlags">The creation flags.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>An instance of <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.New(SiliconStudio.Paradox.Graphics.GraphicsAdapter,SiliconStudio.Paradox.Graphics.DeviceCreationFlags,SiliconStudio.Paradox.Graphics.WindowHandle,SiliconStudio.Paradox.Graphics.GraphicsProfile[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="creationFlags">The creation flags.</param>
            <param name="windowHandle">The window handle.</param>
            <param name="graphicsProfiles">The graphics profiles.</param>
            <returns>An instance of <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawTexture(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Draws a fullscreen texture using a <see cref="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearClamp"/> sampler. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawTexture(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.SamplerState)">
            <summary>
            Draws a fullscreen texture using the specified sampler. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.</param>
            <param name="sampler">The sampler.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawTexture(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Core.Mathematics.Color4)">
            <summary>
            Draws a fullscreen texture using a <see cref="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearClamp"/> sampler
            and the texture color multiplied by a custom color. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.DrawTexture(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Core.Mathematics.Color4)">
            <summary>
            Draws a fullscreen texture using the specified sampler
            and the texture color multiplied by a custom color. See <see cref="!:Draw+a+texture"/> to learn how to use it.
            </summary>
            <param name="texture">The texture. Expecting an instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.</param>
            <param name="sampler">The sampler.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Present">
            <summary>
                Presents the current Presenter.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRenderTarget(SiliconStudio.Paradox.Graphics.DepthStencilBuffer)">
            <summary>
                Sets a new depthStencilBuffer to this GraphicsDevice. If there is any RenderTarget already bound, it will be unbinded. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="depthStencilBuffer">The depth stencil.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRenderTarget(SiliconStudio.Paradox.Graphics.RenderTarget)">
            <summary>
            Binds a single render target to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.
            </summary>
            <param name="renderTargetView">A view of the render target to bind.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetRenderTargets(SiliconStudio.Paradox.Graphics.RenderTarget[])">
            <summary>
                <p>Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage. See <see cref="!:Textures+and+render+targets"/> to learn how to use it.</p>
            </summary>
            <param name="renderTargetViews">A set of render target views to bind.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.GetOrCreateSharedData``1(SiliconStudio.Paradox.Graphics.GraphicsDeviceSharedDataType,System.Object,SiliconStudio.Paradox.Graphics.GraphicsDevice.CreateSharedData{``0})">
            <summary>
                Gets a shared data for this device context with a delegate to create the shared data if it is not present.
            </summary>
            <typeparam name="T">Type of the shared data to get/create.</typeparam>
            <param name="type">Type of the data to share.</param>
            <param name="key">The key of the shared data.</param>
            <param name="sharedDataCreator">The shared data creator.</param>
            <returns>
                An instance of the shared data. The shared data will be disposed by this <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/> instance.
            </returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.GraphicsDeviceStatus">
            <summary>
                Gets the status of this device.
            </summary>
            <value>The graphics device status.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Viewport">
            <summary>
                Gets the first viewport.
            </summary>
            <value>The first viewport.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.InputLayoutManager">
            <summary>
                Gets the input layout manager.
            </summary>
            <value>The input layout manager.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.NativeDevice">
            <summary>
                Gets the native device.
            </summary>
            <value>The native device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.NativeDeviceContext">
            <summary>
            Gets the native device context.
            </summary>
            <value>The native device context.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.PrimitiveType">
            <summary>
            Sets the type of the primitive.
            </summary>
            <value>The type of the primitive.</value>
        </member>
        <member name="E:SiliconStudio.Paradox.Graphics.GraphicsDevice.Disposing">
            <summary>
            Occurs while this component is disposing and before it is disposed.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Adapter">
            <summary>
                Gets the adapter this instance is attached to.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BackBuffer">
            <summary>
                Gets the back buffer sets by the current <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Presenter"/> setup on this device.
            </summary>
            <value>
                The back buffer. The returned value may be null if no <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsPresenter"/> are setup on this device.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BlendStates">
            <summary>
                Gets the <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BlendStates"/> factory.
            </summary>
            <value>
                The <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BlendStates"/> factory.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.DepthStencilBuffer">
            <summary>
                Gets the depth stencil buffer sets by the current <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Presenter"/> setup on this device.
            </summary>
            <value>
                The depth stencil buffer. The returned value may be null if no <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsPresenter"/> are setup on this device or no depth buffer was allocated.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.DepthStencilStates">
            <summary>
                Gets the <see cref="T:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory"/> factory.
            </summary>
            <value>
                The <see cref="T:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory"/> factory.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.IsDebugMode">
            <summary>
                Gets a value indicating whether this instance is in debug mode.
            </summary>
            <value>
                <c>true</c> if this instance is debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.IsDeferred">
            <summary>
                Gets a value indicating whether this instance is a deferred graphics device context.
            </summary>
            <value>
                <c>true</c> if this instance is deferred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.IsProfilingSupported">
            <summary>
                Gets a value indicating whether this instance supports GPU markers and profiling.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Parameters">
            <summary>
                Gets the parameters attached to this particular device. This Parameters are used to override <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/> parameters.
            </summary>
            <value>The parameters used to override all effects.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.Presenter">
            <summary>
                Gets or sets the current presenter use by the <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.Present"/> method.
            </summary>
            <value>The current presenter.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.RasterizerStates">
            <summary>
                Gets the <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.RasterizerStates"/> factory.
            </summary>
            <value>
                The <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.RasterizerStates"/> factory.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.RootDevice">
            <summary>
                Gets the root device.
            </summary>
            <value>The root device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.SamplerStates">
            <summary>
                Gets the <see cref="T:SiliconStudio.Paradox.Graphics.SamplerStateFactory"/> factory.
            </summary>
            <value>
                The <see cref="T:SiliconStudio.Paradox.Graphics.SamplerStateFactory"/> factory.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.ThreadIndex">
            <summary>
                Gets or sets the index of the thread.
            </summary>
            <value>The index of the thread.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.ShaderProfile">
            <summary>
            Gets the shader profile.
            </summary>
            <value>The shader profile.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsDevice.CreateSharedData`1">
            <summary>
                A delegate called to create shareable data. See remarks.
            </summary>
            <typeparam name="T">Type of the data to create.</typeparam>
            <returns>A new instance of the data to share.</returns>
            <remarks>
                Because this method is being called from a lock region, this method should not be time consuming.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsProfileHelper.ToFeatureLevel(SiliconStudio.Paradox.Graphics.GraphicsProfile[])">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsProfileHelper.ToFeatureLevel(SiliconStudio.Paradox.Graphics.GraphicsProfile)">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.GraphicsProfileHelper.FromFeatureLevel(SharpDX.Direct3D.FeatureLevel)">
            <summary>
            Returns a GraphicsProfile from a FeatureLevel.
            </summary>
            <param name="level">The level.</param>
            <returns>associated GraphicsProfile</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.RenderTarget">
            <summary>
            A renderable Texture2D.
            </summary>
            <summary>
            A renderable texture view.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RenderTarget.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="texture2D">The texture2D.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RenderTarget.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="texture2D">The texture2D.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RenderTarget.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RenderTarget.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.Texture">
            <summary>
            The underlying texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.Width">
            <summary>
            Gets the width in texel.
            </summary>
            <value>The width.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.Height">
            <summary>
            Gets the height in texel.
            </summary>
            <value>The height.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.ViewFormat">
            <summary>
            The format of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.ViewType">
            <summary>
            The format of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.MipLevel">
            <summary>
            The miplevel index of this texture view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RenderTarget.ArraySlice">
            <summary>
            The array index of this texture view.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.RenderTarget.NativeRenderTargetView">
            <summary>
            Gets or sets the RenderTargetView attached to this GraphicsResource.
            Note that only Texture2D, Texture3D, RenderTarget2D, RenderTarget3D, DepthStencil are using this ShaderResourceView
            </summary>
            <value>The device child.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SamplerState">
            <summary>
            Describes a sampler state used for texture sampling.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SamplerState.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.SamplerStateDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.SamplerState"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="name">The name.</param>
            <param name="samplerStateDescription">The sampler state description.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SamplerState.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SamplerState.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerState.Description">
            <summary>
            Gets the sampler state description.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Texture1D">
            <summary>
            A Texture 1D frontend to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
            <summary>
            A Texture 1D frontend to <see cref="T:SharpDX.Direct3D11.Texture1D"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription,SiliconStudio.Paradox.Graphics.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="!:Texture1DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description1D">The description.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture1D,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="!:Texture1DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description1D">The description.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,``0[],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the initial data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">Texture data. Size of must be equal to sizeof(Format) * width </param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (Texture1D Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.IntPtr,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the initial data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">Texture data. Size of must be equal to sizeof(Format) * width </param>
            <param name="dataPtr">Data ptr</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (Texture1D Array), second dimension is the mipmap, the third is the texture data for a particular mipmap.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Image,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> directly from an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture1D.Load(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.IO.Stream,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a 1D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 1D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Texture2D">
            <summary>
            A Texture 2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <summary>
            A Texture 2D frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription,SiliconStudio.Paradox.Graphics.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.Texture2DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description2D">The description.</param>
            <param name="dataBoxes">A variable-length parameters list containing data rectangles.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture2D,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The texture.</param>
            <param name="viewType">Type of the view.</param>
            <param name="arraySlice">The array slice.</param>
            <param name="mipMapSlice">The mip map slice.</param>
            <param name="viewFormat">The view format.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.ToDepthStencilBuffer(System.Boolean)">
            <summary>
            Gets a new instance of a depth stencil buffer linked to this texture.
            </summary>
            <param name="isReadOnly">if set to <c>true</c> the returned depth stencil buffer view is a read-only view, false otherwise..</param>
            <returns>A depth stencil buffer view.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.ToDepthTextureCompatible">
            <summary>
            Creates a texture that can be used as a ShaderResource from an existing depth texture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture2D)">
            <summary>
            Creates a new texture from a <see cref="!:Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="!:Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Creates a new texture from a <see cref="!:Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="!:Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,``0[],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> with a single level of mipmap.
            </summary>
            <typeparam name="T">Type of the pixel data to upload to the texture.</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="textureData">The texture data for a single mipmap and a single array slice. See remarks</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.</returns>
            <remarks>
            Each value in textureData is a pixel in the destination texture.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.DataBox[],SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="textureData">Texture datas through an array of <see cref="T:SiliconStudio.Paradox.Graphics.DataBox"/> </param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Image,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> directly from an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture2D.Load(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.IO.Stream,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a 2D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 2D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Texture3D">
            <summary>
            A Texture 3D frontend to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
            <summary>
            A Texture 3D frontend to <see cref="T:SharpDX.Direct3D11.Texture3D"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription,SiliconStudio.Paradox.Graphics.DataBox[])">
            <summary>
            Initializes a new instance of the <see cref="!:Texture3DBase"/> class.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description3D">The description.</param>
            <param name="dataRectangles">A variable-length parameters list containing data rectangles.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Texture3D,SiliconStudio.Paradox.Graphics.ViewType,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Specialised constructor for use only by derived classes.
            </summary>
            <param name="device">The device.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Creates a new texture from a <see cref="!:Direct3D11.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="!:Direct3D11.Texture3D"/>.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.
            </returns>
            <unmanaged-short>ID3D11Device::CreateTexture3D</unmanaged-short>	
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> with a single mipmap.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,``0[],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> with texture data for the firs map.
            </summary>
            <typeparam name="T">Type of the data to upload to the texture</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureData">The texture data, width * height * depth datas </param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of is an array ot Texture3D Array
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.DataBox[],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Image,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> directly from an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Texture3D.Load(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.IO.Stream,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a 3D texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="textureFlags">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type 3D</exception>
            <returns>A texture</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.TextureCube">
            <summary>
            A TextureCube frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
            <summary>
            A TextureCube frontend to <see cref="T:SharpDX.Direct3D11.Texture2D"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.Clone">
            <summary>
            Makes a copy of this texture.
            </summary>
            <remarks>
            This method doesn't copy the content of the texture.
            </remarks>
            <returns>
            A copy of this texture.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.ToStaging">
            <summary>
            Return an equivalent staging texture CPU read-writable from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Creates a new texture from a <see cref="!:Texture2DDescription"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="description">The description.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.TextureCube)">
            <summary>
            Creates a new texture from a <see cref="!:Direct3D11.Texture2D"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="texture">The native texture <see cref="!:Direct3D11.Texture2D"/>.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="isUnorderedReadWrite">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="isUnorderedReadWrite">true if the texture needs to support unordered read write.</param>
            <returns>
            A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> class.
            </returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New``1(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,``0[][],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> from a initial data..
            </summary>
            <typeparam name="T">Type of a pixel data</typeparam>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="isUnorderedReadWrite">true if the texture needs to support unordered read write.</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.DataBox[],SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> from a initial data..
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="usage">The usage.</param>
            <param name="isUnorderedReadWrite">true if the texture needs to support unordered read write.</param>
            <param name="textureData">an array of 6 textures. See remarks</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> class.</returns>
            <remarks>
            The first dimension of mipMapTextures describes the number of array (TextureCube Array), the second is the texture data for a particular cube face.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Graphics.Image,SiliconStudio.Paradox.Graphics.TextureFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Creates a new <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> directly from an <see cref="T:SiliconStudio.Paradox.Graphics.Image"/>.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="image">An image in CPU memory.</param>
            <param name="isUnorderedReadWrite">true if the texture needs to support unordered read write.</param>
            <param name="usage">The usage.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/> class.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureCube.Load(SiliconStudio.Paradox.Graphics.GraphicsDevice,System.IO.Stream,System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Loads a Cube texture from a stream.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="stream">The stream to load the texture from.</param>
            <param name="isUnorderedReadWrite">True to load the texture with unordered access enabled. Default is false.</param>
            <param name="usage">Usage of the resource. Default is <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable"/> </param>
            <exception cref="T:System.ArgumentException">If the texture is not of type Cube</exception>
            <returns>A texture</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexArrayObject.OnDestroyed">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexArrayObject.OnRecreate">
            <inheritdoc/>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexArrayObject.Layout">
            <summary>
            Stores the layout associated with this VertexArrayObject
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.UIBatch">
            <summary>
            A utility class to batch and draw UI images.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.UIBatch.viewProjectionMatrix">
            <summary>
            The view projection matrix that will be used for the current begin/end draw calls.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Graphics.UIBatch"/>.
            </summary>
            <param name="device">A valid instance of <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.Begin(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Paradox.Graphics.DepthStencilState,System.Int32)">
            <summary>
            Begins a image batch rendering using the specified blend state, depth stencil and a view-projection transformation matrix. 
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None).
            </summary>
            <param name="blendState">Blending options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="viewProjection">The view projection matrix used for this series of draw calls</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.Begin(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Paradox.Graphics.BlendState,SiliconStudio.Paradox.Graphics.SamplerState,SiliconStudio.Paradox.Graphics.RasterizerState,SiliconStudio.Paradox.Graphics.DepthStencilState,System.Int32)">
            <summary>
            Begins a image batch rendering using the specified blend state, sampler, depth stencil, rasterizer state objects, and the view-projection transformation matrix. 
            Passing null for any of the state objects selects the default default state objects (BlendState.AlphaBlend, DepthStencilState.None, RasterizerState.CullCounterClockwise, SamplerState.LinearClamp). 
            </summary>
            <param name="blendState">Blending options.</param>
            <param name="samplerState">Texture sampling options.</param>
            <param name="depthStencilState">Depth and stencil options.</param>
            <param name="rasterizerState">Rasterization options.</param>
            <param name="viewProjection">The view projection matrix used for this series of draw calls</param>
            <param name="stencilValue">The value of the stencil buffer to take as reference</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.DrawRectangle(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a rectangle of the provided size at the position specified by the world matrix having the provided color.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the rectangle in the world</param>
            <param name="elementSize">The size of the rectangle</param>
            <param name="color">The color of the rectangle</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.DrawCube(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a cube of the provided size at the position specified by the world matrix having the provided color.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the cube in the world</param>
            <param name="elementSize">The size of the cube</param>
            <param name="color">The color of the cube</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.DrawBackground(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Color@,System.Int32)">
            <summary>
            Draw a colored background having provided size at the position specified by the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix specifying the position of the element in the world</param>
            <param name="elementSize">The size of the element</param>
            <param name="color">The color of the element</param>
            <param name="depthBias">The depth bias to use when drawing the element</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.DrawImage(SiliconStudio.Paradox.Graphics.Texture2D,SiliconStudio.Paradox.Graphics.Texture2D,SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Rectangle@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Vector2@,SiliconStudio.Core.Mathematics.Vector4@,SiliconStudio.Core.Mathematics.Color@,System.Int32,SiliconStudio.Paradox.Graphics.ImageRegionRotation,SiliconStudio.Paradox.Graphics.SwizzleMode,System.Boolean)">
            <summary>
            Batch a new border image draw to the draw list.
            </summary>
            <param name="texture">The texture to use during the draw</param>
            <param name="texture1">An optional texture that can be used to substitute <paramref name="texture"/>'s alpha</param>
            <param name="worldMatrix">The world matrix of the element</param>
            <param name="sourceRectangle">The rectangle indicating the source region of the texture to use</param>
            <param name="elementSize">The size of the ui element</param>
            <param name="imageSize">The ideal size of the texture region to display on the screen</param>
            <param name="borderSize">The size of the borders in the texture (normalized units: (0.1, 0.2, 0.3, 0.4) -> 10% left, 20% right, 30% top, 40% bottom)</param>
            <param name="color">The color to apply to the texture image.</param>
            <param name="depthBias">The depth bias of the ui element</param>
            <param name="imageRotation">The rotation to apply on the image uv</param>
            <param name="swizzle">Swizzle mode indicating the swizzle use when sampling the texture in the shader</param>
            <param name="snapImage">Indicate if the image needs to be snapped or not</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.UIBatch.DrawString(SiliconStudio.Paradox.Graphics.SpriteFont,System.String,System.Single,SiliconStudio.Core.Mathematics.Vector2@,SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector2@,SiliconStudio.Core.Mathematics.Color@,SiliconStudio.Paradox.Graphics.TextAlignment,System.Int32,System.Boolean)">
            <summary>
            Batch the draws required to display the provided text to the draw list.
            </summary>
            <param name="fontSize">The size to use when rendering the font</param>
            <param name="fontInternalScale">The size of the font glyphs to use in pixels</param>
            <param name="text">The text to draw on the screen</param>
            <param name="worldMatrix">The world matrix of the element</param>
            <param name="elementSize">The 2D size of the element to draw in virtual pixels</param>
            <param name="color">The color of the text to draw</param>
            <param name="alignment">The alignment of the text to draw</param>
            <param name="depthBias">The depth bias of the ui element</param>
            <param name="font">The fond to use to draw the text</param>
            <param name="snapText">Indicate if the rendered string should be snapped to the closed pixel.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.UIBatch.PrimitiveType">
            <summary>
            The primitive type to draw for an element.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.UIBatch.PrimitiveType.Rectangle">
            <summary>
            A simple rectangle composed of 2 triangles
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.UIBatch.PrimitiveType.BorderRectangle">
            <summary>
            A rectangle with borders tessellated as 3x3 rectangles
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.UIBatch.PrimitiveType.Cube">
            <summary>
            A simple cube (not necessary square faces)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.UIBatch.PrimitiveType.ReverseCube">
            <summary>
            A cube with back and front faces inversed.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPosition2">
            <summary>
            Describes a custom vertex format structure that contains position as a Vector2. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPosition2.#ctor(SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPosition2.Position">
            <summary>
            XY position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPosition2.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPosition2.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.#ctor(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle">
            <summary>
            Describes a custom vertex format structure that contains position, color, texture and swizzle information. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.#ctor(SiliconStudio.Core.Mathematics.Vector4,SiliconStudio.Core.Mathematics.Color,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Paradox.Graphics.SwizzleMode)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionColorTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="color">The color of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
            <param name="swizzle">The swizzle mode</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.Swizzle">
            <summary>
            The Swizzle mode
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionColorTextureSwizzle.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture">
            <summary>
            Describes a custom vertex format structure that contains position, color and 10 texture coordinates information. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.#ctor(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="normal">The vertex normal.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.TextureCoordinate0">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalMultiTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.#ctor(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="normal">The vertex normal.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionNormalTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexPositionTexture">
            <summary>
            Describes a custom vertex format structure that contains position and color information. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexPositionTexture.#ctor(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new <see cref="T:SiliconStudio.Paradox.Graphics.VertexPositionTexture"/> instance.
            </summary>
            <param name="position">The position of this vertex.</param>
            <param name="textureCoordinate">UV texture coordinates.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionTexture.Position">
            <summary>
            XYZ position.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionTexture.TextureCoordinate">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionTexture.Size">
            <summary>
            Defines structure byte size.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexPositionTexture.Layout">
            <summary>
            The vertex layout of this struct.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.WindowHandle">
            <summary>
            A platform specific window handle.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.WindowHandle.#ctor(SiliconStudio.Paradox.Games.AppContextType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.WindowHandle"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="nativeHandle">The native handle.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.WindowHandle.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.WindowHandle.NativeHandle">
            <summary>
            The native handle.
            </summary>
        </member>
        <member name="T:SiliconStudio.ParadoxVersion">
            <summary>
            Internal version used to identify Paradox version.
            </summary>
            <remarks>
            Note: When modifying the version here, it must be modified also in the Paradox.pdxpkg 
            </remarks>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAssemblyAsText">
            <summary>
            The .NET current assembly version as text, not including pre-release (alpha, beta...) information.
            </summary>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAsText">
            <summary>
            The Store current version as text, including pre-release (alpha, beta...) information
            </summary>
            <remarks>
            Version number as described in http://docs.nuget.org/docs/reference/versioning
            When using pre-release (alpha, beta, rc...etc.) and because the order of the release is in alphabetical order,
            please use a double digit like alpha00 alpha01...etc. in order to make sure that we will follow the correct
            order for the versions.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.None">
            <summary>
            Creates a none buffer.
            </summary>
            <remarks>
            This is equivalent to <see cref="!:BindFlags.None"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.ConstantBuffer">
            <summary>
            Creates a constant buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.IndexBuffer">
            <summary>
            Creates an index buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.VertexBuffer">
            <summary>
            Creates a vertex buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.RenderTarget">
            <summary>
            Creates a render target buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.ShaderResource">
            <summary>
            Creates a buffer usable as a ShaderResourceView.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.UnorderedAccess">
            <summary>
            Creates an unordered access buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.StructuredBuffer">
            <summary>
            Creates a structured buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.StructuredAppendBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and append.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.StructuredCounterBuffer">
            <summary>
            Creates a structured buffer that supports unordered acccess and counter.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.RawBuffer">
            <summary>
            Creates a raw buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferFlags.ArgumentBuffer">
            <summary>
            Creates an indirect arguments buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Blend">
            <summary>	
            Blend option. A blend option identifies the data source and an optional pre-blend operation.	
            </summary>	
            <remarks>	
            Blend options are specified in a <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/>. 	
            </remarks>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.Zero">
            <summary>	
            The data source is the color black (0, 0, 0, 0). No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.One">
            <summary>	
            The data source is the color white (1, 1, 1, 1). No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.SourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseSourceColor">
            <summary>	
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.SourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseSourceAlpha">
            <summary>	
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.DestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseDestinationAlpha">
            <summary>	
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.DestinationColor">
            <summary>	
            The data source is color data from a rendertarget. No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseDestinationColor">
            <summary>	
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.SourceAlphaSaturate">
            <summary>	
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.BlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BlendStates"/>. No pre-blend operation. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseBlendFactor">
            <summary>	
            The data source is the blend factor set with <see cref="M:SiliconStudio.Paradox.Graphics.GraphicsDevice.SetBlendState(SiliconStudio.Paradox.Graphics.BlendState)"/>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.SecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseSecondarySourceColor">
            <summary>	
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.SecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Blend.InverseSecondarySourceAlpha">
            <summary>	
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending. 	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BlendFunction">
            <summary>	
            RGB or alpha blending operation.	
            </summary>	
            <remarks>	
            The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendFunction.Add">
            <summary>	
            Add source 1 and source 2. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendFunction.Subtract">
            <summary>	
            Subtract source 1 from source 2. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendFunction.ReverseSubtract">
            <summary>	
            Subtract source 2 from source 1. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendFunction.Min">
            <summary>	
            Find the minimum of source 1 and source 2. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendFunction.Max">
            <summary>	
            Find the maximum of source 1 and source 2. 	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BlendStateDescription">
            <summary>
            Describes a blend state.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendStateDescription.#ctor(SiliconStudio.Paradox.Graphics.Blend,SiliconStudio.Paradox.Graphics.Blend)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.BlendStateDescription"/> class.
            </summary>
            <param name="sourceBlend">The source blend.</param>
            <param name="destinationBlend">The destination blend.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendStateDescription.SetDefaults">
            <summary>
            Setup this blend description with defaults value.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateDescription.AlphaToCoverageEnable">
            <summary>
            Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateDescription.IndependentBlendEnable">
            <summary>
            Set to true to enable independent blending in simultaneous render targets.  If set to false, only the RenderTarget[0] members are used. RenderTarget[1..7] are ignored. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateDescription.RenderTargets">
            <summary>
            An array of render-target-blend descriptions (see <see cref="T:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription"/>); these correspond to the eight rendertargets  that can be set to the output-merger stage at one time. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.BlendStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BufferDescription">
            <summary>
            Describes a buffer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BufferDescription.#ctor(System.Int32,SiliconStudio.Paradox.Graphics.BufferFlags,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SiliconStudio.Paradox.Graphics.BufferDescription"/> struct.
            </summary>
            <param name="sizeInBytes">Size of the buffer in bytes.</param>
            <param name="bufferFlags">Buffer flags describing the type of buffer.</param>
            <param name="usage">Usage of this buffer.</param>
            <param name="structureByteStride">The size of the structure (in bytes) when it represents a structured/typed buffer. Default = 0.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferDescription.SizeInBytes">
            <summary>	
            Size of the buffer in bytes.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferDescription.BufferFlags">
            <summary>	
            Buffer flags describing the type of buffer.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferDescription.Usage">
            <summary>	
            Usage of this buffer.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BufferDescription.StructureByteStride">
            <summary>	
            The size of the structure (in bytes) when it represents a structured/typed buffer.
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.ResourceRegion">
            <summary>	
            <p>Defines a 3D box.</p>	
            </summary>	
            <remarks>	
            <p>The following diagram shows a 3D box, where the origin is the left, front, top corner.</p><p></p><p>The values for <strong>right</strong>, <strong>bottom</strong>, and <strong>back</strong> are each one pixel past the end of the pixels that are included in the box region.  That is, the values for <strong>left</strong>, <strong>top</strong>, and <strong>front</strong> are included in the box region while the values for right, bottom, and back are excluded from the box region. For example, for a box that is one pixel wide, (right - left) == 1; the box region includes the left pixel but not the right pixel.</p>	
            </remarks>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Left">
            <summary>	
            <dd> <p>The x position of the left hand side of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Top">
            <summary>	
            <dd> <p>The y position of the top of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Front">
            <summary>	
            <dd> <p>The z position of the front of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Right">
            <summary>	
            <dd> <p>The x position of the right hand side of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Bottom">
            <summary>	
            <dd> <p>The y position of the bottom of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ResourceRegion.Back">
            <summary>	
            <dd> <p>The z position of the back of the box.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureFlags.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureFlags.ShaderResource">
            <summary>
            A texture usable as a ShaderResourceView.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureFlags.RenderTarget">
            <summary>
            A texture usable as render target.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureFlags.UnorderedAccess">
            <summary>
            A texture usable as an unordered access buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureFlags.DepthStencil">
            <summary>
            A texture usable as a depth stencil buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.MSAALevel">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MSAALevel.None">
            <summary>
            No multisample.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MSAALevel.X2">
            <summary>
            Multisample count of 2 pixels.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MSAALevel.X4">
            <summary>
            Multisample count of 4 pixels.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MSAALevel.X8">
            <summary>
            Multisample count of 8 pixels.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FakeSamplerState">
            <summary>Fake sampler state (Description should be valid).</summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FakeTexture2D">
            <summary>Fake 2D texture (URL should point to Image).</summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DepthStencilStencilOpDescription.StencilFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test fails. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DepthStencilStencilOpDescription.StencilDepthBufferFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DepthStencilStencilOpDescription.StencilPass">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes. The default is StencilOperation.Keep.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DepthStencilStencilOpDescription.StencilFunction">
            <summary>
            Gets or sets the comparison function for the stencil test. The default is CompareFunction.Always.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResourceMap">
            <summary>
            Structured returned by <see cref="!:GraphicsDeviceContext.Map"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceMap.DataPointer">
            <summary>
            Pointer to the data of the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResource"/> being mapped into the CPU memory.
            </summary>
            <remarks>
            If <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsProfile"/> is set to low, data are aligned to 4 bytes else alignment is 16 bytes.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceMap.RowPitch">
            <summary>
            The row pitch, or width, or physical size (in bytes) of the data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceMap.DepthPitch">
            <summary>
            The depth pitch, or width, or physical size (in bytes)of the data.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.IndexElementSize">
            <summary>
            Size of an index
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.MapMode">
            <summary>
            Describes how the cpu is accessing a <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResource"/> with the <see cref="!:GraphicsDeviceContext.Map"/> method.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MapMode.Read">
            <summary>
            Resource is mapped for reading. 
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MapMode.Write">
            <summary>
            Resource is mapped for writing. 
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/> or <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MapMode.ReadWrite">
            <summary>
            Resource is mapped for read-write.
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Staging"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MapMode.WriteDiscard">
            <summary>
            Resource is mapped for writing; the previous contents of the resource will be undefined.
            </summary>
            <remarks>
            The resource must have been created with usage <see cref="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.MapMode.WriteNoOverwrite">
            <summary>
            Resource is mapped for writing; the existing contents of the resource cannot be overwritten.
            </summary>
            <remarks>
            This flag is only valid on vertex and index buffers.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.RasterizerStateDescription">
            <summary>
            Describes a rasterizer state.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.#ctor(SiliconStudio.Paradox.Graphics.CullMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerStateDescription"/> class.
            </summary>
            <param name="cullMode">The cull mode.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.FillMode">
            <summary>
            Determines the fill mode to use when rendering (see <see cref="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.FillMode"/>).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn (see <see cref="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.CullMode"/>).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.FrontFaceCounterClockwise">
            <summary>
            Determines if a triangle is front- or back-facing. If this parameter is true, then a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is false then the opposite is true.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.DepthBias">
            <summary>
            Depth value added to a given pixel. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.DepthBiasClamp">
            <summary>
            Gets or sets the depth bias for polygons, which is the amount of bias to apply to the depth of a primitive to alleviate depth testing problems for primitives of similar depth. The default value is 0.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.SlopeScaleDepthBias">
            <summary>
            Scalar on a given pixel's slope. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.DepthClipEnable">
            <summary>
            Enable clipping based on distance. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.ScissorTestEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.MultiSampleAntiAlias">
            <summary>
            Enable multisample antialiasing.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.MultiSampleAntiAliasLine">
            <summary>
            Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.SetDefault">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.RasterizerStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.RasterizerStateFactory">
            <summary>
            Base factory for <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerState"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResourceFactoryBase">
            <summary>
            Base factory for all Graphics resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.RasterizerStateFactory.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerStateFactory"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateFactory.CullFront">
            <summary>
            Built-in raterizer state object with settings for culling primitives with clockwise winding order.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateFactory.CullBack">
            <summary>
            Built-in raterizer state object with settings for culling primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.RasterizerStateFactory.CullNone">
            <summary>
            Built-in raterizer state object with settings for not culling any primitives.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.SamplerStateFactory">
            <summary>
            Base factory for <see cref="T:SiliconStudio.Paradox.Graphics.SamplerState"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.SamplerStateFactory.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.SamplerStateFactory"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.PointWrap">
            <summary>
            Default state for point filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.PointClamp">
            <summary>
            Default state for point filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearWrap">
            <summary>
            Default state for linear filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearClamp">
            <summary>
            Default state for linear filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.AnisotropicWrap">
            <summary>
            Default state for anisotropic filtering with texture coordinate wrapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.AnisotropicClamp">
            <summary>
            Default state for anisotropic filtering with texture coordinate clamping.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.TextureDescription">
            <summary>
            A Common description for all textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Dimension">
            <summary>
            The dimension of a texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Width">
            <summary>	
            <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is valid for all textures: <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/>, <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>, <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> and <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Height">
            <summary>	
            <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>, <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/> and <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Depth">
            <summary>	
            <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SiliconStudio.Paradox.Graphics.Texture3D"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.ArraySize">
            <summary>	
            <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="F:SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/>, <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> and <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>
            </remarks>
            <remarks>
            This field is only valid for textures: <see cref="T:SiliconStudio.Paradox.Graphics.Texture1D"/>, <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/> and <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.MipLevels">
            <summary>	
            <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="T:SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Format">
            <summary>	
            <dd> <p>Texture format (see <strong><see cref="T:SharpDX.DXGI.Format"/></strong>).</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Level">
            <summary>	
            <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>	
            </summary>	
            <remarks>
            This field is only valid for <see cref="T:SiliconStudio.Paradox.Graphics.Texture2D"/>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Usage">
            <summary>	
            <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="T:SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.TextureDescription.Flags">
            <summary>	
            <dd> <p>Flags (see <strong><see cref="T:SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: <see cref="F:SharpDX.Direct3D11.BindFlags.ShaderResource"/>, <see cref="F:SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="F:SharpDX.Direct3D11.BindFlags.DepthStencil"/>.</p> </dd>	
            </summary>	
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureDescription.ToStagingDescription">
            <summary>
            Gets the staging description for this instance..
            </summary>
            <returns>A Staging description</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureDescription.op_Implicit(SiliconStudio.Paradox.Graphics.ImageDescription)~SiliconStudio.Paradox.Graphics.TextureDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SiliconStudio.Paradox.Graphics.ImageDescription"/> to <see cref="T:SiliconStudio.Paradox.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.TextureDescription.op_Implicit(SiliconStudio.Paradox.Graphics.TextureDescription)~SiliconStudio.Paradox.Graphics.ImageDescription">
            <summary>
            Performs an explicit conversion from <see cref="T:SiliconStudio.Paradox.Graphics.ImageDescription"/> to <see cref="T:SiliconStudio.Paradox.Graphics.TextureDescription"/>.
            </summary>
            <param name="description">The image description.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory">
            <summary>
            Base factory for <see cref="!:IDepthStencilState"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory.Default">
            <summary>
            A built-in state object with default settings for using a depth stencil buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory.DefaultInverse">
            <summary>
            A built-in state object with default settings using greater comparison for Z.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory.DepthRead">
            <summary>
            A built-in state object with settings for enabling a read-only depth stencil buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateFactory.None">
            <summary>
            A built-in state object with settings for not using a depth stencil buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsFactory">
            <summary>
            Root factory for all Graphics components.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsFactory.GraphicsApi">
            <summary>
            GraphicsApi key.
            TODO not the best place to store this identifier. Move it to GraphicsFactory?
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Buffer`1">
            <summary>
            A buffer with typed information.
            </summary>
            <typeparam name="T">Type of an element of this buffer.</typeparam>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Buffer`1.ElementSize">
            <summary>
            Gets the size of element T.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer`1.GetData">
            <summary>
            Gets the content of this texture to an array of data.
            </summary>
            <returns>An array of data.</returns>
            <remarks>This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            This method creates internally a stagging resource if this texture is not already a stagging resouce, copies to it and map it to memory. Use method with explicit staging resource
            for optimal performances.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer`1.SetData(`0@,System.Int32)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer`1.SetData(`0[],System.Int32)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer`1.SetData(SiliconStudio.Paradox.Graphics.GraphicsDevice,`0@,System.Int32)">
            <summary>
            Copies the content of a single structure data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Buffer`1.SetData(SiliconStudio.Paradox.Graphics.GraphicsDevice,`0[],System.Int32)">
            <summary>
            Copies the content an array of data from CPU memory to this buffer into GPU memory.
            </summary>
            <param name="device">The <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.</param>
            <param name="fromData">The data to copy from.</param>
            <param name="offsetInBytes">The offset in bytes to write to.</param>
            <remarks>
            This method is only working when called from the main thread that is accessing the main <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>. See the unmanaged documentation about Map/UnMap for usage and restrictions.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DepthStencilClearOptions">
            <summary>
            Specifies the buffer to use when calling Clear.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilClearOptions.DepthBuffer">
            <summary>
            A depth buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilClearOptions.Stencil">
            <summary>
            A stencil buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.ColorWriteChannels">
            <summary>	
            Identify which components of each pixel of a render target are writable during blending.	
            </summary>	
            <remarks>	
            These flags can be combined with a bitwise OR and is used in <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/>.
            </remarks>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.None">
            <summary>	
            None of the data are stored.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.Red">
            <summary>	
            Allow data to be stored in the red component. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.Green">
            <summary>	
            Allow data to be stored in the green component. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.Blue">
            <summary>	
            Allow data to be stored in the blue component. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.Alpha">
            <summary>	
            Allow data to be stored in the alpha component. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ColorWriteChannels.All">
            <summary>	
            Allow data to be stored in all components. 	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.CubeMapFace">
            <summary>
            Defines the faces of a cube map for <see cref="T:SiliconStudio.Paradox.Graphics.TextureCube"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.PositiveX">
            <summary>
            Positive x-face of the cube map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.NegativeX">
            <summary>
            Negative x-face of the cube map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.PositiveY">
            <summary>
            Positive y-face of the cube map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.NegativeY">
            <summary>
            Negative y-face of the cube map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.PositiveZ">
            <summary>
            Positive z-face of the cube map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CubeMapFace.NegativeZ">
            <summary>
            Negative z-face of the cube map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.CullMode">
            <summary>	
            Indicates triangles facing a particular direction are not drawn.	
            </summary>	
            <remarks>	
            This enumeration is part of a rasterizer-state object description (see <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerState"/>). 	
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CullMode.None">
            <summary>	
            Always draw all triangles. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CullMode.Front">
            <summary>	
            Do not draw triangles that are front-facing. 	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.CullMode.Back">
            <summary>	
            Do not draw triangles that are back-facing. 	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription">
            <summary>
            Describes a depth stencil state.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription"/> class.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.DepthBufferEnable">
            <summary>
            Enables or disables depth buffering. The default is true.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.DepthBufferFunction">
            <summary>
            Gets or sets the comparison function for the depth-buffer test. The default is CompareFunction.LessEqual
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.DepthBufferWriteEnable">
            <summary>
            Enables or disables writing to the depth buffer. The default is true.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.StencilEnable">
            <summary>
            Gets or sets stencil enabling. The default is false.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.StencilMask">
            <summary>
            Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. The default mask is byte.MaxValue.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            Gets or sets the write mask applied to values written into the stencil buffer. The default mask is byte.MaxValue.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.FrontFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.BackFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away the camera.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.SetDefault">
            <summary>
            Sets default values for this instance.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.DepthStencilStateDescription.Default">
            <summary>
            Gets default values for this instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.FillMode">
            <summary>	
            <p>Determines the fill mode to use when rendering triangles.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is part of a rasterizer-state object description (see <strong><see cref="T:SiliconStudio.Paradox.Graphics.RasterizerStateDescription"/></strong>).</p>	
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FillMode.Wireframe">
            <summary>	
            <dd> <p>Draw lines connecting the vertices. Adjacent vertices are not drawn.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.FillMode.Solid">
            <summary>	
            <dd> <p>Fill the triangles formed by the vertices. Adjacent vertices are not drawn.</p> </dd>	
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage">
            <summary>	
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Default">
            <summary>	
            A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Immutable">
            <summary>	
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Dynamic">
            <summary>	
            A resource that is accessible by both the GPU (read only) and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To update a dynamic resource, use a <strong>Map</strong> method.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.GraphicsResourceUsage.Staging">
            <summary>	
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>	
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BlendStateFactory">
            <summary>
            Base factory for <see cref="T:SiliconStudio.Paradox.Graphics.BlendState"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.BlendStateFactory.#ctor(SiliconStudio.Paradox.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.BlendStateFactory"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.Default">
            <summary>
            A built-in state object with settings for default blend, that is no blend at all.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.Additive">
            <summary>
            A built-in state object with settings for additive blend, that is adding the destination data to the source data without using alpha.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.AlphaBlend">
            <summary>
            A built-in state object with settings for alpha blend, that is blending the source and destination data using alpha.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.NonPremultiplied">
            <summary>
            A built-in state object with settings for blending with non-premultipled alpha, that is blending source and destination data using alpha while assuming the color data contains no alpha information.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.Opaque">
            <summary>
            A built-in state object with settings for opaque blend, that is overwriting the source with the destination data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateFactory.ColorDisabled">
            <summary>
            A built-in state object with settings for no color rendering on target 0, that is only render to depth stencil buffer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription">
            <summary>
            Describes the blend state for a render target.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.BlendEnable">
            <summary>
            Enable (or disable) blending. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.ColorSourceBlend">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.Blend"/> specifies the first RGB data source and includes an optional pre-blend operation. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.ColorDestinationBlend">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.Blend"/> specifies the second RGB data source and includes an optional pre-blend operation. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.ColorBlendFunction">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.BlendFunction"/> defines how to combine the RGB data sources. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.AlphaSourceBlend">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.Blend"/> specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.AlphaDestinationBlend">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.Blend"/> specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.AlphaBlendFunction">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Graphics.BlendFunction"/> defines how to combine the alpha data sources. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.BlendStateRenderTargetDescription.ColorWriteChannels">
            <summary>
            A write mask. 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PresentationParameters">
            <summary>
              Describess how data will be displayed to the screen.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.BackBufferFormat">
            <summary>
              A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure describing the display format.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.BackBufferHeight">
            <summary>
              A value that describes the resolution height.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.BackBufferWidth">
            <summary>
              A value that describes the resolution width.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.DepthStencilFormat">
            <summary>
            Gets or sets the depth stencil format
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.DeviceWindowHandle">
            <summary>
              A Window object. See remarks.
            </summary>
            <remarks>
              A window object is platform dependent:
              <ul>
                <li>On Windows Desktop: This could a low level window/control handle (IntPtr), or directly a Winform Control object.</li>
                <li>On Windows Metro: This could be SwapChainBackgroundPanel object.</li>
              </ul>
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.IsFullScreen">
            <summary>
              Gets or sets a value indicating whether the application is in full screen mode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.MultiSampleCount">
            <summary>
              Gets or sets a value indicating the number of sample locations during multisampling.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.PresentationInterval">
            <summary>
              Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.RefreshRate">
            <summary>
              A structure describing the refresh rate in hertz
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentationParameters.PreferredFullScreenOutputIndex">
            <summary>
            The output (monitor) index to use when switching to fullscreen mode. Doesn't have any effect when windowed mode is used.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PresentationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PresentationParameters"/> class with default values.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.WindowHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PresentationParameters"/> class with <see cref="F:SiliconStudio.Paradox.Graphics.PixelFormat.R8G8B8A8_UNorm"/>.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PresentationParameters.#ctor(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.WindowHandle,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.PresentationParameters"/> class.
            </summary>
            <param name="backBufferWidth">Width of the back buffer.</param>
            <param name="backBufferHeight">Height of the back buffer.</param>
            <param name="deviceWindowHandle">The device window handle.</param>
            <param name="backBufferFormat">The back buffer format.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PresentInterval">
            <summary>
            Defines flags that describe the relationship between the adapter refresh rate and the rate at which Present operations are completed.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentInterval.Immediate">
            <summary>
            The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentInterval.Default">
            <summary>
            Equivalent to setting One.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentInterval.One">
            <summary>
            The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). Present operations are not affected more frequently than the screen refresh rate; the runtime completes one Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PresentInterval.Two">
            <summary>
            The driver waits for the vertical retrace period. Present operations are not affected more frequently than every second screen refresh.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.PrimitiveType">
            <summary>
            Defines how vertex data is ordered.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.Undefined">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.PointList">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.LineList">
            <summary>	
            The data is ordered as a sequence of line segments; each line segment is described by two new vertices. The count may be any positive integer.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.LineStrip">
            <summary>	
            The data is ordered as a sequence of line segments; each line segment is described by one new vertex and the last vertex from the previous line seqment. The count may be any positive integer.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.TriangleList">
            <summary>	
            The data is ordered as a sequence of triangles; each triangle is described by three new vertices. Back-face culling is affected by the current winding-order render state.
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.TriangleStrip">
            <summary>	
            The data is ordered as a sequence of triangles; each triangle is described by two new vertices and one vertex from the previous triangle. The back-face culling flag is flipped automatically on even-numbered
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.LineListWithAdjacency">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.LineStripWithAdjacency">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.TriangleListWithAdjacency">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.PrimitiveType.TriangleStripWithAdjacency">
            <summary>	
            No documentation.	
            </summary>	
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.PrimitiveTypeExtensions.ControlPointCount(SiliconStudio.Paradox.Graphics.PrimitiveType,System.Int32)">
            <summary>	
            Interpret the vertex data as a patch list.
            </summary>	
            <param name="controlPoints">Number of control points. Value must be in the range 1 to 32.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.StencilOperation">
            <summary>
            TODO Comments
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Keep">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Invert">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.StencilOperation.Decrement">
            <summary>
            
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexBufferBinding">
            <summary>
            Binding structure that specifies a vertex buffer and other per-vertex parameters (such as offset and instancing) for a graphics device.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexBufferBinding.#ctor(SiliconStudio.Paradox.Graphics.Buffer,SiliconStudio.Paradox.Graphics.VertexDeclaration,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of this object.
            </summary>
            <param name="vertexBuffer">The vertex buffer</param>
            <param name="vertexDeclaration">The vertex declaration.</param>
            <param name="vertexCount">The vertex count.</param>
            <param name="vertexStride">The vertex stride.</param>
            <param name="vertexOffset">Offset (in Vertex ElementCount) from the beginning of the buffer to the first vertex to use.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Buffer">
            <summary>
            Gets a vertex buffer.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Offset">
            <summary>
            Gets the offset (vertex index) between the beginning of the buffer and the vertex data to use.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Stride">
            <summary>
            Gets the vertex stride.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Count">
            <summary>
            Gets the number of vertex.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexBufferBinding.Declaration">
            <summary>
            Gets the layout of the vertex buffer.
            </summary>
            <value>The declaration.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexDeclaration">
            <summary>
            The layout of a vertex buffer with a set of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexDeclaration"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.#ctor(SiliconStudio.Paradox.Graphics.VertexElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.#ctor(SiliconStudio.Paradox.Graphics.VertexElement[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The elements.</param>
            <param name="instanceCount">The instance count.</param>
            <param name="vertexStride">The vertex stride.</param>
            <exception cref="T:System.ArgumentNullException">elements</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.EnumerateWithOffsets">
            <summary>
            Enumerates <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> with declared offsets.
            </summary>
            <returns>A set of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> with offsets.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.CalculateSize">
            <summary>
            Calculate the size of the vertex declaration.
            </summary>
            <returns>The size in bytes of the vertex declaration</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.op_Implicit(SiliconStudio.Paradox.Graphics.VertexElement)~SiliconStudio.Paradox.Graphics.VertexDeclaration">
            <summary>
            Performs an implicit conversion from <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> to <see cref="T:SiliconStudio.Paradox.Graphics.VertexDeclaration"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexDeclaration.op_Implicit(SiliconStudio.Paradox.Graphics.VertexElement[])~SiliconStudio.Paradox.Graphics.VertexDeclaration">
            <summary>
            Performs an implicit conversion from <see cref="!:VertexElement[][]"/> to <see cref="T:SiliconStudio.Paradox.Graphics.VertexDeclaration"/>.
            </summary>
            <param name="elements">The elements.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexDeclaration.VertexElements">
            <summary>
            Gets the vertex elements.
            </summary>
            <value>The vertex elements.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexDeclaration.InstanceCount">
            <summary>
            Gets the instance count.
            </summary>
            <value>The instance count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexDeclaration.VertexStride">
            <summary>
            Gets the vertex stride.
            </summary>
            <value>The vertex stride.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.VertexElement">
            <summary>	
            A description of a single element for the input-assembler stage. This structure is related to <see cref="!:Direct3D11.InputElement"/>.
            </summary>	
            <remarks>	
            Because <see cref="!:Direct3D11.InputElement"/> requires to have the same <see cref="!:VertexBufferLayout.SlotIndex"/>, <see cref="!:VertexBufferLayout.VertexClassification"/> and <see cref="!:VertexBufferLayout.instanceDataStepRate"/>,
            the <see cref="!:VertexBufferLayout"/> structure encapsulates a set of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> for a particular slot, classification and instance data step rate.
            Unlike the default <see cref="!:Direct3D11.InputElement"/>, this structure accepts a semantic name with a postfix number that will be automatically extracted to the semantic index.
            </remarks>	
            <seealso cref="!:VertexBufferLayout"/>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned">
            <summary>
              Returns a value that can be used for the offset parameter of an InputElement to indicate that the element
              should be aligned directly after the previous element, including any packing if neccessary.
            </summary>
            <returns>A value used to align input elements.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.#ctor(System.String,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> struct.
            </summary>
            <param name="semanticName">Name of the semantic.</param>
            <param name="format">The format.</param>
            <remarks>
            If the semantic name contains a postfix number, this number will be used as a semantic index.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.#ctor(System.String,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> struct.
            </summary>
            <param name="semanticName">Name of the semantic.</param>
            <param name="semanticIndex">Index of the semantic.</param>
            <param name="format">The format.</param>
            <param name="alignedByteOffset">The aligned byte offset.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Color``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <typeparam name="T">Type of the Color semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Color(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Color(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "COLOR".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Normal``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <typeparam name="T">Type of the Normal semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Normal(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Normal(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "NORMAL".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Position``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <typeparam name="T">Type of the Position semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Position(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Position(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "POSITION".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.PositionTransformed``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <typeparam name="T">Type of the PositionTransformed semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.PositionTransformed(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.PositionTransformed(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "SV_POSITION".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.TextureCoordinate``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <typeparam name="T">Type of the TextureCoordinate semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.TextureCoordinate(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.TextureCoordinate(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TEXCOORD".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Tangent``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <typeparam name="T">Type of the Tangent semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Tangent(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.Tangent(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "TANGENT".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.BiTangent``1(System.Int32,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <typeparam name="T">Type of the BiTangent semantic.</typeparam>
            <param name="semanticIndex">The semantic index.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.BiTangent(SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.BiTangent(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Int32)">
            <summary>
            Declares a VertexElement with the semantic "BITANGENT".
            </summary>
            <param name="semanticIndex">The semantic index.</param>
            <param name="format">Format of this element.</param>
            <param name="offsetInBytes">The offset in bytes of this element. Use <see cref="F:SiliconStudio.Paradox.Graphics.VertexElement.AppendAligned"/> to compute automatically the offset from previous elements.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Graphics.VertexElement"/> that represents this semantic.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.VertexElement.ConvertTypeToFormat(System.Type)">
            <summary>
            Converts a type to a <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
            <param name="typeT">The type T.</param>
            <returns>The equivalent Format.</returns>
            <exception cref="T:System.NotSupportedException">If the convertion for this type is not supported.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexElement.SemanticName">
            <summary>	
            <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>	
            </summary>	
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexElement.SemanticAsText">
            <summary>	
            <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>	
            </summary>	
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexElement.SemanticIndex">
            <summary>	
            <dd> <p>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a  case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic  name </p>  <pre><code>matrix</code></pre>  <p>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</p> </dd>	
            </summary>	
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexElement.Format">
            <summary>	
            <dd> <p>The data type of the element data. See <strong><see cref="T:SharpDX.DXGI.Format"/></strong>.</p> </dd>	
            </summary>	
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.VertexElement.AlignedByteOffset">
            <summary>	
            <dd> <p>Optional. Offset (in bytes) between each element. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly  after the previous one, including any packing if necessary.</p> </dd>	
            </summary>	
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.Color">
            <summary>
            Vertex data contains diffuse or specular color.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.Normal">
            <summary>
            Vertex normal data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.Position">
            <summary>
            Position data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.PositionTransformed">
            <summary>
            Position transformed data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.Tangent">
            <summary>
            Vertex tangent data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.BiTangent">
            <summary>
            Vertex Bitangent data.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Texture coordinate data.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.Viewport">
            <summary>
            Defines the window dimensions of a render-target surface onto which a 3D volume projects.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.Empty">
            <summary>
            Empty value for an undefined viewport.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.X">
            <summary>
            Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.Y">
            <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.Width">
            <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.Height">
            <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.MinDepth">
            <summary>Gets or sets the minimum depth of the clip volume.</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.Viewport.MaxDepth">
            <summary>Gets or sets the maximum depth of the clip volume.</summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates an instance of this object.</summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Viewport.#ctor(SiliconStudio.Core.Mathematics.Rectangle)">
            <summary>Creates an instance of this object.</summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Viewport.ToString">
            <summary>Retrieves a string representation of this object.</summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Viewport.Project(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>Projects a 3D vector from object space into screen space.</summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Graphics.Viewport.Unproject(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix,SiliconStudio.Core.Mathematics.Matrix)">
            <summary>Converts a screen space point into a corresponding point in world space.</summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Viewport.Bounds">
            <summary>Gets the size of this resource.</summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Graphics.Viewport.AspectRatio">
            <summary>Gets the aspect ratio used by the viewport</summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Graphics.ViewType">
            <summary>
            Defines how a view is selected from a resource.
            </summary>
            <remarks>
            This selection model is taken from Nuaj by Patapom (http://wiki.patapom.com/index.php/Nuaj)
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ViewType.Full">
            <summary>
            Gets a texture view for the whole texture for all mips/arrays dimensions.
            </summary>
            <example>Here is what the view covers with whatever mipLevelIndex/arrayIndex
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |   X  |   X  |   X  |
                  |------+------+------|
             Mip1 |   X  |   X  |   X  |
                  |------+------+------|
             Mip2 |   X  |   X  |   X  |
                  ----------------------
            </example>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ViewType.Single">
            <summary>
            Gets a single texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains a single texture element at the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ViewType.ArrayBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the mip level texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |      |
                  |------+------+------|
             Mip2 |      |  X   |      |
                  ----------------------
            </example>
        </member>
        <member name="F:SiliconStudio.Paradox.Graphics.ViewType.MipBand">
            <summary>
            Gets a band texture view at the specified index in the mip hierarchy and in the array of textures
            The texture view contains all the array texture elements from the specified mip level and array index
            </summary>
            <example>Here is what the view covers with mipLevelIndex=1 and mrrayIndex=1
            
                   Array0 Array1 Array2
                  ______________________
             Mip0 |      |      |      |
                  |------+------+------|
             Mip1 |      |  X   |  X   |
                  |------+------+------|
             Mip2 |      |      |      |
                  ----------------------
            </example>
        </member>
    </members>
</doc>
